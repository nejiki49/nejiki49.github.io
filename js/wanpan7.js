$("#wanpan7").on("change click", function () {
  // Lvのvalueを取得
  const lvVal = parseFloat($("input[name=Lv]:checked").val());
  const results = [];
  // iの開始値と終了値を設定する
  let iStart, iEnd;

  if (lvVal === 50) {
    iStart = 623;
    iEnd = 894;
  } else if (lvVal === 100) {
    iStart = 351;
    iEnd = 950;
  } else {
    // 必要に応じて、他のlvValの値に対する処理を記述する
  }

  // iの範囲でループを実行する
  for (let i = iStart; i <= iEnd; i++) {
    //自分のポケモンの情報
    // kotaのvalueを取得
    const kotaVal = parseFloat($("input[name=kota]:checked").val());
    // mypokenameのvalueを取得
    const mypokeNameVal = parseFloat($("#mypokename option:selected").val());
    // shapeのvalueを取得
    const pokeShapeVal = parseFloat($("input[name=shape]:checked").val());

    const trainersVal = 4;
    //天候取得
    const whetherSelect = document.getElementById("whether");
    const selectedWhether = whetherSelect.value;
    //自分特性取得
    const myAbilitySelect = document.getElementById("myAbility");
    const selectedAbility = myAbilitySelect.value;
    //敵特性取得
    const tekiAbilitySelect = document.getElementById("tekiAbility");
    const selectedTekiAbility = tekiAbilitySelect.value;

    // チェックボックスの状態を取得
    const myCheckbox = document.getElementById("myBurned").checked;
    const tekiCheckbox = document.getElementById("tekiBurned").checked;
    const myParalysis = document.getElementById("myParalysis").checked;
    let myParalysisDisplay;
    if (myParalysis) {
      myParalysisDisplay = "[まひ*1/4]";
    } else {
      myParalysisDisplay = "";
    }

    const tekiParalysis = document.getElementById("tekiParalysis").checked;
    let tekiParalysisDisplay;
    if (tekiParalysis) {
      tekiParalysisDisplay = "[まひ*1/4]";
    } else {
      tekiParalysisDisplay = "";
    }
    const myReflectCheckbox = document.getElementById("tekiReflect").checked;
    const myLightScreenCheckbox = document.getElementById("tekiLightScreen").checked;
    const tekiReflectCheckbox = document.getElementById("myReflect").checked;
    const tekiLightScreenCheckbox = document.getElementById("myLightScreen").checked;

    const myImageUrl = "https://veekun.com/dex/media/pokemon/icons/" + mypokeNameVal + ".png";

    const mypokeST = bfpokedata.find((item) => item.pokeNo == mypokeNameVal && item.shape === pokeShapeVal);
    //自分のポケモンの情報
    const NAME = mypokeST ? mypokeST.NAME : ""; //名前

    // 自分持ち物のバリューを取得
    const myItem = mypokeST ? mypokeST.itemName : "";

    const mypokeBaseH = parseFloat(mypokeST ? mypokeST.shH : ""); //自H種族値
    const mypokeBaseA = parseFloat(mypokeST ? mypokeST.shA : ""); //自A種族値
    const mypokeBaseB = parseFloat(mypokeST ? mypokeST.shB : ""); //自B種族値
    const mypokeBaseC = parseFloat(mypokeST ? mypokeST.shC : ""); //自C種族値
    const mypokeBaseD = parseFloat(mypokeST ? mypokeST.shD : ""); //自D種族値
    const mypokeBaseS = parseFloat(mypokeST ? mypokeST.shS : ""); //自S種族値
    const mypokeTokusei1 = mypokeST ? mypokeST.tokusei1 : ""; //攻撃側特性1
    const mypokeTokusei2 = mypokeST ? mypokeST.tokusei2 : ""; //攻撃側特性2
    const mypokeKusamusubiDamage = parseFloat(mypokeST ? mypokeST.kusamusubiD : ""); //攻撃がわ草結び被ダメ
    const mypokeType1 = mypokeST ? mypokeST.t1 : ""; //タイプ1
    const mypokeType2 = mypokeST ? mypokeST.t2 : ""; //タイプ2
    const mypokenNAME = mypokeST ? mypokeST.nNAME : ""; //性格
    const mypokeShape = parseFloat(mypokeST ? mypokeST.shape : ""); //型
    const mypokeItemName = mypokeST ? mypokeST.itemName : ""; //持ち物名称
    const mypokeItemValue = mypokeST ? mypokeST.item : ""; //持ち物ID
    const mypokeWeight = parseFloat(mypokeST ? mypokeST.weight : ""); //体重
    const mypokeWeapon1No = parseFloat(mypokeST ? mypokeST.weapon1 : ""); //技ナンバー
    const mypokeWeapon2No = parseFloat(mypokeST ? mypokeST.weapon2 : ""); //技ナンバー
    const mypokeWeapon3No = parseFloat(mypokeST ? mypokeST.weapon3 : ""); //技ナンバー
    const mypokeWeapon4No = parseFloat(mypokeST ? mypokeST.weapon4 : ""); //技ナンバー

    const mypokedH = parseFloat(mypokeST ? mypokeST.dH : ""); //自H努力値
    const mypokedA = parseFloat(mypokeST ? mypokeST.dA : ""); //自A努力値
    const mypokedB = parseFloat(mypokeST ? mypokeST.dB : ""); //自B努力値
    const mypokedC = parseFloat(mypokeST ? mypokeST.dC : ""); //自C努力値
    const mypokedD = parseFloat(mypokeST ? mypokeST.dD : ""); //自D努力値
    const mypokedS = parseFloat(mypokeST ? mypokeST.dS : ""); //自S努力値
    // natureA
    const mypokenA = parseFloat(mypokeST ? mypokeST.nA : ""); //自A性格補正値
    const mypokenB = parseFloat(mypokeST ? mypokeST.nB : ""); //自B性格補正値
    const mypokenC = parseFloat(mypokeST ? mypokeST.nC : ""); //自C性格補正値
    const mypokenD = parseFloat(mypokeST ? mypokeST.nD : ""); //自D性格補正値
    const mypokenS = parseFloat(mypokeST ? mypokeST.nS : ""); //自S性格補正値

    let mypokeStatusH;
    if (mypokeBaseH == 1) {
      mypokeStatusH = 1;
    } else {
      mypokeStatusH = Math.floor(((mypokeBaseH * 2 + kotaVal + Math.floor(mypokedH / 4)) * lvVal) / 100) + lvVal + 10; //ヌケニン判定、自HP
    }

    let mypokeStatusA = Math.floor(
      (Math.floor(((mypokeBaseA * 2 + kotaVal + Math.floor(mypokedA / 4)) * lvVal) / 100 + 5) * mypokenA) / 10
    ); //(自A)計算
    let mypokeStatusB = Math.floor(
      (Math.floor(((mypokeBaseB * 2 + kotaVal + Math.floor(mypokedB / 4)) * lvVal) / 100 + 5) * mypokenB) / 10
    ); //(自B)
    let mypokeStatusC = Math.floor(
      (Math.floor(((mypokeBaseC * 2 + kotaVal + Math.floor(mypokedC / 4)) * lvVal) / 100 + 5) * mypokenC) / 10
    ); //(自C)
    let mypokeStatusD = Math.floor(
      (Math.floor(((mypokeBaseD * 2 + kotaVal + Math.floor(mypokedD / 4)) * lvVal) / 100 + 5) * mypokenD) / 10
    ); //(自D)
    let mypokeStatusS = Math.floor(
      (Math.floor(((mypokeBaseS * 2 + kotaVal + Math.floor(mypokedS / 4)) * lvVal) / 100 + 5) * mypokenS) / 10
    ); //(自S)

    // { name: "名前", wtype: "タイプ", power:  威力, powerdisplay: 威力(徹底攻略）, accuracy: 命中(必中100), accuracydisplay: 命中(徹底攻略）, pp: PP, moveClass: "分類", priority: 優先度, contact: "接触", protect: "守", king: "王者補正", subject: "効果対象", effect: "説明", no: 技No value, no51on:昇順並び替え },

    const mypokeMove1 = weaponsdata.find((item) => item.no === mypokeWeapon1No);
    const mypokeMove2 = weaponsdata.find((item) => item.no === mypokeWeapon2No);
    const mypokeMove3 = weaponsdata.find((item) => item.no === mypokeWeapon3No);
    const mypokeMove4 = weaponsdata.find((item) => item.no === mypokeWeapon4No);

    //name: "名前",
    const name1 = mypokeMove1 ? mypokeMove1.name : "";
    const name2 = mypokeMove2 ? mypokeMove2.name : "";
    const name3 = mypokeMove3 ? mypokeMove3.name : "";
    const name4 = mypokeMove4 ? mypokeMove4.name : "";

    //wtype: "タイプ"
    const wtype1 = mypokeMove1 ? mypokeMove1.wtype : "";
    const wtype2 = mypokeMove2 ? mypokeMove2.wtype : "";
    const wtype3 = mypokeMove3 ? mypokeMove3.wtype : "";
    const wtype4 = mypokeMove4 ? mypokeMove4.wtype : "";

    // power  威力
    let power1 = mypokeMove1 ? mypokeMove1.power : "";
    let power2 = mypokeMove2 ? mypokeMove2.power : "";
    let power3 = mypokeMove3 ? mypokeMove3.power : "";
    let power4 = mypokeMove4 ? mypokeMove4.power : "";

    // powerdisplay1:  威力 0は-表記,
    const powerdisplay1 = mypokeMove1 ? mypokeMove1.powerdisplay : "";
    const powerdisplay2 = mypokeMove2 ? mypokeMove2.powerdisplay : "";
    const powerdisplay3 = mypokeMove3 ? mypokeMove3.powerdisplay : "";
    const powerdisplay4 = mypokeMove4 ? mypokeMove4.powerdisplay : "";

    // accuracydisplay: 命中(徹底攻略）
    const accuracydisplay1 = mypokeMove1 ? mypokeMove1.accuracydisplay : "";
    const accuracydisplay2 = mypokeMove2 ? mypokeMove2.accuracydisplay : "";
    const accuracydisplay3 = mypokeMove3 ? mypokeMove3.accuracydisplay : "";
    const accuracydisplay4 = mypokeMove4 ? mypokeMove4.accuracydisplay : "";
    // pp: PP
    // accuracydisplay: 命中(徹底攻略）
    const pp1 = mypokeMove1 ? mypokeMove1.pp : "";
    const pp2 = mypokeMove2 ? mypokeMove2.pp : "";
    const pp3 = mypokeMove3 ? mypokeMove3.pp : "";
    const pp4 = mypokeMove4 ? mypokeMove4.pp : "";
    // moveClass: "分類",
    const moveClass1 = mypokeMove1 ? mypokeMove1.moveClass : "";
    const moveClass2 = mypokeMove2 ? mypokeMove2.moveClass : "";
    const moveClass3 = mypokeMove3 ? mypokeMove3.moveClass : "";
    const moveClass4 = mypokeMove4 ? mypokeMove4.moveClass : "";
    // priority: 優先度
    const priority1 = mypokeMove1 ? mypokeMove1.priority : "";
    const priority2 = mypokeMove2 ? mypokeMove2.priority : "";
    const priority3 = mypokeMove3 ? mypokeMove3.priority : "";
    const priority4 = mypokeMove4 ? mypokeMove4.priority : "";

    // contact: "接触
    const contact1 = mypokeMove1 ? mypokeMove1.contact : "";
    const contact2 = mypokeMove2 ? mypokeMove2.contact : "";
    const contact3 = mypokeMove3 ? mypokeMove3.contact : "";
    const contact4 = mypokeMove4 ? mypokeMove4.contact : "";

    // king: "王者補正
    const king1 = mypokeMove1 ? mypokeMove1.king : "";
    const king2 = mypokeMove2 ? mypokeMove2.king : "";
    const king3 = mypokeMove3 ? mypokeMove3.king : "";
    const king4 = mypokeMove4 ? mypokeMove4.king : "";

    // no: "技ナンバー
    const no1 = mypokeMove1 ? mypokeMove1.no : "";
    const no2 = mypokeMove2 ? mypokeMove2.no : "";
    const no3 = mypokeMove3 ? mypokeMove3.no : "";
    const no4 = mypokeMove4 ? mypokeMove4.no : "";
    // effect: "技の効果
    const effect1 = mypokeMove1 ? mypokeMove1.effect : "";
    const effect2 = mypokeMove2 ? mypokeMove2.effect : "";
    const effect3 = mypokeMove3 ? mypokeMove3.effect : "";
    const effect4 = mypokeMove4 ? mypokeMove4.effect : "";

    //敵のポケモンの情報
    const tekipokeNameVal = i;
    const tekipokeNo = bfpokedata.find((item) => item.bfNo == tekipokeNameVal)?.pokeNo; //敵ポケナンバー
    const tekiImageUrl = "https://veekun.com/dex/media/pokemon/icons/" + tekipokeNo + ".png";

    const tekipokeST = bfpokedata.filter((item) => item.pokeNo == tekipokeNo); //1型づつ出てくる
    const tekiNAME = bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.NAME; //敵H種族値※4型とも同じなのでfindで１件目を参照
    const tekiShape = parseFloat(bfpokedata.find((item) => item.bfNo == tekipokeNameVal)?.shape); //敵の型

    const tekipokeBaseH = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.shH); //敵H種族値※4型とも同じなのでfindで１件目を参照
    const tekipokeBaseA = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.shA); //敵A種族値
    const tekipokeBaseB = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.shB); //敵B種族値
    const tekipokeBaseC = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.shC); //敵C種族値
    const tekipokeBaseD = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.shD); //敵D種族値
    const tekipokeBaseS = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.shS); //敵S種族値
    const tekipokeTokusei1 = bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.tokusei1; //特性1
    const tekipokeTokusei2 = bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.tokusei2; //特性2
    const tekipokeKusamusubiDamage = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.kusamusubiD); //攻撃がわ草結び被ダメ
    const tekipokeType1 = bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.t1; //タイプ1
    const tekipokeType2 = bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.t2; //タイプ2

    const tekipokeBfNoArray = tekipokeST.map((item) => item.pokeNo);
    const tekipokeBfNoshape1 = tekipokeBfNoArray[0]; //敵pokeNo　型1
    const tekipokeBfNoshape2 = tekipokeBfNoArray[1]; //敵pokeNo　型2
    const tekipokeBfNoshape3 = tekipokeBfNoArray[2]; //敵pokeNo　型3
    const tekipokeBfNoshape4 = tekipokeBfNoArray[3]; //敵pokeNo　型4

    const tekipokenNAMEArray = tekipokeST.map((item) => item.nNAME); //性格4型配列
    const tekipokenNAMEshape1 = tekipokenNAMEArray[0]; //敵性格　型1
    const tekipokenNAMEshape2 = tekipokenNAMEArray[1]; //敵性格　型2
    const tekipokenNAMEshape3 = tekipokenNAMEArray[2]; //敵性格　型3
    const tekipokenNAMEshape4 = tekipokenNAMEArray[3]; //敵性格　型4

    //ここでNaN返した場合は出力しないようにする。
    const tekipokeShapeArray = tekipokeST.map((item) => item.shape); //型4型配列
    const tekipokeShape1 = parseFloat(tekipokeShapeArray[0]); //敵型　型1
    const tekipokeShape2 = parseFloat(tekipokeShapeArray[1]); //敵型　型2
    const tekipokeShape3 = parseFloat(tekipokeShapeArray[2]); //敵型　型3
    const tekipokeShape4 = parseFloat(tekipokeShapeArray[3]); //敵型　型4

    const tekipokeItemNameArray = tekipokeST.map((item) => item.itemName); //持ち物名称4型配列
    const tekipokeItemName1 = tekipokeItemNameArray[0]; //敵持ち物名称　型1
    const tekipokeItemName2 = tekipokeItemNameArray[1]; //敵持ち物名称　型2
    const tekipokeItemName3 = tekipokeItemNameArray[2]; //敵持ち物名称　型3
    const tekipokeItemName4 = tekipokeItemNameArray[3]; //敵持ち物名称　型4

    // 敵持ち物のバリューを代入

    const tekiItem1 = tekipokeItemNameArray[0]; //敵持ち物名称　型1
    const tekiItem2 = tekipokeItemNameArray[1]; //敵持ち物名称　型2
    const tekiItem3 = tekipokeItemNameArray[2]; //敵持ち物名称　型3
    const tekiItem4 = tekipokeItemNameArray[3]; //敵持ち物名称　型4

    const tekipokeItemValueArray = tekipokeST.map((item) => item.item); //持ち物ID4型配列
    const tekipokeItem1 = tekipokeItemValueArray[0]; //敵持ち物ID　型1
    const tekipokeItem2 = tekipokeItemValueArray[1]; //敵持ち物ID　型2
    const tekipokeItem3 = tekipokeItemValueArray[2]; //敵持ち物ID　型3
    const tekipokeItem4 = tekipokeItemValueArray[3]; //敵持ち物ID　型4

    const tekipokeWeight = parseFloat(bfpokedata.find((item) => item.pokeNo == tekipokeNo)?.weight); //体重

    const tekipokeWeapon1NoArray = tekipokeST.map((item) => parseFloat(item.weapon1));
    const tekipokeWeapon1NoS1 = parseFloat(tekipokeWeapon1NoArray[0]); //敵わざ1　型1
    const tekipokeWeapon1NoS2 = parseFloat(tekipokeWeapon1NoArray[1]); //敵わざ1　型2
    const tekipokeWeapon1NoS3 = parseFloat(tekipokeWeapon1NoArray[2]); //敵わざ1　型3
    const tekipokeWeapon1NoS4 = parseFloat(tekipokeWeapon1NoArray[3]); //敵わざ1　型4

    const tekipokeWeapon2NoArray = tekipokeST.map((item) => parseFloat(item.weapon2));
    const tekipokeWeapon2NoS1 = parseFloat(tekipokeWeapon2NoArray[0]); //敵わざ2　型1
    const tekipokeWeapon2NoS2 = parseFloat(tekipokeWeapon2NoArray[1]); //敵わざ2　型2
    const tekipokeWeapon2NoS3 = parseFloat(tekipokeWeapon2NoArray[2]); //敵わざ2　型3
    const tekipokeWeapon2NoS4 = parseFloat(tekipokeWeapon2NoArray[3]); //敵わざ2　型4

    const tekipokeWeapon3NoArray = tekipokeST.map((item) => parseFloat(item.weapon3));
    const tekipokeWeapon3NoS1 = parseFloat(tekipokeWeapon3NoArray[0]); //敵わざ3　型1
    const tekipokeWeapon3NoS2 = parseFloat(tekipokeWeapon3NoArray[1]); //敵わざ3　型2
    const tekipokeWeapon3NoS3 = parseFloat(tekipokeWeapon3NoArray[2]); //敵わざ3　型3
    const tekipokeWeapon3NoS4 = parseFloat(tekipokeWeapon3NoArray[3]); //敵わざ3　型4

    const tekipokeWeapon4NoArray = tekipokeST.map((item) => parseFloat(item.weapon4));
    const tekipokeWeapon4NoS1 = parseFloat(tekipokeWeapon4NoArray[0]); //敵わざ4　型1
    const tekipokeWeapon4NoS2 = parseFloat(tekipokeWeapon4NoArray[1]); //敵わざ4　型2
    const tekipokeWeapon4NoS3 = parseFloat(tekipokeWeapon4NoArray[2]); //敵わざ4　型3
    const tekipokeWeapon4NoS4 = parseFloat(tekipokeWeapon4NoArray[3]); //敵わざ4　型4

    const tekipokedHArray = tekipokeST.map((item) => parseFloat(item.dH));
    const tekipokedHS1 = parseFloat(tekipokedHArray[0]); //敵H努力値　型1
    const tekipokedHS2 = parseFloat(tekipokedHArray[1]); //敵H努力値　型2
    const tekipokedHS3 = parseFloat(tekipokedHArray[2]); //敵H努力値　型3
    const tekipokedHS4 = parseFloat(tekipokedHArray[3]); //敵H努力値　型4

    const tekipokedAArray = tekipokeST.map((item) => parseFloat(item.dA));
    const tekipokedAS1 = parseFloat(tekipokedAArray[0]); //敵A努力値　型1
    const tekipokedAS2 = parseFloat(tekipokedAArray[1]); //敵A努力値　型2
    const tekipokedAS3 = parseFloat(tekipokedAArray[2]); //敵A努力値　型3
    const tekipokedAS4 = parseFloat(tekipokedAArray[3]); //敵A努力値　型4

    const tekipokedBArray = tekipokeST.map((item) => parseFloat(item.dB));
    const tekipokedBS1 = parseFloat(tekipokedBArray[0]); //敵B努力値　型1
    const tekipokedBS2 = parseFloat(tekipokedBArray[1]); //敵B努力値　型2
    const tekipokedBS3 = parseFloat(tekipokedBArray[2]); //敵B努力値　型3
    const tekipokedBS4 = parseFloat(tekipokedBArray[3]); //敵B努力値　型4

    const tekipokedCArray = tekipokeST.map((item) => parseFloat(item.dC));
    const tekipokedCS1 = parseFloat(tekipokedCArray[0]); //敵C努力値　型1
    const tekipokedCS2 = parseFloat(tekipokedCArray[1]); //敵C努力値　型2
    const tekipokedCS3 = parseFloat(tekipokedCArray[2]); //敵C努力値　型3
    const tekipokedCS4 = parseFloat(tekipokedCArray[3]); //敵C努力値　型4

    const tekipokedDArray = tekipokeST.map((item) => parseFloat(item.dD));
    const tekipokedDS1 = parseFloat(tekipokedDArray[0]); //敵D努力値　型1
    const tekipokedDS2 = parseFloat(tekipokedDArray[1]); //敵D努力値　型2
    const tekipokedDS3 = parseFloat(tekipokedDArray[2]); //敵D努力値　型3
    const tekipokedDS4 = parseFloat(tekipokedDArray[3]); //敵D努力値　型4

    const tekipokedSArray = tekipokeST.map((item) => parseFloat(item.dS));
    const tekipokedSS1 = parseFloat(tekipokedSArray[0]); //敵S努力値　型1
    const tekipokedSS2 = parseFloat(tekipokedSArray[1]); //敵S努力値　型2
    const tekipokedSS3 = parseFloat(tekipokedSArray[2]); //敵S努力値　型3
    const tekipokedSS4 = parseFloat(tekipokedSArray[3]); //敵S努力値　型4

    //性格補正
    const tekipokenAArray = tekipokeST.map((item) => parseFloat(item.nA));
    const tekipokenAS1 = parseFloat(tekipokenAArray[0]); //敵A性格補正　型1
    const tekipokenAS2 = parseFloat(tekipokenAArray[1]); //敵A性格補正　型2
    const tekipokenAS3 = parseFloat(tekipokenAArray[2]); //敵A性格補正　型3
    const tekipokenAS4 = parseFloat(tekipokenAArray[3]); //敵A性格補正　型4

    //     const tekipokenB = parseFloat(tekipokeST.nB);
    const tekipokenBArray = tekipokeST.map((item) => parseFloat(item.nB));
    const tekipokenBS1 = parseFloat(tekipokenBArray[0]); //敵B性格補正　型1
    const tekipokenBS2 = parseFloat(tekipokenBArray[1]); //敵B性格補正　型2
    const tekipokenBS3 = parseFloat(tekipokenBArray[2]); //敵B性格補正　型3
    const tekipokenBS4 = parseFloat(tekipokenBArray[3]); //敵B性格補正　型4

    //     const tekipokenC = parseFloat(tekipokeST.nC);
    const tekipokenCArray = tekipokeST.map((item) => parseFloat(item.nC));
    const tekipokenCS1 = parseFloat(tekipokenCArray[0]); //敵C性格補正　型1
    const tekipokenCS2 = parseFloat(tekipokenCArray[1]); //敵C性格補正　型2
    const tekipokenCS3 = parseFloat(tekipokenCArray[2]); //敵C性格補正　型3
    const tekipokenCS4 = parseFloat(tekipokenCArray[3]); //敵C性格補正　型4

    //     const tekipokenD = parseFloat(tekipokeST.nD);
    const tekipokenDArray = tekipokeST.map((item) => parseFloat(item.nD));
    const tekipokenDS1 = parseFloat(tekipokenDArray[0]); //敵D性格補正　型1
    const tekipokenDS2 = parseFloat(tekipokenDArray[1]); //敵D性格補正　型2
    const tekipokenDS3 = parseFloat(tekipokenDArray[2]); //敵D性格補正　型3
    const tekipokenDS4 = parseFloat(tekipokenDArray[3]); //敵D性格補正　型4

    //     const tekipokenS = parseFloat(tekipokeST.nS);
    const tekipokenSArray = tekipokeST.map((item) => parseFloat(item.nS));
    const tekipokenSS1 = parseFloat(tekipokenSArray[0]); //敵S性格補正　型1
    const tekipokenSS2 = parseFloat(tekipokenSArray[1]); //敵S性格補正　型2
    const tekipokenSS3 = parseFloat(tekipokenSArray[2]); //敵S性格補正　型3
    const tekipokenSS4 = parseFloat(tekipokenSArray[3]); //敵S性格補正　型4

    const trainerData = trainerdata.find((item) => item.cd == trainersVal);

    const trainerId = parseFloat(trainerData.cd); //トレーナID
    const trainerRank = parseFloat(trainerData.rank); //トレーナID
    const trainerKota = 24; //個体値
    const trainerUnder100 = parseFloat(trainerData.under100); //オープン使用範囲下限
    const trainerTop100 = parseFloat(trainerData.top100); //オープン使用範囲上限
    const trainerSelect100 = trainerData.select100; //オープン使用範囲
    const trainerUnder50 = parseFloat(trainerData.under50); //50レベル使用範囲下限
    const trainerTop50 = parseFloat(trainerData.top50); //50レベル使用範囲上限
    const trainerSelect50 = trainerData.select50; //50レベル使用範囲
    const trainerName = trainerData.label; //トレーナー名

    let tekipokeStatusHS1;
    let tekipokeStatusHS2;
    let tekipokeStatusHS3;
    let tekipokeStatusHS4;

    if (tekipokeBaseH == 1) {
      tekipokeStatusHS1 = 1; //ヌケニン判定
      tekipokeStatusHS2 = 1;
      tekipokeStatusHS3 = 1;
      tekipokeStatusHS4 = 1;
    } else {
      tekipokeStatusHS1 =
        Math.floor(((tekipokeBaseH * 2 + trainerKota + Math.floor(tekipokedHS1 / 4)) * lvVal) / 100) + lvVal + 10; //敵HP　型1
      tekipokeStatusHS2 =
        Math.floor(((tekipokeBaseH * 2 + trainerKota + Math.floor(tekipokedHS2 / 4)) * lvVal) / 100) + lvVal + 10; //敵HP　型2
      tekipokeStatusHS3 =
        Math.floor(((tekipokeBaseH * 2 + trainerKota + Math.floor(tekipokedHS3 / 4)) * lvVal) / 100) + lvVal + 10; //敵HP　型3
      tekipokeStatusHS4 =
        Math.floor(((tekipokeBaseH * 2 + trainerKota + Math.floor(tekipokedHS4 / 4)) * lvVal) / 100) + lvVal + 10; //敵HP　型4
    }

    let tekipokeStatusAS1 = Math.floor(
      (Math.floor(((tekipokeBaseA * 2 + trainerKota + Math.floor(tekipokedAS1 / 4)) * lvVal) / 100 + 5) *
        tekipokenAS1) /
        10
    ); //(敵A)型1
    let tekipokeStatusAS2 = Math.floor(
      (Math.floor(((tekipokeBaseA * 2 + trainerKota + Math.floor(tekipokedAS2 / 4)) * lvVal) / 100 + 5) *
        tekipokenAS2) /
        10
    ); //(敵A)型2
    let tekipokeStatusAS3 = Math.floor(
      (Math.floor(((tekipokeBaseA * 2 + trainerKota + Math.floor(tekipokedAS3 / 4)) * lvVal) / 100 + 5) *
        tekipokenAS3) /
        10
    ); //(敵A)型3
    let tekipokeStatusAS4 = Math.floor(
      (Math.floor(((tekipokeBaseA * 2 + trainerKota + Math.floor(tekipokedAS4 / 4)) * lvVal) / 100 + 5) *
        tekipokenAS4) /
        10
    ); //(敵A)型4

    let tekipokeStatusBS1 = Math.floor(
      (Math.floor(((tekipokeBaseB * 2 + trainerKota + Math.floor(tekipokedBS1 / 4)) * lvVal) / 100 + 5) *
        tekipokenBS1) /
        10
    ); //(敵B)型1
    let tekipokeStatusBS2 = Math.floor(
      (Math.floor(((tekipokeBaseB * 2 + trainerKota + Math.floor(tekipokedBS2 / 4)) * lvVal) / 100 + 5) *
        tekipokenBS2) /
        10
    ); //(敵B)型2
    let tekipokeStatusBS3 = Math.floor(
      (Math.floor(((tekipokeBaseB * 2 + trainerKota + Math.floor(tekipokedBS3 / 4)) * lvVal) / 100 + 5) *
        tekipokenBS3) /
        10
    ); //(敵B)型3
    let tekipokeStatusBS4 = Math.floor(
      (Math.floor(((tekipokeBaseB * 2 + trainerKota + Math.floor(tekipokedBS4 / 4)) * lvVal) / 100 + 5) *
        tekipokenBS4) /
        10
    ); //(敵B)型4

    let tekipokeStatusCS1 = Math.floor(
      (Math.floor(((tekipokeBaseC * 2 + trainerKota + Math.floor(tekipokedCS1 / 4)) * lvVal) / 100 + 5) *
        tekipokenCS1) /
        10
    ); //(敵C)型1
    let tekipokeStatusCS2 = Math.floor(
      (Math.floor(((tekipokeBaseC * 2 + trainerKota + Math.floor(tekipokedCS2 / 4)) * lvVal) / 100 + 5) *
        tekipokenCS2) /
        10
    ); //(敵C)型2
    let tekipokeStatusCS3 = Math.floor(
      (Math.floor(((tekipokeBaseC * 2 + trainerKota + Math.floor(tekipokedCS3 / 4)) * lvVal) / 100 + 5) *
        tekipokenCS3) /
        10
    ); //(敵C)型3
    let tekipokeStatusCS4 = Math.floor(
      (Math.floor(((tekipokeBaseC * 2 + trainerKota + Math.floor(tekipokedCS4 / 4)) * lvVal) / 100 + 5) *
        tekipokenCS4) /
        10
    ); //(敵C)型4

    let tekipokeStatusDS1 = Math.floor(
      (Math.floor(((tekipokeBaseD * 2 + trainerKota + Math.floor(tekipokedDS1 / 4)) * lvVal) / 100 + 5) *
        tekipokenDS1) /
        10
    ); //(敵D)型1
    let tekipokeStatusDS2 = Math.floor(
      (Math.floor(((tekipokeBaseD * 2 + trainerKota + Math.floor(tekipokedDS2 / 4)) * lvVal) / 100 + 5) *
        tekipokenDS2) /
        10
    ); //(敵D)型2
    let tekipokeStatusDS3 = Math.floor(
      (Math.floor(((tekipokeBaseD * 2 + trainerKota + Math.floor(tekipokedDS3 / 4)) * lvVal) / 100 + 5) *
        tekipokenDS3) /
        10
    ); //(敵D)型3
    let tekipokeStatusDS4 = Math.floor(
      (Math.floor(((tekipokeBaseD * 2 + trainerKota + Math.floor(tekipokedDS4 / 4)) * lvVal) / 100 + 5) *
        tekipokenDS4) /
        10
    ); //(敵D)型4

    let tekipokeStatusSS1 = Math.floor(
      (Math.floor(((tekipokeBaseS * 2 + trainerKota + Math.floor(tekipokedSS1 / 4)) * lvVal) / 100 + 5) *
        tekipokenSS1) /
        10
    ); //(敵S)型1
    let tekipokeStatusSS2 = Math.floor(
      (Math.floor(((tekipokeBaseS * 2 + trainerKota + Math.floor(tekipokedSS2 / 4)) * lvVal) / 100 + 5) *
        tekipokenSS2) /
        10
    ); //(敵S)型2
    let tekipokeStatusSS3 = Math.floor(
      (Math.floor(((tekipokeBaseS * 2 + trainerKota + Math.floor(tekipokedSS3 / 4)) * lvVal) / 100 + 5) *
        tekipokenSS3) /
        10
    ); //(敵S)型3
    let tekipokeStatusSS4 = Math.floor(
      (Math.floor(((tekipokeBaseS * 2 + trainerKota + Math.floor(tekipokedSS4 / 4)) * lvVal) / 100 + 5) *
        tekipokenSS4) /
        10
    ); //(敵S)型4

    //      { name: "名前", wtype: "タイプ", power:  威力, powerdisplay: 威力(徹底攻略）, accuracy: 命中(必中100), accuracydisplay: 命中(徹底攻略）, pp: PP, moveClass: "分類", priority: 優先度, contact: "接触", protect: "守", king: "王者補正", subject: "効果対象", effect: "説明", no: 技No value, no51on:昇順並び替え },

    //敵のポケモン型1

    const tekipokeMove1S1 = weaponsdata.find((item) => item.no === tekipokeWeapon1NoS1);
    const tekipokeMove2S1 = weaponsdata.find((item) => item.no === tekipokeWeapon2NoS1);
    const tekipokeMove3S1 = weaponsdata.find((item) => item.no === tekipokeWeapon3NoS1);
    const tekipokeMove4S1 = weaponsdata.find((item) => item.no === tekipokeWeapon4NoS1);

    const name1S1 = tekipokeMove1S1 ? tekipokeMove1S1.name : ""; //型1　わざ1 名称
    const name2S1 = tekipokeMove2S1 ? tekipokeMove2S1.name : ""; //型1　わざ2 名称
    const name3S1 = tekipokeMove3S1 ? tekipokeMove3S1.name : ""; //型1　わざ3 名称
    const name4S1 = tekipokeMove4S1 ? tekipokeMove4S1.name : ""; //型1　わざ4 名称
    const wtype1S1 = tekipokeMove1S1 ? tekipokeMove1S1.wtype : ""; //型1　わざ1 タイプ
    const wtype2S1 = tekipokeMove2S1 ? tekipokeMove2S1.wtype : ""; //型1　わざ2 タイプ
    const wtype3S1 = tekipokeMove3S1 ? tekipokeMove3S1.wtype : ""; //型1　わざ3 タイプ
    const wtype4S1 = tekipokeMove4S1 ? tekipokeMove4S1.wtype : ""; //型1　わざ4 タイプ

    let power1S1 = tekipokeMove1S1 ? tekipokeMove1S1.power : ""; //型1　わざ1 威力
    let power2S1 = tekipokeMove2S1 ? tekipokeMove2S1.power : ""; //型1　わざ2 威力
    let power3S1 = tekipokeMove3S1 ? tekipokeMove3S1.power : ""; //型1　わざ3 威力
    let power4S1 = tekipokeMove4S1 ? tekipokeMove4S1.power : ""; //型1　わざ4 威力
    const powerdisplay1S1 = tekipokeMove1S1 ? tekipokeMove1S1.powerdisplay : ""; //型1　わざ1 威力表示
    const powerdisplay2S1 = tekipokeMove2S1 ? tekipokeMove2S1.powerdisplay : ""; //型1　わざ2 威力表示
    const powerdisplay3S1 = tekipokeMove3S1 ? tekipokeMove3S1.powerdisplay : ""; //型1　わざ3 威力表示
    const powerdisplay4S1 = tekipokeMove4S1 ? tekipokeMove4S1.powerdisplay : ""; //型1　わざ4 威力表示
    const accuracydisplay1S1 = tekipokeMove1S1 ? tekipokeMove1S1.accuracydisplay : ""; //型1　わざ1 命中(徹底攻略）
    const accuracydisplay2S1 = tekipokeMove2S1 ? tekipokeMove2S1.accuracydisplay : ""; //型1　わざ2 命中(徹底攻略）
    const accuracydisplay3S1 = tekipokeMove3S1 ? tekipokeMove3S1.accuracydisplay : ""; //型1　わざ3 命中(徹底攻略）
    const accuracydisplay4S1 = tekipokeMove4S1 ? tekipokeMove4S1.accuracydisplay : ""; //型1　わざ4 命中(徹底攻略）
    const pp1S1 = tekipokeMove1S1 ? tekipokeMove1S1.pp : ""; //型1　わざ1 PP
    const pp2S1 = tekipokeMove2S1 ? tekipokeMove2S1.pp : ""; //型1　わざ2 PP
    const pp3S1 = tekipokeMove3S1 ? tekipokeMove3S1.pp : ""; //型1　わざ3 PP
    const pp4S1 = tekipokeMove4S1 ? tekipokeMove4S1.pp : ""; //型1　わざ4 PP
    const moveClass1S1 = tekipokeMove1S1 ? tekipokeMove1S1.moveClass : ""; //型1　わざ1 分類
    const moveClass2S1 = tekipokeMove2S1 ? tekipokeMove2S1.moveClass : ""; //型1　わざ2 分類
    const moveClass3S1 = tekipokeMove3S1 ? tekipokeMove3S1.moveClass : ""; //型1　わざ3 分類
    const moveClass4S1 = tekipokeMove4S1 ? tekipokeMove4S1.moveClass : ""; //型1　わざ4 分類
    const priority1S1 = tekipokeMove1S1 ? tekipokeMove1S1.priority : ""; //型1　わざ1 優先度
    const priority2S1 = tekipokeMove2S1 ? tekipokeMove2S1.priority : ""; //型1　わざ2 優先度
    const priority3S1 = tekipokeMove3S1 ? tekipokeMove3S1.priority : ""; //型1　わざ3 優先度
    const priority4S1 = tekipokeMove4S1 ? tekipokeMove4S1.priority : ""; //型1　わざ4 優先度
    const contact1S1 = tekipokeMove1S1 ? tekipokeMove1S1.contact : ""; //型1　わざ1 接触
    const contact2S1 = tekipokeMove2S1 ? tekipokeMove2S1.contact : ""; //型1　わざ2 接触
    const contact3S1 = tekipokeMove3S1 ? tekipokeMove3S1.contact : ""; //型1　わざ3 接触
    const contact4S1 = tekipokeMove4S1 ? tekipokeMove4S1.contact : ""; //型1　わざ4 接触
    const king1S1 = tekipokeMove1S1 ? tekipokeMove1S1.king : ""; //型1　わざ1 王者補正
    const king2S1 = tekipokeMove2S1 ? tekipokeMove2S1.king : ""; //型1　わざ2 王者補正
    const king3S1 = tekipokeMove3S1 ? tekipokeMove3S1.king : ""; //型1　わざ3 王者補正
    const king4S1 = tekipokeMove4S1 ? tekipokeMove4S1.king : ""; //型1　わざ4 王者補正
    const no1S1 = tekipokeMove1S1 ? tekipokeMove1S1.no : ""; //型1　わざ1 技ナンバー
    const no2S1 = tekipokeMove2S1 ? tekipokeMove2S1.no : ""; //型1　わざ2 技ナンバー
    const no3S1 = tekipokeMove3S1 ? tekipokeMove3S1.no : ""; //型1　わざ3 技ナンバー
    const no4S1 = tekipokeMove4S1 ? tekipokeMove4S1.no : ""; //型1　わざ4 技ナンバー
    const effect1S1 = tekipokeMove1S1 ? tekipokeMove1S1.effect : ""; //型1　わざ1 技の効果
    const effect2S1 = tekipokeMove2S1 ? tekipokeMove2S1.effect : ""; //型1　わざ2 技の効果
    const effect3S1 = tekipokeMove3S1 ? tekipokeMove3S1.effect : ""; //型1　わざ3 技の効果
    const effect4S1 = tekipokeMove4S1 ? tekipokeMove4S1.effect : ""; //型1　わざ4 技の効果

    ///////////////////////////////////

    //敵のポケモン型2

    const tekipokeMove1S2 = weaponsdata.find((item) => item.no === tekipokeWeapon1NoS2);
    const tekipokeMove2S2 = weaponsdata.find((item) => item.no === tekipokeWeapon2NoS2);
    const tekipokeMove3S2 = weaponsdata.find((item) => item.no === tekipokeWeapon3NoS2);
    const tekipokeMove4S2 = weaponsdata.find((item) => item.no === tekipokeWeapon4NoS2);

    const name1S2 = tekipokeMove1S2 ? tekipokeMove1S2.name : ""; //型2　わざ2 名称
    const name2S2 = tekipokeMove2S2 ? tekipokeMove2S2.name : ""; //型2　わざ2 名称
    const name3S2 = tekipokeMove3S2 ? tekipokeMove3S2.name : ""; //型2　わざ2 名称
    const name4S2 = tekipokeMove4S2 ? tekipokeMove4S2.name : ""; //型2　わざ2 名称

    const wtype1S2 = tekipokeMove1S2 ? tekipokeMove1S2.wtype : ""; //型2　わざ2 タイプ
    const wtype2S2 = tekipokeMove2S2 ? tekipokeMove2S2.wtype : ""; //型2　わざ2 タイプ
    const wtype3S2 = tekipokeMove3S2 ? tekipokeMove3S2.wtype : ""; //型2　わざ2 タイプ
    const wtype4S2 = tekipokeMove4S2 ? tekipokeMove4S2.wtype : ""; //型2　わざ2 タイプ

    let power1S2 = tekipokeMove1S2 ? tekipokeMove1S2.power : ""; //型2　わざ2 威力
    let power2S2 = tekipokeMove2S2 ? tekipokeMove2S2.power : ""; //型2　わざ2 威力
    let power3S2 = tekipokeMove3S2 ? tekipokeMove3S2.power : ""; //型2　わざ2 威力
    let power4S2 = tekipokeMove4S2 ? tekipokeMove4S2.power : ""; //型2　わざ2 威力

    const powerdisplay1S2 = tekipokeMove1S2 ? tekipokeMove1S2.powerdisplay : ""; //型2　わざ2 威力表示
    const powerdisplay2S2 = tekipokeMove2S2 ? tekipokeMove2S2.powerdisplay : ""; //型2　わざ2 威力表示
    const powerdisplay3S2 = tekipokeMove3S2 ? tekipokeMove3S2.powerdisplay : ""; //型2　わざ2 威力表示
    const powerdisplay4S2 = tekipokeMove4S2 ? tekipokeMove4S2.powerdisplay : ""; //型2　わざ2 威力表示
    const accuracydisplay1S2 = tekipokeMove1S2 ? tekipokeMove1S2.accuracydisplay : ""; //型2　わざ2 命中(徹底攻略）
    const accuracydisplay2S2 = tekipokeMove2S2 ? tekipokeMove2S2.accuracydisplay : ""; //型2　わざ2 命中(徹底攻略）
    const accuracydisplay3S2 = tekipokeMove3S2 ? tekipokeMove3S2.accuracydisplay : ""; //型2　わざ2 命中(徹底攻略）
    const accuracydisplay4S2 = tekipokeMove4S2 ? tekipokeMove4S2.accuracydisplay : ""; //型2　わざ2 命中(徹底攻略）
    const pp1S2 = tekipokeMove1S2 ? tekipokeMove1S2.pp : ""; //型2　わざ2 PP
    const pp2S2 = tekipokeMove2S2 ? tekipokeMove2S2.pp : ""; //型2　わざ2 PP
    const pp3S2 = tekipokeMove3S2 ? tekipokeMove3S2.pp : ""; //型2　わざ2 PP
    const pp4S2 = tekipokeMove4S2 ? tekipokeMove4S2.pp : ""; //型2　わざ2 PP
    const moveClass1S2 = tekipokeMove1S2 ? tekipokeMove1S2.moveClass : ""; //型2　わざ2 分類
    const moveClass2S2 = tekipokeMove2S2 ? tekipokeMove2S2.moveClass : ""; //型2　わざ2 分類
    const moveClass3S2 = tekipokeMove3S2 ? tekipokeMove3S2.moveClass : ""; //型2　わざ2 分類
    const moveClass4S2 = tekipokeMove4S2 ? tekipokeMove4S2.moveClass : ""; //型2　わざ2 分類
    const priority1S2 = tekipokeMove1S2 ? tekipokeMove1S2.priority : ""; //型2　わざ2 優先度
    const priority2S2 = tekipokeMove2S2 ? tekipokeMove2S2.priority : ""; //型2　わざ2 優先度
    const priority3S2 = tekipokeMove3S2 ? tekipokeMove3S2.priority : ""; //型2　わざ2 優先度
    const priority4S2 = tekipokeMove4S2 ? tekipokeMove4S2.priority : ""; //型2　わざ2 優先度
    const contact1S2 = tekipokeMove1S2 ? tekipokeMove1S2.contact : ""; //型2　わざ2 接触
    const contact2S2 = tekipokeMove2S2 ? tekipokeMove2S2.contact : ""; //型2　わざ2 接触
    const contact3S2 = tekipokeMove3S2 ? tekipokeMove3S2.contact : ""; //型2　わざ2 接触
    const contact4S2 = tekipokeMove4S2 ? tekipokeMove4S2.contact : ""; //型2　わざ2 接触
    const king1S2 = tekipokeMove1S2 ? tekipokeMove1S2.king : ""; //型2　わざ2 王者補正
    const king2S2 = tekipokeMove2S2 ? tekipokeMove2S2.king : ""; //型2　わざ2 王者補正
    const king3S2 = tekipokeMove3S2 ? tekipokeMove3S2.king : ""; //型2　わざ2 王者補正
    const king4S2 = tekipokeMove4S2 ? tekipokeMove4S2.king : ""; //型2　わざ2 王者補正
    const no1S2 = tekipokeMove1S2 ? tekipokeMove1S2.no : ""; //型2　わざ2 技ナンバー
    const no2S2 = tekipokeMove2S2 ? tekipokeMove2S2.no : ""; //型2　わざ2 技ナンバー
    const no3S2 = tekipokeMove3S2 ? tekipokeMove3S2.no : ""; //型2　わざ2 技ナンバー
    const no4S2 = tekipokeMove4S2 ? tekipokeMove4S2.no : ""; //型2　わざ2 技ナンバー
    const effect1S2 = tekipokeMove1S2 ? tekipokeMove1S2.effect : ""; //型3　わざ3 技の効果
    const effect2S2 = tekipokeMove2S2 ? tekipokeMove2S2.effect : ""; //型3　わざ3 技の効果
    const effect3S2 = tekipokeMove3S2 ? tekipokeMove3S2.effect : ""; //型3　わざ3 技の効果
    const effect4S2 = tekipokeMove4S2 ? tekipokeMove4S2.effect : ""; //型3　わざ3 技の効果

    //敵のポケモン型3
    const tekipokeMove1S3 = weaponsdata.find((item) => item.no === tekipokeWeapon1NoS3);
    const tekipokeMove2S3 = weaponsdata.find((item) => item.no === tekipokeWeapon2NoS3);
    const tekipokeMove3S3 = weaponsdata.find((item) => item.no === tekipokeWeapon3NoS3);
    const tekipokeMove4S3 = weaponsdata.find((item) => item.no === tekipokeWeapon4NoS3);

    const name1S3 = tekipokeMove1S3 ? tekipokeMove1S3.name : ""; //型3　わざ3 名称
    const name2S3 = tekipokeMove2S3 ? tekipokeMove2S3.name : ""; //型3　わざ3 名称
    const name3S3 = tekipokeMove3S3 ? tekipokeMove3S3.name : ""; //型3　わざ3 名称
    const name4S3 = tekipokeMove4S3 ? tekipokeMove4S3.name : ""; //型3　わざ3 名称

    const wtype1S3 = tekipokeMove1S3 ? tekipokeMove1S3.wtype : ""; //型3　わざ3 タイプ
    const wtype2S3 = tekipokeMove2S3 ? tekipokeMove2S3.wtype : ""; //型3　わざ3 タイプ
    const wtype3S3 = tekipokeMove3S3 ? tekipokeMove3S3.wtype : ""; //型3　わざ3 タイプ
    const wtype4S3 = tekipokeMove4S3 ? tekipokeMove4S3.wtype : ""; //型3　わざ3 タイプ

    let power1S3 = tekipokeMove1S3 ? tekipokeMove1S3.power : ""; //型3　わざ3 威力
    let power2S3 = tekipokeMove2S3 ? tekipokeMove2S3.power : ""; //型3　わざ3 威力
    let power3S3 = tekipokeMove3S3 ? tekipokeMove3S3.power : ""; //型3　わざ3 威力
    let power4S3 = tekipokeMove4S3 ? tekipokeMove4S3.power : ""; //型3　わざ3 威力

    const powerdisplay1S3 = tekipokeMove1S3 ? tekipokeMove1S3.powerdisplay : ""; //型3　わざ3 威力表示
    const powerdisplay2S3 = tekipokeMove2S3 ? tekipokeMove2S3.powerdisplay : ""; //型3　わざ3 威力表示
    const powerdisplay3S3 = tekipokeMove3S3 ? tekipokeMove3S3.powerdisplay : ""; //型3　わざ3 威力表示
    const powerdisplay4S3 = tekipokeMove4S3 ? tekipokeMove4S3.powerdisplay : ""; //型3　わざ3 威力表示

    const accuracydisplay1S3 = tekipokeMove1S3 ? tekipokeMove1S3.accuracydisplay : ""; //型3　わざ3 命中(徹底攻略）
    const accuracydisplay2S3 = tekipokeMove2S3 ? tekipokeMove2S3.accuracydisplay : ""; //型3　わざ3 命中(徹底攻略）
    const accuracydisplay3S3 = tekipokeMove3S3 ? tekipokeMove3S3.accuracydisplay : ""; //型3　わざ3 命中(徹底攻略）
    const accuracydisplay4S3 = tekipokeMove4S3 ? tekipokeMove4S3.accuracydisplay : ""; //型3　わざ3 命中(徹底攻略）
    const pp1S3 = tekipokeMove1S3 ? tekipokeMove1S3.pp : ""; //型3　わざ3 PP
    const pp2S3 = tekipokeMove2S3 ? tekipokeMove2S3.pp : ""; //型3　わざ3 PP
    const pp3S3 = tekipokeMove3S3 ? tekipokeMove3S3.pp : ""; //型3　わざ3 PP
    const pp4S3 = tekipokeMove4S3 ? tekipokeMove4S3.pp : ""; //型3　わざ3 PP
    const moveClass1S3 = tekipokeMove1S3 ? tekipokeMove1S3.moveClass : ""; //型3　わざ3 分類
    const moveClass2S3 = tekipokeMove2S3 ? tekipokeMove2S3.moveClass : ""; //型3　わざ3 分類
    const moveClass3S3 = tekipokeMove3S3 ? tekipokeMove3S3.moveClass : ""; //型3　わざ3 分類
    const moveClass4S3 = tekipokeMove4S3 ? tekipokeMove4S3.moveClass : ""; //型3　わざ3 分類
    const priority1S3 = tekipokeMove1S3 ? tekipokeMove1S3.priority : ""; //型3　わざ3 優先度
    const priority2S3 = tekipokeMove2S3 ? tekipokeMove2S3.priority : ""; //型3　わざ3 優先度
    const priority3S3 = tekipokeMove3S3 ? tekipokeMove3S3.priority : ""; //型3　わざ3 優先度
    const priority4S3 = tekipokeMove4S3 ? tekipokeMove4S3.priority : ""; //型3　わざ3 優先度
    const contact1S3 = tekipokeMove1S3 ? tekipokeMove1S3.contact : ""; //型3　わざ3 接触
    const contact2S3 = tekipokeMove2S3 ? tekipokeMove2S3.contact : ""; //型3　わざ3 接触
    const contact3S3 = tekipokeMove3S3 ? tekipokeMove3S3.contact : ""; //型3　わざ3 接触
    const contact4S3 = tekipokeMove4S3 ? tekipokeMove4S3.contact : ""; //型3　わざ3 接触
    const king1S3 = tekipokeMove1S3 ? tekipokeMove1S3.king : ""; //型3　わざ3 王者補正
    const king2S3 = tekipokeMove2S3 ? tekipokeMove2S3.king : ""; //型3　わざ3 王者補正
    const king3S3 = tekipokeMove3S3 ? tekipokeMove3S3.king : ""; //型3　わざ3 王者補正
    const king4S3 = tekipokeMove4S3 ? tekipokeMove4S3.king : ""; //型3　わざ3 王者補正
    const no1S3 = tekipokeMove1S3 ? tekipokeMove1S3.no : ""; //型3　わざ3 技ナンバー
    const no2S3 = tekipokeMove2S3 ? tekipokeMove2S3.no : ""; //型3　わざ3 技ナンバー
    const no3S3 = tekipokeMove3S3 ? tekipokeMove3S3.no : ""; //型3　わざ3 技ナンバー
    const no4S3 = tekipokeMove4S3 ? tekipokeMove4S3.no : ""; //型3　わざ3 技ナンバー
    const effect1S3 = tekipokeMove1S3 ? tekipokeMove1S3.effect : ""; //型3　わざ3 技の効果
    const effect2S3 = tekipokeMove2S3 ? tekipokeMove2S3.effect : ""; //型3　わざ3 技の効果
    const effect3S3 = tekipokeMove3S3 ? tekipokeMove3S3.effect : ""; //型3　わざ3 技の効果
    const effect4S3 = tekipokeMove4S3 ? tekipokeMove4S3.effect : ""; //型3　わざ3 技の効果

    //敵のポケモン型4

    const tekipokeMove1S4 = weaponsdata.find((item) => item.no === tekipokeWeapon1NoS4);
    const tekipokeMove2S4 = weaponsdata.find((item) => item.no === tekipokeWeapon2NoS4);
    const tekipokeMove3S4 = weaponsdata.find((item) => item.no === tekipokeWeapon3NoS4);
    const tekipokeMove4S4 = weaponsdata.find((item) => item.no === tekipokeWeapon4NoS4);

    //name: "名前",
    const name1S4 = tekipokeMove1S4 ? tekipokeMove1S4.name : ""; //型4　わざ4 名称
    const name2S4 = tekipokeMove2S4 ? tekipokeMove2S4.name : ""; //型4　わざ4 名称
    const name3S4 = tekipokeMove3S4 ? tekipokeMove3S4.name : ""; //型4　わざ4 名称
    const name4S4 = tekipokeMove4S4 ? tekipokeMove4S4.name : ""; //型4　わざ4 名称
    //     wtype: "タイプ"
    const wtype1S4 = tekipokeMove1S4 ? tekipokeMove1S4.wtype : ""; //型4　わざ4 タイプ
    const wtype2S4 = tekipokeMove2S4 ? tekipokeMove2S4.wtype : ""; //型4　わざ4 タイプ
    const wtype3S4 = tekipokeMove3S4 ? tekipokeMove3S4.wtype : ""; //型4　わざ4 タイプ
    const wtype4S4 = tekipokeMove4S4 ? tekipokeMove4S4.wtype : ""; //型4　わざ4 タイプ
    // power:  威力,
    let power1S4 = tekipokeMove1S4 ? tekipokeMove1S4.power : ""; //型4　わざ4 威力
    let power2S4 = tekipokeMove2S4 ? tekipokeMove2S4.power : ""; //型4　わざ4 威力
    let power3S4 = tekipokeMove3S4 ? tekipokeMove3S4.power : ""; //型4　わざ4 威力
    let power4S4 = tekipokeMove4S4 ? tekipokeMove4S4.power : ""; //型4　わざ4 威力

    // powerdisplay:  威力表示,
    const powerdisplay1S4 = tekipokeMove1S4 ? tekipokeMove1S4.powerdisplay : ""; //型4　わざ4 威力表示
    const powerdisplay2S4 = tekipokeMove2S4 ? tekipokeMove2S4.powerdisplay : ""; //型4　わざ4 威力表示
    const powerdisplay3S4 = tekipokeMove3S4 ? tekipokeMove3S4.powerdisplay : ""; //型4　わざ4 威力表示
    const powerdisplay4S4 = tekipokeMove4S4 ? tekipokeMove4S4.powerdisplay : ""; //型4　わざ4 威力表示
    //accuracydisplay: 命中(徹底攻略）
    const accuracydisplay1S4 = tekipokeMove1S4 ? tekipokeMove1S4.accuracydisplay : ""; //型4　わざ4 命中(徹底攻略）
    const accuracydisplay2S4 = tekipokeMove2S4 ? tekipokeMove2S4.accuracydisplay : ""; //型4　わざ4 命中(徹底攻略）
    const accuracydisplay3S4 = tekipokeMove3S4 ? tekipokeMove3S4.accuracydisplay : ""; //型4　わざ4 命中(徹底攻略）
    const accuracydisplay4S4 = tekipokeMove4S4 ? tekipokeMove4S4.accuracydisplay : ""; //型4　わざ4 命中(徹底攻略）

    //PP
    const pp1S4 = tekipokeMove1S4 ? tekipokeMove1S4.pp : ""; //型4　わざ4 PP
    const pp2S4 = tekipokeMove2S4 ? tekipokeMove2S4.pp : ""; //型4　わざ4 PP
    const pp3S4 = tekipokeMove3S4 ? tekipokeMove3S4.pp : ""; //型4　わざ4 PP
    const pp4S4 = tekipokeMove4S4 ? tekipokeMove4S4.pp : ""; //型4　わざ4 PP
    //     moveClass: "分類",
    const moveClass1S4 = tekipokeMove1S4 ? tekipokeMove1S4.moveClass : ""; //型4　わざ4 分類
    const moveClass2S4 = tekipokeMove2S4 ? tekipokeMove2S4.moveClass : ""; //型4　わざ4 分類
    const moveClass3S4 = tekipokeMove3S4 ? tekipokeMove3S4.moveClass : ""; //型4　わざ4 分類
    const moveClass4S4 = tekipokeMove4S4 ? tekipokeMove4S4.moveClass : ""; //型4　わざ4 分類
    //     priority: 優先度
    const priority1S4 = tekipokeMove1S4 ? tekipokeMove1S4.priority : ""; //型4　わざ4 優先度
    const priority2S4 = tekipokeMove2S4 ? tekipokeMove2S4.priority : ""; //型4　わざ4 優先度
    const priority3S4 = tekipokeMove3S4 ? tekipokeMove3S4.priority : ""; //型4　わざ4 優先度
    const priority4S4 = tekipokeMove4S4 ? tekipokeMove4S4.priority : ""; //型4　わざ4 優先度

    //      contact: "接触

    const contact1S4 = tekipokeMove1S4 ? tekipokeMove1S4.contact : ""; //型4　わざ4 接触
    const contact2S4 = tekipokeMove2S4 ? tekipokeMove2S4.contact : ""; //型4　わざ4 接触
    const contact3S4 = tekipokeMove3S4 ? tekipokeMove3S4.contact : ""; //型4　わざ4 接触
    const contact4S4 = tekipokeMove4S4 ? tekipokeMove4S4.contact : ""; //型4　わざ4 接触

    //      king: "王者補正

    const king1S4 = tekipokeMove1S4 ? tekipokeMove1S4.king : ""; //型4　わざ4 王者補正
    const king2S4 = tekipokeMove2S4 ? tekipokeMove2S4.king : ""; //型4　わざ4 王者補正
    const king3S4 = tekipokeMove3S4 ? tekipokeMove3S4.king : ""; //型4　わざ4 王者補正
    const king4S4 = tekipokeMove4S4 ? tekipokeMove4S4.king : ""; //型4　わざ4 王者補正
    //      no: "技ナンバー
    const no1S4 = tekipokeMove1S4 ? tekipokeMove1S4.no : ""; //型4　わざ4 技ナンバー
    const no2S4 = tekipokeMove2S4 ? tekipokeMove2S4.no : ""; //型4　わざ4 技ナンバー
    const no3S4 = tekipokeMove3S4 ? tekipokeMove3S4.no : ""; //型4　わざ4 技ナンバー
    const no4S4 = tekipokeMove4S4 ? tekipokeMove4S4.no : ""; //型4　わざ4 技ナンバー
    //      effect: "技の効果
    const effect1S4 = tekipokeMove1S4 ? tekipokeMove1S4.effect : ""; //型4　わざ4 技の効果
    const effect2S4 = tekipokeMove2S4 ? tekipokeMove2S4.effect : ""; //型4　わざ4 技の効果
    const effect3S4 = tekipokeMove3S4 ? tekipokeMove3S4.effect : ""; //型4　わざ4 技の効果
    const effect4S4 = tekipokeMove4S4 ? tekipokeMove4S4.effect : ""; //型4　わざ4 技の効果

    let mySurosutaDisplay = "";
    let tekiSurosutaDisplay = "";

    // スロースタート
    if (selectedAbility === "スロースタート") {
      mypokeStatusA = Math.floor((mypokeStatusA * 50) / 100);
      mypokeStatusS = Math.floor((mypokeStatusS * 50) / 100);
      mySurosutaDisplay = "[スロスタ]";
    }

    if (selectedTekiAbility === "スロースタート") {
      tekipokeStatusAS1 = Math.floor((tekipokeStatusAS1 * 50) / 100);
      tekipokeStatusAS2 = Math.floor((tekipokeStatusAS2 * 50) / 100);
      tekipokeStatusAS3 = Math.floor((tekipokeStatusAS3 * 50) / 100);
      tekipokeStatusAS4 = Math.floor((tekipokeStatusAS4 * 50) / 100);

      tekipokeStatusSS1 = Math.floor((tekipokeStatusSS1 * 50) / 100);
      tekipokeStatusSS2 = Math.floor((tekipokeStatusSS2 * 50) / 100);
      tekipokeStatusSS3 = Math.floor((tekipokeStatusSS3 * 50) / 100);
      tekipokeStatusSS4 = Math.floor((tekipokeStatusSS4 * 50) / 100);
      tekiSurosutaDisplay = "[スロスタ]";
    }

    let myYogaDisplay = "";
    let tekiYogaDisplay = "";

    // ヨガパワー
    if (selectedAbility === "ヨガパワー") {
      mypokeStatusA = Math.floor((mypokeStatusA * 200) / 100);
      myYogaDisplay = "[ヨガ]";
    }

    if (selectedTekiAbility === "ヨガパワー") {
      tekipokeStatusAS1 = Math.floor((tekipokeStatusAS1 * 200) / 100);
      tekipokeStatusAS2 = Math.floor((tekipokeStatusAS2 * 200) / 100);
      tekipokeStatusAS3 = Math.floor((tekipokeStatusAS3 * 200) / 100);
      tekipokeStatusAS4 = Math.floor((tekipokeStatusAS4 * 200) / 100);
      tekiYogaDisplay = "[ヨガ]";
    }

    let myKodahachiDisplay = "";
    let tekiKodahachiDisplay1 = "";
    let tekiKodahachiDisplay2 = "";
    let tekiKodahachiDisplay3 = "";
    let tekiKodahachiDisplay4 = "";

    // こだわりハチマキ
    if (myItem === "こだわりハチマキ") {
      mypokeStatusA = Math.floor((mypokeStatusA * 150) / 100);
      myKodahachiDisplay = "[こだ]";
    }

    if (tekiItem1 === "こだわりハチマキ") {
      tekipokeStatusAS1 = Math.floor((tekipokeStatusAS1 * 150) / 100);
      tekiKodahachiDisplay1 = "[こだ]";
    }
    if (tekiItem2 === "こだわりハチマキ") {
      tekipokeStatusAS2 = Math.floor((tekipokeStatusAS2 * 150) / 100);
      tekiKodahachiDisplay2 = "[こだ]";
    }
    if (tekiItem3 === "こだわりハチマキ") {
      tekipokeStatusAS3 = Math.floor((tekipokeStatusAS3 * 150) / 100);
      tekiKodahachiDisplay3 = "[こだ]";
    }
    if (tekiItem4 === "こだわりハチマキ") {
      tekipokeStatusAS4 = Math.floor((tekipokeStatusAS4 * 150) / 100);
      tekiKodahachiDisplay4 = "[こだ]";
    }

    let myKodamegaDisplay = "";
    let tekiKodamegaDisplay1 = "";
    let tekiKodamegaDisplay2 = "";
    let tekiKodamegaDisplay3 = "";
    let tekiKodamegaDisplay4 = "";

    // こだわりメガネ
    if (myItem === "こだわりメガネ") {
      mypokeStatusC = Math.floor((mypokeStatusC * 150) / 100);
      myKodamegaDisplay = "[こだ]";
    }

    if (tekiItem1 === "こだわりメガネ") {
      tekipokeStatusCS1 = Math.floor((tekipokeStatusCS1 * 150) / 100);
      tekiKodamegaDisplay1 = "[こだ]";
    }
    if (tekiItem2 === "こだわりメガネ") {
      tekipokeStatusCS2 = Math.floor((tekipokeStatusCS2 * 150) / 100);
      tekiKodamegaDisplay2 = "[こだ]";
    }
    if (tekiItem3 === "こだわりメガネ") {
      tekipokeStatusCS3 = Math.floor((tekipokeStatusCS3 * 150) / 100);
      tekiKodamegaDisplay3 = "[こだ]";
    }
    if (tekiItem4 === "こだわりメガネ") {
      tekipokeStatusCS4 = Math.floor((tekipokeStatusCS4 * 150) / 100);
      tekiKodamegaDisplay4 = "[こだ]";
    }

    let myHoneDisplay = "";
    let tekiHoneDisplay1 = "";
    let tekiHoneDisplay2 = "";
    let tekiHoneDisplay3 = "";
    let tekiHoneDisplay4 = "";
    //  ふといホネ
    if (myItem === "ふといホネ" && mypokeNameVal === 105) {
      mypokeStatusA = Math.floor((mypokeStatusA * 200) / 100);
      myHoneDisplay = "[ホネ]";
    }

    if (tekiItem1 === "ふといホネ" && tekipokeNo === 105) {
      tekipokeStatusAS1 = Math.floor((tekipokeStatusAS1 * 200) / 100);
      tekiHoneDisplay1 = "[ホネ]";
    }
    if (tekiItem2 === "ふといホネ" && tekipokeNo === 105) {
      tekipokeStatusAS2 = Math.floor((tekipokeStatusAS2 * 200) / 100);
      tekiHoneDisplay2 = "[ホネ]";
    }
    if (tekiItem3 === "ふといホネ" && tekipokeNo === 105) {
      tekipokeStatusAS3 = Math.floor((tekipokeStatusAS3 * 200) / 100);
      tekiHoneDisplay3 = "[ホネ]";
    }
    if (tekiItem4 === "ふといホネ" && tekipokeNo === 105) {
      tekipokeStatusAS4 = Math.floor((tekipokeStatusAS4 * 200) / 100);
      tekiHoneDisplay4 = "[ホネ]";
    }
    let myKonjouDisplay = "";
    let tekiKonjouDisplay = "";

    // こんじょう  //はりきり
    if (selectedAbility === "こんじょう" || selectedAbility === "はりきり") {
      mypokeStatusA = Math.floor((mypokeStatusA * 150) / 100);
      myKonjouDisplay = "[根性/張切]";
    }
    if (selectedTekiAbility === "こんじょう" || selectedTekiAbility === "はりきり") {
      tekipokeStatusAS1 = Math.floor((tekipokeStatusAS1 * 150) / 100);
      tekipokeStatusAS2 = Math.floor((tekipokeStatusAS2 * 150) / 100);
      tekipokeStatusAS3 = Math.floor((tekipokeStatusAS3 * 150) / 100);
      tekipokeStatusAS4 = Math.floor((tekipokeStatusAS4 * 150) / 100);
      tekiKonjouDisplay = "[根性/張切]";
    }

    let myShinkaiDisplay = "";
    let tekiShinkaiDisplay1 = "";
    let tekiShinkaiDisplay2 = "";
    let tekiShinkaiDisplay3 = "";
    let tekiShinkaiDisplay4 = "";
    // しんかいのウロコ
    if (myItem === "しんかいのウロコ" && mypokeNameVal === 366) {
      mypokeStatusD = Math.floor((mypokeStatusD * 200) / 100);
      myShinkaiDisplay = "[深海鱗]";
    }

    if (tekiItem1 === "しんかいのウロコ" && tekipokeNo === 366) {
      tekipokeStatusDS1 = Math.floor((tekipokeStatusDS1 * 200) / 100);
      tekiShinkaiDisplay1 = "[深海鱗]";
    }
    if (tekiItem2 === "しんかいのウロコ" && tekipokeNo === 366) {
      tekipokeStatusDS2 = Math.floor((tekipokeStatusDS2 * 200) / 100);
      tekiShinkaiDisplay2 = "[深海鱗]";
    }
    if (tekiItem3 === "しんかいのウロコ" && tekipokeNo === 366) {
      tekipokeStatusDS3 = Math.floor((tekipokeStatusDS3 * 200) / 100);
      tekiShinkaiDisplay3 = "[深海鱗]";
    }
    if (tekiItem4 === "しんかいのウロコ" && tekipokeNo === 366) {
      tekipokeStatusDS4 = Math.floor((tekipokeStatusDS4 * 200) / 100);
      tekiShinkaiDisplay4 = "[深海鱗]";
    }
    let myFusiginaurokoDisplay = "";
    let tekiFusiginaurokoDisplay = "";
    // ふしぎなうろこ
    if (selectedAbility === "ふしぎなうろこ") {
      mypokeStatusB = Math.floor((mypokeStatusB * 150) / 100);
      myFusiginaurokoDisplay = "[不鱗]";
    }
    if (selectedTekiAbility === "ふしぎなうろこ") {
      tekipokeStatusBS1 = Math.floor((tekipokeStatusBS1 * 150) / 100);
      tekipokeStatusBS2 = Math.floor((tekipokeStatusBS2 * 150) / 100);
      tekipokeStatusBS3 = Math.floor((tekipokeStatusBS3 * 150) / 100);
      tekipokeStatusBS4 = Math.floor((tekipokeStatusBS4 * 150) / 100);
      tekiFusiginaurokoDisplay = "[不鱗]";
    }

    let mySunaarashiDisplay = "";
    let tekiSunaarashiDisplay = "";
    // すなあらし
    if (
      (selectedWhether === "すなあらし" && mypokeType1 === "いわ") ||
      (selectedWhether === "すなあらし" && mypokeType2 === "いわ")
    ) {
      mypokeStatusD = Math.floor((mypokeStatusD * 150) / 100);
      mySunaarashiDisplay = "[砂嵐]";
    }
    if (
      (selectedWhether === "すなあらし" && tekipokeType1 === "いわ") ||
      (selectedWhether === "すなあらし" && tekipokeType2 === "いわ")
    ) {
      tekipokeStatusDS1 = Math.floor((tekipokeStatusDS1 * 150) / 100);
      tekipokeStatusDS2 = Math.floor((tekipokeStatusDS2 * 150) / 100);
      tekipokeStatusDS3 = Math.floor((tekipokeStatusDS3 * 150) / 100);
      tekipokeStatusDS4 = Math.floor((tekipokeStatusDS4 * 150) / 100);
      tekiSunaarashiDisplay = "[砂嵐]";
    }

    // ランクに応じて変化する値をオブジェクトにまとめる
    const rankValues = {
      "+6": 8 / 2,
      "+5": 7 / 2,
      "+4": 6 / 2,
      "+3": 5 / 2,
      "+2": 4 / 2,
      "+1": 3 / 2,
      "+0": 2 / 2,
      "-1": 2 / 3,
      "-2": 2 / 4,
      "-3": 2 / 5,
      "-4": 2 / 6,
      "-5": 2 / 7,
      "-6": 2 / 8,
    };

    // ランクの値を取得し、オブジェクトから値を参照する
    function getRankValue(elementId) {
      const rankValue = document.getElementById(elementId).textContent;
      const formattedRankValue = rankValue.includes("+") || rankValue.includes("-") ? rankValue : "+" + rankValue;
      return rankValues[formattedRankValue];
    }

    // 自分ランクに応じた変数を計算する
    const myRankAVariable = getRankValue("myRankA");
    const myRankBVariable = getRankValue("myRankB");
    const myRankCVariable = getRankValue("myRankC");
    const myRankDVariable = getRankValue("myRankD");
    const myRankSVariable = getRankValue("myRankS");

    // 敵のランクに応じた変数を計算する
    const tekiRankAVariable = getRankValue("tekiRankA");
    const tekiRankBVariable = getRankValue("tekiRankB");
    const tekiRankCVariable = getRankValue("tekiRankC");
    const tekiRankDVariable = getRankValue("tekiRankD");
    const tekiRankSVariable = getRankValue("tekiRankS");

    let myRankADisplay;
    let myRankBDisplay;
    let myRankCDisplay;
    let myRankDDisplay;
    let myRankSDisplay;

    let tekiRankADisplay;
    let tekiRankBDisplay;
    let tekiRankCDisplay;
    let tekiRankDDisplay;
    let tekiRankSDisplay;

    switch (myRankAVariable) {
      case 8 / 2:
        myRankADisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        myRankADisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        myRankADisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        myRankADisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        myRankADisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        myRankADisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        myRankADisplay = "";
        break;
      case 2 / 3:
        myRankADisplay = "[ラ－1]";
        break;
      case 2 / 4:
        myRankADisplay = "[ラ－2]";
        break;
      case 2 / 5:
        myRankADisplay = "[ラ－3]";
        break;
      case 2 / 6:
        myRankADisplay = "[ラ－4]";
        break;
      case 2 / 7:
        myRankADisplay = "[ラ－5]";
        break;
      case 2 / 8:
        myRankADisplay = "[ラ－6]";
        break;
      default:
        myRankADisplay = "無効な値";
    }
    switch (myRankBVariable) {
      case 8 / 2:
        myRankBDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        myRankBDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        myRankBDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        myRankBDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        myRankBDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        myRankBDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        myRankBDisplay = "";
        break;
      case 2 / 3:
        myRankBDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        myRankBDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        myRankBDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        myRankBDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        myRankBDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        myRankBDisplay = "[ラ－6]";
        break;
      default:
        myRankBDisplay = "無効な値";
    }
    switch (myRankCVariable) {
      case 8 / 2:
        myRankCDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        myRankCDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        myRankCDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        myRankCDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        myRankCDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        myRankCDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        myRankCDisplay = "";
        break;
      case 2 / 3:
        myRankCDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        myRankCDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        myRankCDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        myRankCDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        myRankCDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        myRankCDisplay = "[ラ－6]";
        break;
      default:
        myRankCDisplay = "無効な値";
    }
    switch (myRankDVariable) {
      case 8 / 2:
        myRankDDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        myRankDDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        myRankDDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        myRankDDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        myRankDDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        myRankDDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        myRankDDisplay = "";
        break;
      case 2 / 3:
        myRankDDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        myRankDDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        myRankDDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        myRankDDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        myRankDDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        myRankDDisplay = "[ラ－6]";
        break;
      default:
        myRankDDisplay = "無効な値";
    }
    switch (myRankSVariable) {
      case 8 / 2:
        myRankSDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        myRankSDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        myRankSDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        myRankSDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        myRankSDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        myRankSDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        myRankSDisplay = "";
        break;
      case 2 / 3:
        myRankSDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        myRankSDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        myRankSDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        myRankSDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        myRankSDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        myRankSDisplay = "[ラ－6]";
        break;
      default:
        myRankSDisplay = "無効な値";
    }

    switch (tekiRankAVariable) {
      case 8 / 2:
        tekiRankADisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        tekiRankADisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        tekiRankADisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        tekiRankADisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        tekiRankADisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        tekiRankADisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        tekiRankADisplay = "";
        break;
      case 2 / 3:
        tekiRankADisplay = "[ラ－1]";
        break;
      case 2 / 4:
        tekiRankADisplay = "[ラ－2]";
        break;
      case 2 / 5:
        tekiRankADisplay = "[ラ－3]";
        break;
      case 2 / 6:
        tekiRankADisplay = "[ラ－4]";
        break;
      case 2 / 7:
        tekiRankADisplay = "[ラ－5]";
        break;
      case 2 / 8:
        tekiRankADisplay = "[ラ－6]";
        break;
      default:
        tekiRankADisplay = "無効な値";
    }
    switch (tekiRankBVariable) {
      case 8 / 2:
        tekiRankBDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        tekiRankBDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        tekiRankBDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        tekiRankBDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        tekiRankBDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        tekiRankBDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        tekiRankBDisplay = "";
        break;
      case 2 / 3:
        tekiRankBDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        tekiRankBDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        tekiRankBDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        tekiRankBDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        tekiRankBDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        tekiRankBDisplay = "[ラ－6]";
        break;
      default:
        tekiRankBDisplay = "無効な値";
    }
    switch (tekiRankCVariable) {
      case 8 / 2:
        tekiRankCDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        tekiRankCDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        tekiRankCDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        tekiRankCDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        tekiRankCDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        tekiRankCDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        tekiRankCDisplay = "";
        break;
      case 2 / 3:
        tekiRankCDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        tekiRankCDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        tekiRankCDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        tekiRankCDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        tekiRankCDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        tekiRankCDisplay = "[ラ－6]";
        break;
      default:
        tekiRankCDisplay = "無効な値";
    }
    switch (tekiRankDVariable) {
      case 8 / 2:
        tekiRankDDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        tekiRankDDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        tekiRankDDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        tekiRankDDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        tekiRankDDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        tekiRankDDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        tekiRankDDisplay = "";
        break;
      case 2 / 3:
        tekiRankDDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        tekiRankDDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        tekiRankDDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        tekiRankDDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        tekiRankDDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        tekiRankDDisplay = "[ラ－6]";
        break;
      default:
        tekiRankDDisplay = "無効な値";
    }
    switch (tekiRankSVariable) {
      case 8 / 2:
        tekiRankSDisplay = "[ラ＋6]";
        break;
      case 7 / 2:
        tekiRankSDisplay = "[ラ＋5]";
        break;
      case 6 / 2:
        tekiRankSDisplay = "[ラ＋4]";
        break;
      case 5 / 2:
        tekiRankSDisplay = "[ラ＋3]";
        break;
      case 4 / 2:
        tekiRankSDisplay = "[ラ＋2]";
        break;
      case 3 / 2:
        tekiRankSDisplay = "[ラ＋1]";
        break;
      case 2 / 2:
        tekiRankSDisplay = "";
        break;
      case 2 / 3:
        tekiRankSDisplay = "[ラ－1]";
        break;
      case 2 / 4:
        tekiRankSDisplay = "[ラ－2]";
        break;
      case 2 / 5:
        tekiRankSDisplay = "[ラ－3]";
        break;
      case 2 / 6:
        tekiRankSDisplay = "[ラ－4]";
        break;
      case 2 / 7:
        tekiRankSDisplay = "[ラ－5]";
        break;
      case 2 / 8:
        tekiRankSDisplay = "[ラ－6]";
        break;
      default:
        tekiRanSADisplay = "無効な値";
    }

    // ランク補正後のステ
    const mypokeStatusARanked = Math.floor(mypokeStatusA * myRankAVariable);
    const mypokeStatusBRanked = Math.floor(mypokeStatusB * myRankBVariable);
    const mypokeStatusCRanked = Math.floor(mypokeStatusC * myRankCVariable);
    const mypokeStatusDRanked = Math.floor(mypokeStatusD * myRankDVariable);
    let mypokeStatusSRanked = Math.floor(mypokeStatusS * myRankSVariable);

    const tekipokeStatusAS1Ranked = Math.floor(tekipokeStatusAS1 * tekiRankAVariable);
    const tekipokeStatusAS2Ranked = Math.floor(tekipokeStatusAS2 * tekiRankAVariable);
    const tekipokeStatusAS3Ranked = Math.floor(tekipokeStatusAS3 * tekiRankAVariable);
    const tekipokeStatusAS4Ranked = Math.floor(tekipokeStatusAS4 * tekiRankAVariable);

    const tekipokeStatusBS1Ranked = Math.floor(tekipokeStatusBS1 * tekiRankBVariable);
    const tekipokeStatusBS2Ranked = Math.floor(tekipokeStatusBS2 * tekiRankBVariable);
    const tekipokeStatusBS3Ranked = Math.floor(tekipokeStatusBS3 * tekiRankBVariable);
    const tekipokeStatusBS4Ranked = Math.floor(tekipokeStatusBS4 * tekiRankBVariable);

    const tekipokeStatusCS1Ranked = Math.floor(tekipokeStatusCS1 * tekiRankCVariable);
    const tekipokeStatusCS2Ranked = Math.floor(tekipokeStatusCS2 * tekiRankCVariable);
    const tekipokeStatusCS3Ranked = Math.floor(tekipokeStatusCS3 * tekiRankCVariable);
    const tekipokeStatusCS4Ranked = Math.floor(tekipokeStatusCS4 * tekiRankCVariable);

    const tekipokeStatusDS1Ranked = Math.floor(tekipokeStatusDS1 * tekiRankDVariable);
    const tekipokeStatusDS2Ranked = Math.floor(tekipokeStatusDS2 * tekiRankDVariable);
    const tekipokeStatusDS3Ranked = Math.floor(tekipokeStatusDS3 * tekiRankDVariable);
    const tekipokeStatusDS4Ranked = Math.floor(tekipokeStatusDS4 * tekiRankDVariable);

    let tekipokeStatusSS1Ranked = Math.floor(tekipokeStatusSS1 * tekiRankSVariable);
    let tekipokeStatusSS2Ranked = Math.floor(tekipokeStatusSS2 * tekiRankSVariable);
    let tekipokeStatusSS3Ranked = Math.floor(tekipokeStatusSS3 * tekiRankSVariable);
    let tekipokeStatusSS4Ranked = Math.floor(tekipokeStatusSS4 * tekiRankSVariable);

    let myKodascarfDisplay = "";
    let tekiKodascarfDisplay1 = "";
    let tekiKodascarfDisplay2 = "";
    let tekiKodascarfDisplay3 = "";
    let tekiKodascarfDisplay4 = "";
    // こだわりスカーフ
    if (myItem === "こだわりスカーフ") {
      mypokeStatusSRanked = Math.floor((mypokeStatusSRanked * 150) / 100);
      myKodascarfDisplay = "[こだ]";
    }

    if (tekiItem1 === "こだわりスカーフ") {
      tekipokeStatusSS1Ranked = Math.floor((tekipokeStatusSS1Ranked * 150) / 100);
      tekiKodascarfDisplay1 = "[こだ]";
    }
    if (tekiItem2 === "こだわりスカーフ") {
      tekipokeStatusSS2Ranked = Math.floor((tekipokeStatusSS2Ranked * 150) / 100);
      tekiKodascarfDisplay2 = "[こだ]";
    }
    if (tekiItem3 === "こだわりスカーフ") {
      tekipokeStatusSS3Ranked = Math.floor((tekipokeStatusSS3Ranked * 150) / 100);
      tekiKodascarfDisplay3 = "[こだ]";
    }
    if (tekiItem4 === "こだわりスカーフ") {
      tekipokeStatusSS4Ranked = Math.floor((tekipokeStatusSS4Ranked * 150) / 100);
      tekiKodascarfDisplay4 = "[こだ]";
    }

    let myTekkyuDisplay = "";
    let tekiTekkyuDisplay1 = "";
    let tekiTekkyuDisplay2 = "";
    let tekiTekkyuDisplay3 = "";
    let tekiTekkyuDisplay4 = "";
    // くろいてっきゅう
    if (myItem === "くろいてっきゅう") {
      mypokeStatusSRanked = Math.floor((mypokeStatusSRanked * 50) / 100);
      myTekkyuDisplay = "[鉄球]";
    }

    if (tekiItem1 === "くろいてっきゅう") {
      tekipokeStatusSS1Ranked = Math.floor((tekipokeStatusSS1Ranked * 50) / 100);
      tekiTekkyuDisplay1 = "[鉄球]";
    }
    if (tekiItem2 === "くろいてっきゅう") {
      tekipokeStatusSS2Ranked = Math.floor((tekipokeStatusSS2Ranked * 50) / 100);
      tekiTekkyuDisplay2 = "[鉄球]";
    }
    if (tekiItem3 === "くろいてっきゅう") {
      tekipokeStatusSS3Ranked = Math.floor((tekipokeStatusSS3Ranked * 50) / 100);
      tekiTekkyuDisplay3 = "[鉄球]";
    }
    if (tekiItem4 === "くろいてっきゅう") {
      tekipokeStatusSS4Ranked = Math.floor((tekipokeStatusSS4Ranked * 50) / 100);
      tekiTekkyuDisplay4 = "[鉄球]";
    }

    //まひ
    if (myParalysis) {
      mypokeStatusSRanked = Math.floor((mypokeStatusSRanked * 25) / 100);
    }

    if (tekiParalysis) {
      tekipokeStatusSS1Ranked = Math.floor((tekipokeStatusSS1Ranked * 25) / 100);
      tekipokeStatusSS2Ranked = Math.floor((tekipokeStatusSS2Ranked * 25) / 100);
      tekipokeStatusSS3Ranked = Math.floor((tekipokeStatusSS3Ranked * 25) / 100);
      tekipokeStatusSS4Ranked = Math.floor((tekipokeStatusSS4Ranked * 25) / 100);
    }

    // 自分のポケ急所当ててランクマイナス無効
    const mypokeStatusARankedCritical = Math.floor(mypokeStatusA * (myRankAVariable > 1 ? myRankAVariable : 1));
    const mypokeStatusCRankedCritical = Math.floor(mypokeStatusC * (myRankCVariable > 1 ? myRankCVariable : 1));
    // 自分のポケ急所くらってランクプラス無効
    const mypokeStatusBRankedCritical = Math.floor(mypokeStatusB * (myRankBVariable > 1 ? 1 : myRankBVariable));
    const mypokeStatusDRankedCritical = Math.floor(mypokeStatusD * (myRankDVariable > 1 ? 1 : myRankDVariable));

    //敵のポケ急所当ててAランクマイナス無効
    const tekipokeStatusAS1RankedCritical = Math.floor(
      tekipokeStatusAS1 * (tekiRankAVariable > 1 ? tekiRankAVariable : 1)
    );
    const tekipokeStatusAS2RankedCritical = Math.floor(
      tekipokeStatusAS2 * (tekiRankAVariable > 1 ? tekiRankAVariable : 1)
    );
    const tekipokeStatusAS3RankedCritical = Math.floor(
      tekipokeStatusAS3 * (tekiRankAVariable > 1 ? tekiRankAVariable : 1)
    );
    const tekipokeStatusAS4RankedCritical = Math.floor(
      tekipokeStatusAS4 * (tekiRankAVariable > 1 ? tekiRankAVariable : 1)
    );
    //敵のポケ急所くらってBランクプラス無効
    const tekipokeStatusBS1RankedCritical = Math.floor(
      tekipokeStatusBS1 * (tekiRankBVariable > 1 ? 1 : tekiRankBVariable)
    );
    const tekipokeStatusBS2RankedCritical = Math.floor(
      tekipokeStatusBS2 * (tekiRankBVariable > 1 ? 1 : tekiRankBVariable)
    );
    const tekipokeStatusBS3RankedCritical = Math.floor(
      tekipokeStatusBS3 * (tekiRankBVariable > 1 ? 1 : tekiRankBVariable)
    );
    const tekipokeStatusBS4RankedCritical = Math.floor(
      tekipokeStatusBS4 * (tekiRankBVariable > 1 ? 1 : tekiRankBVariable)
    );

    //敵のポケ急所当ててCランクマイナス無効
    const tekipokeStatusCS1RankedCritical = Math.floor(
      tekipokeStatusCS1 * (tekiRankCVariable > 1 ? tekiRankCVariable : 1)
    );
    const tekipokeStatusCS2RankedCritical = Math.floor(
      tekipokeStatusCS2 * (tekiRankCVariable > 1 ? tekiRankCVariable : 1)
    );
    const tekipokeStatusCS3RankedCritical = Math.floor(
      tekipokeStatusCS3 * (tekiRankCVariable > 1 ? tekiRankCVariable : 1)
    );
    const tekipokeStatusCS4RankedCritical = Math.floor(
      tekipokeStatusCS4 * (tekiRankCVariable > 1 ? tekiRankCVariable : 1)
    );

    //敵のポケ急所くらってDランクプラス無効
    const tekipokeStatusDS1RankedCritical = Math.floor(
      tekipokeStatusDS1 * (tekiRankDVariable > 1 ? 1 : tekiRankDVariable)
    );
    const tekipokeStatusDS2RankedCritical = Math.floor(
      tekipokeStatusDS2 * (tekiRankDVariable > 1 ? 1 : tekiRankDVariable)
    );
    const tekipokeStatusDS3RankedCritical = Math.floor(
      tekipokeStatusDS3 * (tekiRankDVariable > 1 ? 1 : tekiRankDVariable)
    );
    const tekipokeStatusDS4RankedCritical = Math.floor(
      tekipokeStatusDS4 * (tekiRankDVariable > 1 ? 1 : tekiRankDVariable)
    );

    // かっこ内の計算ごとに小数点は切り捨てる。計算の結果0になった場合は1にする。

    // ダメージ =
    // (((  [○レベル×○2/○5+○2]  )×○威力×○AorC/○BorD)/○50×Ma+○2)
    //=[calc1]

    // ×Ma=やけど補正×壁補正×範囲補正×天気補正×もらいび補正
    // +2
    // ×Mb=急所補正×いのちのたま補正×メトロノーム補正×さきどり補正
    // ×乱数補正
    // ×タイプ一致補正
    // ×相性補正
    // ×McMc=Mfilter（ハードロック、フィルター）×たつじんのおび補正×いろめがね補正×半減の実補正

    //(○レベル×○2/○5+○2)
    const calc1 = Math.floor((lvVal * 2) / 5 + 2);

    let kisoS1Power1 = power1; //自分ポケ技1が敵型1への威力
    let kisoS1Power2 = power2; //自分ポケ技2が敵型1への威力
    let kisoS1Power3 = power3; //自分ポケ技3が敵型1への威力
    let kisoS1Power4 = power4; //自分ポケ技4が敵型1への威力

    //※ほとんどのケースはkisoS1Power1と同じだが相手依存で威力が変わる`握り潰す`などは変動する
    let kisoS2Power1 = power1; //自分ポケ技1が敵型2への威力
    let kisoS2Power2 = power2; //自分ポケ技2が敵型2への威力
    let kisoS2Power3 = power3; //自分ポケ技3が敵型2への威力
    let kisoS2Power4 = power4; //自分ポケ技4が敵型2への威力

    let kisoS3Power1 = power1; //自分ポケ技1が敵型3への威力
    let kisoS3Power2 = power2; //自分ポケ技2が敵型3への威力
    let kisoS3Power3 = power3; //自分ポケ技3が敵型3への威力
    let kisoS3Power4 = power4; //自分ポケ技4が敵型3への威力

    let kisoS4Power1 = power1; //自分ポケ技1が敵型4への威力
    let kisoS4Power2 = power2; //自分ポケ技2が敵型4への威力
    let kisoS4Power3 = power3; //自分ポケ技3が敵型4への威力
    let kisoS4Power4 = power4; //自分ポケ技4が敵型4への威力

    let kisoPower1S1 = power1S1; //敵1ポケ技1威力
    let kisoPower2S1 = power2S1; //敵1ポケ技2威力
    let kisoPower3S1 = power3S1; //敵1ポケ技3威力
    let kisoPower4S1 = power4S1; //敵1ポケ技4威力
    let kisoPower1S2 = power1S2; //敵2ポケ技1威力
    let kisoPower2S2 = power2S2; //敵2ポケ技2威力
    let kisoPower3S2 = power3S2; //敵2ポケ技3威力
    let kisoPower4S2 = power4S2; //敵2ポケ技4威力
    let kisoPower1S3 = power1S3; //敵3ポケ技1威力
    let kisoPower2S3 = power2S3; //敵3ポケ技2威力
    let kisoPower3S3 = power3S3; //敵3ポケ技3威力
    let kisoPower4S3 = power4S3; //敵3ポケ技4威力
    let kisoPower1S4 = power1S4; //敵4ポケ技1威力
    let kisoPower2S4 = power2S4; //敵4ポケ技2威力
    let kisoPower3S4 = power3S4; //敵4ポケ技3威力
    let kisoPower4S4 = power4S4; //敵4ポケ技4威力

    //!×基礎威力
    //! 基礎威力が変わるわざ
    const zanHP = Number(document.getElementById("zanHP").value);
    //!きしかいせい/じたばた
    let myKishijita;
    let teki1Kishijita;
    let teki2Kishijita;
    let teki3Kishijita;
    let teki4Kishijita;

    //自分きしかいせい/じたばた威力の計算
    if (zanHP / mypokeStatusH < 2 / 64) {
      myKishijita = 200;
    } else if (zanHP / mypokeStatusH >= 2 / 64 && zanHP / mypokeStatusH < 6 / 64) {
      myKishijita = 150;
    } else if (zanHP / mypokeStatusH >= 6 / 64 && zanHP / mypokeStatusH < 13 / 64) {
      myKishijita = 100;
    } else if (zanHP / mypokeStatusH >= 13 / 64 && zanHP / mypokeStatusH < 22 / 64) {
      myKishijita = 80;
    } else if (zanHP / mypokeStatusH >= 22 / 64 && zanHP / mypokeStatusH < 43 / 64) {
      myKishijita = 40;
    } else {
      myKishijita = 20;
    }

    if (name1 === "きしかいせい" || name1 === "じたばた") {
      kisoS1Power1 = myKishijita;
      kisoS2Power1 = myKishijita;
      kisoS3Power1 = myKishijita;
      kisoS4Power1 = myKishijita;
    }

    if (name2 === "きしかいせい" || name2 === "じたばた") {
      kisoS1Power2 = myKishijita;
      kisoS2Power2 = myKishijita;
      kisoS3Power2 = myKishijita;
      kisoS4Power2 = myKishijita;
    }

    if (name3 === "きしかいせい" || name3 === "じたばた") {
      kisoS1Power3 = myKishijita;
      kisoS2Power3 = myKishijita;
      kisoS3Power3 = myKishijita;
      kisoS4Power3 = myKishijita;
    }

    if (name4 === "きしかいせい" || name4 === "じたばた") {
      kisoS1Power4 = myKishijita;
      kisoS2Power4 = myKishijita;
      kisoS3Power4 = myKishijita;
      kisoS4Power4 = myKishijita;
    }

    //敵型1 きしかいせい/じたばた威力の計算
    if (zanHP / tekipokeStatusHS1 < 2 / 64) {
      teki1Kishijita = 200;
    } else if (zanHP / tekipokeStatusHS1 >= 2 / 64 && zanHP / tekipokeStatusHS1 < 6 / 64) {
      teki1Kishijita = 150;
    } else if (zanHP / tekipokeStatusHS1 >= 6 / 64 && zanHP / tekipokeStatusHS1 < 13 / 64) {
      teki1Kishijita = 100;
    } else if (zanHP / tekipokeStatusHS1 >= 13 / 64 && zanHP / tekipokeStatusHS1 < 22 / 64) {
      teki1Kishijita = 80;
    } else if (zanHP / tekipokeStatusHS1 >= 22 / 64 && zanHP / tekipokeStatusHS1 < 43 / 64) {
      teki1Kishijita = 40;
    } else {
      teki1Kishijita = 20;
    }

    if (name1S1 === "きしかいせい" || name1S1 === "じたばた") {
      kisoPower1S1 = teki1Kishijita;
    }

    if (name2S1 === "きしかいせい" || name2S1 === "じたばた") {
      kisoPower2S1 = teki1Kishijita;
    }

    if (name3S1 === "きしかいせい" || name3S1 === "じたばた") {
      kisoPower3S1 = teki1Kishijita;
    }

    if (name4S1 === "きしかいせい" || name4S1 === "じたばた") {
      kisoPower4S1 = teki1Kishijita;
    }

    //敵型2 きしかいせい/じたばた威力の計算
    if (zanHP / tekipokeStatusHS2 < 2 / 64) {
      teki2Kishijita = 200;
    } else if (zanHP / tekipokeStatusHS2 >= 2 / 64 && zanHP / tekipokeStatusHS2 < 6 / 64) {
      teki2Kishijita = 150;
    } else if (zanHP / tekipokeStatusHS2 >= 6 / 64 && zanHP / tekipokeStatusHS2 < 13 / 64) {
      teki2Kishijita = 100;
    } else if (zanHP / tekipokeStatusHS2 >= 13 / 64 && zanHP / tekipokeStatusHS2 < 22 / 64) {
      teki2Kishijita = 80;
    } else if (zanHP / tekipokeStatusHS2 >= 22 / 64 && zanHP / tekipokeStatusHS2 < 43 / 64) {
      teki2Kishijita = 40;
    } else {
      teki2Kishijita = 20;
    }

    if (name1S2 === "きしかいせい" || name1S2 === "じたばた") {
      kisoPower1S2 = teki2Kishijita;
    }

    if (name2S2 === "きしかいせい" || name2S2 === "じたばた") {
      kisoPower2S2 = teki2Kishijita;
    }

    if (name3S2 === "きしかいせい" || name3S2 === "じたばた") {
      kisoPower3S2 = teki2Kishijita;
    }

    if (name4S2 === "きしかいせい" || name4S2 === "じたばた") {
      kisoPower4S2 = teki2Kishijita;
    }

    //敵型3 きしかいせい/じたばた威力の計算
    if (zanHP / tekipokeStatusHS3 < 2 / 64) {
      teki3Kishijita = 200;
    } else if (zanHP / tekipokeStatusHS3 >= 2 / 64 && zanHP / tekipokeStatusHS3 < 6 / 64) {
      teki3Kishijita = 150;
    } else if (zanHP / tekipokeStatusHS3 >= 6 / 64 && zanHP / tekipokeStatusHS3 < 13 / 64) {
      teki3Kishijita = 100;
    } else if (zanHP / tekipokeStatusHS3 >= 13 / 64 && zanHP / tekipokeStatusHS3 < 22 / 64) {
      teki3Kishijita = 80;
    } else if (zanHP / tekipokeStatusHS3 >= 22 / 64 && zanHP / tekipokeStatusHS3 < 43 / 64) {
      teki3Kishijita = 40;
    } else {
      teki3Kishijita = 20;
    }

    if (name1S3 === "きしかいせい" || name1S3 === "じたばた") {
      kisoPower1S3 = teki3Kishijita;
    }

    if (name2S3 === "きしかいせい" || name2S3 === "じたばた") {
      kisoPower2S3 = teki3Kishijita;
    }

    if (name3S3 === "きしかいせい" || name3S3 === "じたばた") {
      kisoPower3S3 = teki3Kishijita;
    }

    if (name4S3 === "きしかいせい" || name4S3 === "じたばた") {
      kisoPower4S3 = teki3Kishijita;
    }

    //敵型4 きしかいせい/じたばた威力の計算
    if (zanHP / tekipokeStatusHS4 < 2 / 64) {
      teki4Kishijita = 200;
    } else if (zanHP / tekipokeStatusHS4 >= 2 / 64 && zanHP / tekipokeStatusHS4 < 6 / 64) {
      teki4Kishijita = 150;
    } else if (zanHP / tekipokeStatusHS4 >= 6 / 64 && zanHP / tekipokeStatusHS4 < 13 / 64) {
      teki4Kishijita = 100;
    } else if (zanHP / tekipokeStatusHS4 >= 13 / 64 && zanHP / tekipokeStatusHS4 < 22 / 64) {
      teki4Kishijita = 80;
    } else if (zanHP / tekipokeStatusHS4 >= 22 / 64 && zanHP / tekipokeStatusHS4 < 43 / 64) {
      teki4Kishijita = 40;
    } else {
      teki4Kishijita = 20;
    }

    if (name1S4 === "きしかいせい" || name1S4 === "じたばた") {
      kisoPower1S4 = teki4Kishijita;
    }

    if (name2S4 === "きしかいせい" || name2S4 === "じたばた") {
      kisoPower2S4 = teki4Kishijita;
    }

    if (name3S4 === "きしかいせい" || name3S4 === "じたばた") {
      kisoPower3S4 = teki4Kishijita;
    }

    if (name4S4 === "きしかいせい" || name4S4 === "じたばた") {
      kisoPower4S4 = teki4Kishijita;
    }

    //!しぼりとる/にぎりつぶす
    // 威力=1+120×相手の残りHP÷相手の最大HP (小数点以下切捨て)。威力1～121。
    let myShibonigiS1 = 1 + Math.floor((120 * zanHP) / tekipokeStatusHS1); //自分が敵1へ当てる威力
    let myShibonigiS2 = 1 + Math.floor((120 * zanHP) / tekipokeStatusHS2); //自分が敵2へ当てる威力
    let myShibonigiS3 = 1 + Math.floor((120 * zanHP) / tekipokeStatusHS3); //自分が敵3へ当てる威力
    let myShibonigiS4 = 1 + Math.floor((120 * zanHP) / tekipokeStatusHS4); //自分が敵4へ当てる威力
    let tekiShibonigi = 1 + Math.floor((120 * zanHP) / mypokeStatusH); //自分被ダメ

    if (name1 === "しぼりとる" || name1 === "にぎりつぶす") {
      kisoS1Power1 = myShibonigiS1;
      kisoS2Power1 = myShibonigiS2;
      kisoS3Power1 = myShibonigiS3;
      kisoS4Power1 = myShibonigiS4;
    }

    if (name2 === "しぼりとる" || name2 === "にぎりつぶす") {
      kisoS1Power2 = myShibonigiS1;
      kisoS2Power2 = myShibonigiS2;
      kisoS3Power2 = myShibonigiS3;
      kisoS4Power2 = myShibonigiS4;
    }

    if (name3 === "しぼりとる" || name3 === "にぎりつぶす") {
      kisoS1Power3 = myShibonigiS1;
      kisoS2Power3 = myShibonigiS2;
      kisoS3Power3 = myShibonigiS3;
      kisoS4Power3 = myShibonigiS4;
    }

    if (name4 === "しぼりとる" || name4 === "にぎりつぶす") {
      kisoS1Power4 = myShibonigiS1;
      kisoS2Power4 = myShibonigiS2;
      kisoS3Power4 = myShibonigiS3;
      kisoS4Power4 = myShibonigiS4;
    }

    if (name1S1 === "しぼりとる" || name1S1 === "にぎりつぶす") {
      kisoPower1S1 = tekiShibonigi;
    }

    if (name2S1 === "しぼりとる" || name2S1 === "にぎりつぶす") {
      kisoPower2S1 = tekiShibonigi;
    }

    if (name3S1 === "しぼりとる" || name3S1 === "にぎりつぶす") {
      kisoPower3S1 = tekiShibonigi;
    }

    if (name4S1 === "しぼりとる" || name4S1 === "にぎりつぶす") {
      kisoPower4S1 = tekiShibonigi;
    }

    if (name1S2 === "しぼりとる" || name1S2 === "にぎりつぶす") {
      kisoPower1S2 = tekiShibonigi;
    }

    if (name2S2 === "しぼりとる" || name2S2 === "にぎりつぶす") {
      kisoPower2S2 = tekiShibonigi;
    }

    if (name3S2 === "しぼりとる" || name3S2 === "にぎりつぶす") {
      kisoPower3S2 = tekiShibonigi;
    }

    if (name4S2 === "しぼりとる" || name4S2 === "にぎりつぶす") {
      kisoPower4S2 = tekiShibonigi;
    }

    if (name1S3 === "しぼりとる" || name1S3 === "にぎりつぶす") {
      kisoPower1S3 = tekiShibonigi;
    }

    if (name2S3 === "しぼりとる" || name2S3 === "にぎりつぶす") {
      kisoPower2S3 = tekiShibonigi;
    }

    if (name3S3 === "しぼりとる" || name3S3 === "にぎりつぶす") {
      kisoPower3S3 = tekiShibonigi;
    }

    if (name4S3 === "しぼりとる" || name4S3 === "にぎりつぶす") {
      kisoPower4S3 = tekiShibonigi;
    }

    if (name1S4 === "しぼりとる" || name1S4 === "にぎりつぶす") {
      kisoPower1S4 = tekiShibonigi;
    }

    if (name2S4 === "しぼりとる" || name2S4 === "にぎりつぶす") {
      kisoPower2S4 = tekiShibonigi;
    }

    if (name3S4 === "しぼりとる" || name3S4 === "にぎりつぶす") {
      kisoPower3S4 = tekiShibonigi;
    }

    if (name4S4 === "しぼりとる" || name4S4 === "にぎりつぶす") {
      kisoPower4S4 = tekiShibonigi;
    }

    //// おしおき
    //!ジャイロボール
    // 威力=(25×相手の素早さ÷自分の素早さ)+1ただし、最大威力150。最後に切り捨て
    // mypokeStatusSRanked//ランク補正後自分S
    // tekipokeStatusSS1Ranked //ランク補正後敵型1S
    // tekipokeStatusSS2Ranked //ランク補正後敵型2S
    // tekipokeStatusSS3Ranked //ランク補正後敵型3S
    // tekipokeStatusSS4Ranked //ランク補正後敵型4S
    let my_teki1Gyro = Math.min(Math.floor((25 * tekipokeStatusSS1Ranked) / mypokeStatusSRanked + 1), 150); //自分が敵型1に撃つ威力
    let my_teki2Gyro = Math.min(Math.floor((25 * tekipokeStatusSS2Ranked) / mypokeStatusSRanked + 1), 150); //自分が敵型2に撃つ威力
    let my_teki3Gyro = Math.min(Math.floor((25 * tekipokeStatusSS3Ranked) / mypokeStatusSRanked + 1), 150); //自分が敵型3に撃つ威力
    let my_teki4Gyro = Math.min(Math.floor((25 * tekipokeStatusSS4Ranked) / mypokeStatusSRanked + 1), 150); //自分が敵型4に撃つ威力
    let teki1_myGyro = Math.min(Math.floor((25 * mypokeStatusSRanked) / tekipokeStatusSS1Ranked + 1), 150); //敵型1が自分に撃つ威力
    let teki2_myGyro = Math.min(Math.floor((25 * mypokeStatusSRanked) / tekipokeStatusSS2Ranked + 1), 150); //敵型2が自分に撃つ威力
    let teki3_myGyro = Math.min(Math.floor((25 * mypokeStatusSRanked) / tekipokeStatusSS3Ranked + 1), 150); //敵型3が自分に撃つ威力
    let teki4_myGyro = Math.min(Math.floor((25 * mypokeStatusSRanked) / tekipokeStatusSS4Ranked + 1), 150); //敵型4が自分に撃つ威力

    if (name1 === "ジャイロボール") {
      kisoS1Power1 = my_teki1Gyro;
      kisoS2Power1 = my_teki2Gyro;
      kisoS3Power1 = my_teki3Gyro;
      kisoS4Power1 = my_teki4Gyro;
    }

    if (name2 === "ジャイロボール") {
      kisoS1Power2 = my_teki1Gyro;
      kisoS2Power2 = my_teki2Gyro;
      kisoS3Power2 = my_teki3Gyro;
      kisoS4Power2 = my_teki4Gyro;
    }

    if (name3 === "ジャイロボール") {
      kisoS1Power3 = my_teki1Gyro;
      kisoS2Power3 = my_teki2Gyro;
      kisoS3Power3 = my_teki3Gyro;
      kisoS4Power3 = my_teki4Gyro;
    }

    if (name4 === "ジャイロボール") {
      kisoS1Power4 = my_teki1Gyro;
      kisoS2Power4 = my_teki2Gyro;
      kisoS3Power4 = my_teki3Gyro;
      kisoS4Power4 = my_teki4Gyro;
    }

    if (name1S1 === "ジャイロボール") {
      kisoPower1S1 = teki1_myGyro;
    }

    if (name2S1 === "ジャイロボール") {
      kisoPower2S1 = teki1_myGyro;
    }

    if (name3S1 === "ジャイロボール") {
      kisoPower3S1 = teki1_myGyro;
    }

    if (name4S1 === "ジャイロボール") {
      kisoPower4S1 = teki1_myGyro;
    }

    if (name1S2 === "ジャイロボール") {
      kisoPower1S2 = teki2_myGyro;
    }

    if (name2S2 === "ジャイロボール") {
      kisoPower2S2 = teki2_myGyro;
    }

    if (name3S2 === "ジャイロボール") {
      kisoPower3S2 = teki2_myGyro;
    }

    if (name4S2 === "ジャイロボール") {
      kisoPower4S2 = teki2_myGyro;
    }

    if (name1S3 === "ジャイロボール") {
      kisoPower1S3 = teki3_myGyro;
    }

    if (name2S3 === "ジャイロボール") {
      kisoPower2S3 = teki3_myGyro;
    }

    if (name3S3 === "ジャイロボール") {
      kisoPower3S3 = teki3_myGyro;
    }

    if (name4S3 === "ジャイロボール") {
      kisoPower4S3 = teki3_myGyro;
    }

    if (name1S4 === "ジャイロボール") {
      kisoPower1S4 = teki4_myGyro;
    }

    if (name2S4 === "ジャイロボール") {
      kisoPower2S4 = teki4_myGyro;
    }

    if (name3S4 === "ジャイロボール") {
      kisoPower3S4 = teki4_myGyro;
    }

    if (name4S4 === "ジャイロボール") {
      kisoPower4S4 = teki4_myGyro;
    }

    // //きりふだ
    //!くさむすび/けたぐり
    const my_tekiKusaketa = tekipokeKusamusubiDamage; //自分が敵に撃つ威力
    const teki_myKusaketa = mypokeKusamusubiDamage; //敵が自分に撃つ威力

    if (name1 === "くさむすび" || name1 === "けたぐり") {
      kisoS1Power1 = my_tekiKusaketa;
      kisoS2Power1 = my_tekiKusaketa;
      kisoS3Power1 = my_tekiKusaketa;
      kisoS4Power1 = my_tekiKusaketa;
    }

    if (name2 === "くさむすび" || name2 === "けたぐり") {
      kisoS1Power2 = my_tekiKusaketa;
      kisoS2Power2 = my_tekiKusaketa;
      kisoS3Power2 = my_tekiKusaketa;
      kisoS4Power2 = my_tekiKusaketa;
    }

    if (name3 === "くさむすび" || name3 === "けたぐり") {
      kisoS1Power3 = my_tekiKusaketa;
      kisoS2Power3 = my_tekiKusaketa;
      kisoS3Power3 = my_tekiKusaketa;
      kisoS4Power3 = my_tekiKusaketa;
    }

    if (name4 === "くさむすび" || name4 === "けたぐり") {
      kisoS1Power4 = my_tekiKusaketa;
      kisoS2Power4 = my_tekiKusaketa;
      kisoS3Power4 = my_tekiKusaketa;
      kisoS4Power4 = my_tekiKusaketa;
    }

    if (name1S1 === "くさむすび" || name1S1 === "けたぐり") {
      kisoPower1S1 = teki_myKusaketa;
    }

    if (name2S1 === "くさむすび" || name2S1 === "けたぐり") {
      kisoPower2S1 = teki_myKusaketa;
    }

    if (name3S1 === "くさむすび" || name3S1 === "けたぐり") {
      kisoPower3S1 = teki_myKusaketa;
    }

    if (name4S1 === "くさむすび" || name4S1 === "けたぐり") {
      kisoPower4S1 = teki_myKusaketa;
    }

    if (name1S2 === "くさむすび" || name1S2 === "けたぐり") {
      kisoPower1S2 = teki_myKusaketa;
    }

    if (name2S2 === "くさむすび" || name2S2 === "けたぐり") {
      kisoPower2S2 = teki_myKusaketa;
    }

    if (name3S2 === "くさむすび" || name3S2 === "けたぐり") {
      kisoPower3S2 = teki_myKusaketa;
    }

    if (name4S2 === "くさむすび" || name4S2 === "けたぐり") {
      kisoPower4S2 = teki_myKusaketa;
    }

    if (name1S3 === "くさむすび" || name1S3 === "けたぐり") {
      kisoPower1S3 = teki_myKusaketa;
    }

    if (name2S3 === "くさむすび" || name2S3 === "けたぐり") {
      kisoPower2S3 = teki_myKusaketa;
    }

    if (name3S3 === "くさむすび" || name3S3 === "けたぐり") {
      kisoPower3S3 = teki_myKusaketa;
    }

    if (name4S3 === "くさむすび" || name4S3 === "けたぐり") {
      kisoPower4S3 = teki_myKusaketa;
    }

    if (name1S4 === "くさむすび" || name1S4 === "けたぐり") {
      kisoPower1S4 = teki_myKusaketa;
    }

    if (name2S4 === "くさむすび" || name2S4 === "けたぐり") {
      kisoPower2S4 = teki_myKusaketa;
    }

    if (name3S4 === "くさむすび" || name3S4 === "けたぐり") {
      kisoPower3S4 = teki_myKusaketa;
    }

    if (name4S4 === "くさむすび" || name4S4 === "けたぐり") {
      kisoPower4S4 = teki_myKusaketa;
    }

    //!きつけ/めざましビンタ
    if (name1 === "きつけ" || name1 === "めざましビンタ") {
      kisoS1Power1 = 120;
      kisoS2Power1 = 120;
      kisoS3Power1 = 120;
      kisoS4Power1 = 120;
    }

    if (name2 === "きつけ" || name2 === "めざましビンタ") {
      kisoS1Power2 = 120;
      kisoS2Power2 = 120;
      kisoS3Power2 = 120;
      kisoS4Power2 = 120;
    }

    if (name3 === "きつけ" || name3 === "めざましビンタ") {
      kisoS1Power3 = 120;
      kisoS2Power3 = 120;
      kisoS3Power3 = 120;
      kisoS4Power3 = 120;
    }

    if (name4 === "きつけ" || name4 === "めざましビンタ") {
      kisoS1Power4 = 120;
      kisoS2Power4 = 120;
      kisoS3Power4 = 120;
      kisoS4Power4 = 120;
    }

    if (name1S1 === "きつけ" || name1S1 === "めざましビンタ") {
      kisoPower1S1 = 120;
    }

    if (name2S1 === "きつけ" || name2S1 === "めざましビンタ") {
      kisoPower2S1 = 120;
    }

    if (name3S1 === "きつけ" || name3S1 === "めざましビンタ") {
      kisoPower3S1 = 120;
    }

    if (name4S1 === "きつけ" || name4S1 === "めざましビンタ") {
      kisoPower4S1 = 120;
    }

    if (name1S2 === "きつけ" || name1S2 === "めざましビンタ") {
      kisoPower1S2 = 120;
    }

    if (name2S2 === "きつけ" || name2S2 === "めざましビンタ") {
      kisoPower2S2 = 120;
    }

    if (name3S2 === "きつけ" || name3S2 === "めざましビンタ") {
      kisoPower3S2 = 120;
    }

    if (name4S2 === "きつけ" || name4S2 === "めざましビンタ") {
      kisoPower4S2 = 120;
    }

    if (name1S3 === "きつけ" || name1S3 === "めざましビンタ") {
      kisoPower1S3 = 120;
    }

    if (name2S3 === "きつけ" || name2S3 === "めざましビンタ") {
      kisoPower2S3 = 120;
    }

    if (name3S3 === "きつけ" || name3S3 === "めざましビンタ") {
      kisoPower3S3 = 120;
    }

    if (name4S3 === "きつけ" || name4S3 === "めざましビンタ") {
      kisoPower4S3 = 120;
    }

    if (name1S4 === "きつけ" || name1S4 === "めざましビンタ") {
      kisoPower1S4 = 120;
    }

    if (name2S4 === "きつけ" || name2S4 === "めざましビンタ") {
      kisoPower2S4 = 120;
    }

    if (name3S4 === "きつけ" || name3S4 === "めざましビンタ") {
      kisoPower3S4 = 120;
    }

    if (name4S4 === "きつけ" || name4S4 === "めざましビンタ") {
      kisoPower4S4 = 120;
    }

    //!かぜおこし/たつまき(第三世代以降)
    if (name1 === "かぜおこし" || name1 === "たつまき") {
      kisoS1Power1 = 80;
      kisoS2Power1 = 80;
      kisoS3Power1 = 80;
      kisoS4Power1 = 80;
    }

    if (name2 === "かぜおこし" || name2 === "たつまき") {
      kisoS1Power2 = 80;
      kisoS2Power2 = 80;
      kisoS3Power2 = 80;
      kisoS4Power2 = 80;
    }

    if (name3 === "かぜおこし" || name3 === "たつまき") {
      kisoS1Power3 = 80;
      kisoS2Power3 = 80;
      kisoS3Power3 = 80;
      kisoS4Power3 = 80;
    }

    if (name4 === "かぜおこし" || name4 === "たつまき") {
      kisoS1Power4 = 80;
      kisoS2Power4 = 80;
      kisoS3Power4 = 80;
      kisoS4Power4 = 80;
    }

    if (name1S1 === "かぜおこし" || name1S1 === "たつまき") {
      kisoPower1S1 = 80;
    }

    if (name2S1 === "かぜおこし" || name2S1 === "たつまき") {
      kisoPower2S1 = 80;
    }

    if (name3S1 === "かぜおこし" || name3S1 === "たつまき") {
      kisoPower3S1 = 80;
    }

    if (name4S1 === "かぜおこし" || name4S1 === "たつまき") {
      kisoPower4S1 = 80;
    }

    if (name1S2 === "かぜおこし" || name1S2 === "たつまき") {
      kisoPower1S2 = 80;
    }

    if (name2S2 === "かぜおこし" || name2S2 === "たつまき") {
      kisoPower2S2 = 80;
    }

    if (name3S2 === "かぜおこし" || name3S2 === "たつまき") {
      kisoPower3S2 = 80;
    }

    if (name4S2 === "かぜおこし" || name4S2 === "たつまき") {
      kisoPower4S2 = 80;
    }

    if (name1S3 === "かぜおこし" || name1S3 === "たつまき") {
      kisoPower1S3 = 80;
    }

    if (name2S3 === "かぜおこし" || name2S3 === "たつまき") {
      kisoPower2S3 = 80;
    }

    if (name3S3 === "かぜおこし" || name3S3 === "たつまき") {
      kisoPower3S3 = 80;
    }

    if (name4S3 === "かぜおこし" || name4S3 === "たつまき") {
      kisoPower4S3 = 80;
    }

    if (name1S4 === "かぜおこし" || name1S4 === "たつまき") {
      kisoPower1S4 = 80;
    }

    if (name2S4 === "かぜおこし" || name2S4 === "たつまき") {
      kisoPower2S4 = 80;
    }

    if (name3S4 === "かぜおこし" || name3S4 === "たつまき") {
      kisoPower3S4 = 80;
    }

    if (name4S4 === "かぜおこし" || name4S4 === "たつまき") {
      kisoPower4S4 = 80;
    }

    //!じしん(第三世代・第四世代)
    if (name1 === "じしん") {
      kisoS1Power1 = 200;
      kisoS2Power1 = 200;
      kisoS3Power1 = 200;
      kisoS4Power1 = 200;
    }

    if (name2 === "じしん") {
      kisoS1Power2 = 200;
      kisoS2Power2 = 200;
      kisoS3Power2 = 200;
      kisoS4Power2 = 200;
    }

    if (name3 === "じしん") {
      kisoS1Power3 = 200;
      kisoS2Power3 = 200;
      kisoS3Power3 = 200;
      kisoS4Power3 = 200;
    }

    if (name4 === "じしん") {
      kisoS1Power4 = 200;
      kisoS2Power4 = 200;
      kisoS3Power4 = 200;
      kisoS4Power4 = 200;
    }

    if (name1S1 === "じしん") {
      kisoPower1S1 = 200;
    }

    if (name2S1 === "じしん") {
      kisoPower2S1 = 200;
    }

    if (name3S1 === "じしん") {
      kisoPower3S1 = 200;
    }

    if (name4S1 === "じしん") {
      kisoPower4S1 = 200;
    }

    if (name1S2 === "じしん") {
      kisoPower1S2 = 200;
    }

    if (name2S2 === "じしん") {
      kisoPower2S2 = 200;
    }

    if (name3S2 === "じしん") {
      kisoPower3S2 = 200;
    }

    if (name4S2 === "じしん") {
      kisoPower4S2 = 200;
    }

    if (name1S3 === "じしん") {
      kisoPower1S3 = 200;
    }

    if (name2S3 === "じしん") {
      kisoPower2S3 = 200;
    }

    if (name3S3 === "じしん") {
      kisoPower3S3 = 200;
    }

    if (name4S3 === "じしん") {
      kisoPower4S3 = 200;
    }

    if (name1S4 === "じしん") {
      kisoPower1S4 = 200;
    }

    if (name2S4 === "じしん") {
      kisoPower2S4 = 200;
    }

    if (name3S4 === "じしん") {
      kisoPower3S4 = 200;
    }

    if (name4S4 === "じしん") {
      kisoPower4S4 = 200;
    }

    ////マグニチュード(第三世代・第四世代)
    //!うずしお(第三世代・第四世代)
    if (name1 === "うずしお") {
      kisoS1Power1 = 30;
      kisoS2Power1 = 30;
      kisoS3Power1 = 30;
      kisoS4Power1 = 30;
    }

    if (name2 === "うずしお") {
      kisoS1Power2 = 30;
      kisoS2Power2 = 30;
      kisoS3Power2 = 30;
      kisoS4Power2 = 30;
    }

    if (name3 === "うずしお") {
      kisoS1Power3 = 30;
      kisoS2Power3 = 30;
      kisoS3Power3 = 30;
      kisoS4Power3 = 30;
    }

    if (name4 === "うずしお") {
      kisoS1Power4 = 30;
      kisoS2Power4 = 30;
      kisoS3Power4 = 30;
      kisoS4Power4 = 30;
    }

    if (name1S1 === "うずしお") {
      kisoPower1S1 = 30;
    }

    if (name2S1 === "うずしお") {
      kisoPower2S1 = 30;
    }

    if (name3S1 === "うずしお") {
      kisoPower3S1 = 30;
    }

    if (name4S1 === "うずしお") {
      kisoPower4S1 = 30;
    }

    if (name1S2 === "うずしお") {
      kisoPower1S2 = 30;
    }

    if (name2S2 === "うずしお") {
      kisoPower2S2 = 30;
    }

    if (name3S2 === "うずしお") {
      kisoPower3S2 = 30;
    }

    if (name4S2 === "うずしお") {
      kisoPower4S2 = 30;
    }

    if (name1S3 === "うずしお") {
      kisoPower1S3 = 30;
    }

    if (name2S3 === "うずしお") {
      kisoPower2S3 = 30;
    }

    if (name3S3 === "うずしお") {
      kisoPower3S3 = 30;
    }

    if (name4S3 === "うずしお") {
      kisoPower4S3 = 30;
    }

    if (name1S4 === "うずしお") {
      kisoPower1S4 = 30;
    }

    if (name2S4 === "うずしお") {
      kisoPower2S4 = 30;
    }

    if (name3S4 === "うずしお") {
      kisoPower3S4 = 30;
    }

    if (name4S4 === "うずしお") {
      kisoPower4S4 = 30;
    }
    //!なみのり(第三世代・第四世代)
    if (name1 === "なみのり") {
      kisoS1Power1 = 190;
      kisoS2Power1 = 190;
      kisoS3Power1 = 190;
      kisoS4Power1 = 190;
    }

    if (name2 === "なみのり") {
      kisoS1Power2 = 190;
      kisoS2Power2 = 190;
      kisoS3Power2 = 190;
      kisoS4Power2 = 190;
    }

    if (name3 === "なみのり") {
      kisoS1Power3 = 190;
      kisoS2Power3 = 190;
      kisoS3Power3 = 190;
      kisoS4Power3 = 190;
    }

    if (name4 === "なみのり") {
      kisoS1Power4 = 190;
      kisoS2Power4 = 190;
      kisoS3Power4 = 190;
      kisoS4Power4 = 190;
    }

    if (name1S1 === "なみのり") {
      kisoPower1S1 = 190;
    }

    if (name2S1 === "なみのり") {
      kisoPower2S1 = 190;
    }

    if (name3S1 === "なみのり") {
      kisoPower3S1 = 190;
    }

    if (name4S1 === "なみのり") {
      kisoPower4S1 = 190;
    }

    if (name1S2 === "なみのり") {
      kisoPower1S2 = 190;
    }

    if (name2S2 === "なみのり") {
      kisoPower2S2 = 190;
    }

    if (name3S2 === "なみのり") {
      kisoPower3S2 = 190;
    }

    if (name4S2 === "なみのり") {
      kisoPower4S2 = 190;
    }

    if (name1S3 === "なみのり") {
      kisoPower1S3 = 190;
    }

    if (name2S3 === "なみのり") {
      kisoPower2S3 = 190;
    }

    if (name3S3 === "なみのり") {
      kisoPower3S3 = 190;
    }

    if (name4S3 === "なみのり") {
      kisoPower4S3 = 190;
    }

    if (name1S4 === "なみのり") {
      kisoPower1S4 = 190;
    }

    if (name2S4 === "なみのり") {
      kisoPower2S4 = 190;
    }

    if (name3S4 === "なみのり") {
      kisoPower3S4 = 190;
    }

    if (name4S4 === "なみのり") {
      kisoPower4S4 = 190;
    }
    //! ふみつけ(第四世代のみ)
    if (name1 === "ふみつけ") {
      kisoS1Power1 = 130;
      kisoS2Power1 = 130;
      kisoS3Power1 = 130;
      kisoS4Power1 = 130;
    }

    if (name2 === "ふみつけ") {
      kisoS1Power2 = 130;
      kisoS2Power2 = 130;
      kisoS3Power2 = 130;
      kisoS4Power2 = 130;
    }

    if (name3 === "ふみつけ") {
      kisoS1Power3 = 130;
      kisoS2Power3 = 130;
      kisoS3Power3 = 130;
      kisoS4Power3 = 130;
    }

    if (name4 === "ふみつけ") {
      kisoS1Power4 = 130;
      kisoS2Power4 = 130;
      kisoS3Power4 = 130;
      kisoS4Power4 = 130;
    }

    if (name1S1 === "ふみつけ") {
      kisoPower1S1 = 130;
    }

    if (name2S1 === "ふみつけ") {
      kisoPower2S1 = 130;
    }

    if (name3S1 === "ふみつけ") {
      kisoPower3S1 = 130;
    }

    if (name4S1 === "ふみつけ") {
      kisoPower4S1 = 130;
    }

    if (name1S2 === "ふみつけ") {
      kisoPower1S2 = 130;
    }

    if (name2S2 === "ふみつけ") {
      kisoPower2S2 = 130;
    }

    if (name3S2 === "ふみつけ") {
      kisoPower3S2 = 130;
    }

    if (name4S2 === "ふみつけ") {
      kisoPower4S2 = 130;
    }

    if (name1S3 === "ふみつけ") {
      kisoPower1S3 = 130;
    }

    if (name2S3 === "ふみつけ") {
      kisoPower2S3 = 130;
    }

    if (name3S3 === "ふみつけ") {
      kisoPower3S3 = 130;
    }

    if (name4S3 === "ふみつけ") {
      kisoPower4S3 = 130;
    }

    if (name1S4 === "ふみつけ") {
      kisoPower1S4 = 130;
    }

    if (name2S4 === "ふみつけ") {
      kisoPower2S4 = 130;
    }

    if (name3S4 === "ふみつけ") {
      kisoPower3S4 = 130;
    }

    if (name4S4 === "ふみつけ") {
      kisoPower4S4 = 130;
    }

    ////ウェザーボール
    //// なげつける→鉄球固定
    ////アイスボール/ころがる
    ////トリプルキック/トリプルアクセル
    ////はきだす(第四世代以降)
    ////れんぞくぎり
    ////おいうち
    //!しっぺがえし
    if (name1 === "しっぺがえし") {
      kisoS1Power1 = 100;
      kisoS2Power1 = 100;
      kisoS3Power1 = 100;
      kisoS4Power1 = 100;
    }

    if (name2 === "しっぺがえし") {
      kisoS1Power2 = 100;
      kisoS2Power2 = 100;
      kisoS3Power2 = 100;
      kisoS4Power2 = 100;
    }

    if (name3 === "しっぺがえし") {
      kisoS1Power3 = 100;
      kisoS2Power3 = 100;
      kisoS3Power3 = 100;
      kisoS4Power3 = 100;
    }

    if (name4 === "しっぺがえし") {
      kisoS1Power4 = 100;
      kisoS2Power4 = 100;
      kisoS3Power4 = 100;
      kisoS4Power4 = 100;
    }

    if (name1S1 === "しっぺがえし") {
      kisoPower1S1 = 100;
    }

    if (name2S1 === "しっぺがえし") {
      kisoPower2S1 = 100;
    }

    if (name3S1 === "しっぺがえし") {
      kisoPower3S1 = 100;
    }

    if (name4S1 === "しっぺがえし") {
      kisoPower4S1 = 100;
    }

    if (name1S2 === "しっぺがえし") {
      kisoPower1S2 = 100;
    }

    if (name2S2 === "しっぺがえし") {
      kisoPower2S2 = 100;
    }

    if (name3S2 === "しっぺがえし") {
      kisoPower3S2 = 100;
    }

    if (name4S2 === "しっぺがえし") {
      kisoPower4S2 = 100;
    }

    if (name1S3 === "しっぺがえし") {
      kisoPower1S3 = 100;
    }

    if (name2S3 === "しっぺがえし") {
      kisoPower2S3 = 100;
    }

    if (name3S3 === "しっぺがえし") {
      kisoPower3S3 = 100;
    }

    if (name4S3 === "しっぺがえし") {
      kisoPower4S3 = 100;
    }

    if (name1S4 === "しっぺがえし") {
      kisoPower1S4 = 100;
    }

    if (name2S4 === "しっぺがえし") {
      kisoPower2S4 = 100;
    }

    if (name3S4 === "しっぺがえし") {
      kisoPower3S4 = 100;
    }

    if (name4S4 === "しっぺがえし") {
      kisoPower4S4 = 100;
    }

    //! ゆきなだれ/リベンジ
    if (name1 === "ゆきなだれ" || name1 === "リベンジ") {
      kisoS1Power1 = 120;
      kisoS2Power1 = 120;
      kisoS3Power1 = 120;
      kisoS4Power1 = 120;
    }

    if (name2 === "ゆきなだれ" || name2 === "リベンジ") {
      kisoS1Power2 = 120;
      kisoS2Power2 = 120;
      kisoS3Power2 = 120;
      kisoS4Power2 = 120;
    }

    if (name3 === "ゆきなだれ" || name3 === "リベンジ") {
      kisoS1Power3 = 120;
      kisoS2Power3 = 120;
      kisoS3Power3 = 120;
      kisoS4Power3 = 120;
    }

    if (name4 === "ゆきなだれ" || name4 === "リベンジ") {
      kisoS1Power4 = 120;
      kisoS2Power4 = 120;
      kisoS3Power4 = 120;
      kisoS4Power4 = 120;
    }

    if (name1S1 === "ゆきなだれ" || name1S1 === "リベンジ") {
      kisoPower1S1 = 120;
    }

    if (name2S1 === "ゆきなだれ" || name2S1 === "リベンジ") {
      kisoPower2S1 = 120;
    }

    if (name3S1 === "ゆきなだれ" || name3S1 === "リベンジ") {
      kisoPower3S1 = 120;
    }

    if (name4S1 === "ゆきなだれ" || name4S1 === "リベンジ") {
      kisoPower4S1 = 120;
    }

    if (name1S2 === "ゆきなだれ" || name1S2 === "リベンジ") {
      kisoPower1S2 = 120;
    }

    if (name2S2 === "ゆきなだれ" || name2S2 === "リベンジ") {
      kisoPower2S2 = 120;
    }

    if (name3S2 === "ゆきなだれ" || name3S2 === "リベンジ") {
      kisoPower3S2 = 120;
    }

    if (name4S2 === "ゆきなだれ" || name4S2 === "リベンジ") {
      kisoPower4S2 = 120;
    }

    if (name1S3 === "ゆきなだれ" || name1S3 === "リベンジ") {
      kisoPower1S3 = 120;
    }

    if (name2S3 === "ゆきなだれ" || name2S3 === "リベンジ") {
      kisoPower2S3 = 120;
    }

    if (name3S3 === "ゆきなだれ" || name3S3 === "リベンジ") {
      kisoPower3S3 = 120;
    }

    if (name4S3 === "ゆきなだれ" || name4S3 === "リベンジ") {
      kisoPower4S3 = 120;
    }

    if (name1S4 === "ゆきなだれ" || name1S4 === "リベンジ") {
      kisoPower1S4 = 120;
    }

    if (name2S4 === "ゆきなだれ" || name2S4 === "リベンジ") {
      kisoPower2S4 = 120;
    }

    if (name3S4 === "ゆきなだれ" || name3S4 === "リベンジ") {
      kisoPower3S4 = 120;
    }

    if (name4S4 === "ゆきなだれ" || name4S4 === "リベンジ") {
      kisoPower4S4 = 120;
    }

    //! からげんき//4世代はやけどのA減少無効果がない。根性の無効果はある
    if (name1 === "からげんき") {
      kisoS1Power1 = 140;
      kisoS2Power1 = 140;
      kisoS3Power1 = 140;
      kisoS4Power1 = 140;
    }

    if (name2 === "からげんき") {
      kisoS1Power2 = 140;
      kisoS2Power2 = 140;
      kisoS3Power2 = 140;
      kisoS4Power2 = 140;
    }

    if (name3 === "からげんき") {
      kisoS1Power3 = 140;
      kisoS2Power3 = 140;
      kisoS3Power3 = 140;
      kisoS4Power3 = 140;
    }

    if (name4 === "からげんき") {
      kisoS1Power4 = 140;
      kisoS2Power4 = 140;
      kisoS3Power4 = 140;
      kisoS4Power4 = 140;
    }

    if (name1S1 === "からげんき") {
      kisoPower1S1 = 140;
    }

    if (name2S1 === "からげんき") {
      kisoPower2S1 = 140;
    }

    if (name3S1 === "からげんき") {
      kisoPower3S1 = 140;
    }

    if (name4S1 === "からげんき") {
      kisoPower4S1 = 140;
    }

    if (name1S2 === "からげんき") {
      kisoPower1S2 = 140;
    }

    if (name2S2 === "からげんき") {
      kisoPower2S2 = 140;
    }

    if (name3S2 === "からげんき") {
      kisoPower3S2 = 140;
    }

    if (name4S2 === "からげんき") {
      kisoPower4S2 = 140;
    }

    if (name1S3 === "からげんき") {
      kisoPower1S3 = 140;
    }

    if (name2S3 === "からげんき") {
      kisoPower2S3 = 140;
    }

    if (name3S3 === "からげんき") {
      kisoPower3S3 = 140;
    }

    if (name4S3 === "からげんき") {
      kisoPower4S3 = 140;
    }

    if (name1S4 === "からげんき") {
      kisoPower1S4 = 140;
    }

    if (name2S4 === "からげんき") {
      kisoPower2S4 = 140;
    }

    if (name3S4 === "からげんき") {
      kisoPower3S4 = 140;
    }

    if (name4S4 === "からげんき") {
      kisoPower4S4 = 140;
    }

    //! だいばくはつ※本来はBが半減だが計算面倒臭いので便宜上威力を上げる。
    if (name1 === "だいばくはつ") {
      kisoS1Power1 = 500;
      kisoS2Power1 = 500;
      kisoS3Power1 = 500;
      kisoS4Power1 = 500;
    }

    if (name2 === "だいばくはつ") {
      kisoS1Power2 = 500;
      kisoS2Power2 = 500;
      kisoS3Power2 = 500;
      kisoS4Power2 = 500;
    }

    if (name3 === "だいばくはつ") {
      kisoS1Power3 = 500;
      kisoS2Power3 = 500;
      kisoS3Power3 = 500;
      kisoS4Power3 = 500;
    }

    if (name4 === "だいばくはつ") {
      kisoS1Power4 = 500;
      kisoS2Power4 = 500;
      kisoS3Power4 = 500;
      kisoS4Power4 = 500;
    }

    if (name1S1 === "だいばくはつ") {
      kisoPower1S1 = 500;
    }

    if (name2S1 === "だいばくはつ") {
      kisoPower2S1 = 500;
    }

    if (name3S1 === "だいばくはつ") {
      kisoPower3S1 = 500;
    }

    if (name4S1 === "だいばくはつ") {
      kisoPower4S1 = 500;
    }

    if (name1S2 === "だいばくはつ") {
      kisoPower1S2 = 500;
    }

    if (name2S2 === "だいばくはつ") {
      kisoPower2S2 = 500;
    }

    if (name3S2 === "だいばくはつ") {
      kisoPower3S2 = 500;
    }

    if (name4S2 === "だいばくはつ") {
      kisoPower4S2 = 500;
    }

    if (name1S3 === "だいばくはつ") {
      kisoPower1S3 = 500;
    }

    if (name2S3 === "だいばくはつ") {
      kisoPower2S3 = 500;
    }

    if (name3S3 === "だいばくはつ") {
      kisoPower3S3 = 500;
    }

    if (name4S3 === "だいばくはつ") {
      kisoPower4S3 = 500;
    }

    if (name1S4 === "だいばくはつ") {
      kisoPower1S4 = 500;
    }

    if (name2S4 === "だいばくはつ") {
      kisoPower2S4 = 500;
    }

    if (name3S4 === "だいばくはつ") {
      kisoPower3S4 = 500;
    }

    if (name4S4 === "だいばくはつ") {
      kisoPower4S4 = 500;
    }

    //! じばく※本来はBが半減だが計算面倒臭いので便宜上威力を上げる。
    if (name1 === "じばく") {
      kisoS1Power1 = 400;
      kisoS2Power1 = 400;
      kisoS3Power1 = 400;
      kisoS4Power1 = 400;
    }

    if (name2 === "じばく") {
      kisoS1Power2 = 400;
      kisoS2Power2 = 400;
      kisoS3Power2 = 400;
      kisoS4Power2 = 400;
    }

    if (name3 === "じばく") {
      kisoS1Power3 = 400;
      kisoS2Power3 = 400;
      kisoS3Power3 = 400;
      kisoS4Power3 = 400;
    }

    if (name4 === "じばく") {
      kisoS1Power4 = 400;
      kisoS2Power4 = 400;
      kisoS3Power4 = 400;
      kisoS4Power4 = 400;
    }

    if (name1S1 === "じばく") {
      kisoPower1S1 = 400;
    }

    if (name2S1 === "じばく") {
      kisoPower2S1 = 400;
    }

    if (name3S1 === "じばく") {
      kisoPower3S1 = 400;
    }

    if (name4S1 === "じばく") {
      kisoPower4S1 = 400;
    }

    if (name1S2 === "じばく") {
      kisoPower1S2 = 400;
    }

    if (name2S2 === "じばく") {
      kisoPower2S2 = 400;
    }

    if (name3S2 === "じばく") {
      kisoPower3S2 = 400;
    }

    if (name4S2 === "じばく") {
      kisoPower4S2 = 400;
    }

    if (name1S3 === "じばく") {
      kisoPower1S3 = 400;
    }

    if (name2S3 === "じばく") {
      kisoPower2S3 = 400;
    }

    if (name3S3 === "じばく") {
      kisoPower3S3 = 400;
    }

    if (name4S3 === "じばく") {
      kisoPower4S3 = 400;
    }

    if (name1S4 === "じばく") {
      kisoPower1S4 = 400;
    }

    if (name2S4 === "じばく") {
      kisoPower2S4 = 400;
    }

    if (name3S4 === "じばく") {
      kisoPower3S4 = 400;
    }

    if (name4S4 === "じばく") {
      kisoPower4S4 = 400;
    }

    ///! しおみず
    if (name1 === "しおみず") {
      kisoS1Power1 = 130;
      kisoS2Power1 = 130;
      kisoS3Power1 = 130;
      kisoS4Power1 = 130;
    }

    if (name2 === "しおみず") {
      kisoS1Power2 = 130;
      kisoS2Power2 = 130;
      kisoS3Power2 = 130;
      kisoS4Power2 = 130;
    }

    if (name3 === "しおみず") {
      kisoS1Power3 = 130;
      kisoS2Power3 = 130;
      kisoS3Power3 = 130;
      kisoS4Power3 = 130;
    }

    if (name4 === "しおみず") {
      kisoS1Power4 = 130;
      kisoS2Power4 = 130;
      kisoS3Power4 = 130;
      kisoS4Power4 = 130;
    }

    if (name1S1 === "しおみず") {
      kisoPower1S1 = 130;
    }

    if (name2S1 === "しおみず") {
      kisoPower2S1 = 130;
    }

    if (name3S1 === "しおみず") {
      kisoPower3S1 = 130;
    }

    if (name4S1 === "しおみず") {
      kisoPower4S1 = 130;
    }

    if (name1S2 === "しおみず") {
      kisoPower1S2 = 130;
    }

    if (name2S2 === "しおみず") {
      kisoPower2S2 = 130;
    }

    if (name3S2 === "しおみず") {
      kisoPower3S2 = 130;
    }

    if (name4S2 === "しおみず") {
      kisoPower4S2 = 130;
    }

    if (name1S3 === "しおみず") {
      kisoPower1S3 = 130;
    }

    if (name2S3 === "しおみず") {
      kisoPower2S3 = 130;
    }

    if (name3S3 === "しおみず") {
      kisoPower3S3 = 130;
    }

    if (name4S3 === "しおみず") {
      kisoPower4S3 = 130;
    }

    if (name1S4 === "しおみず") {
      kisoPower1S4 = 130;
    }

    if (name2S4 === "しおみず") {
      kisoPower2S4 = 130;
    }

    if (name3S4 === "しおみず") {
      kisoPower3S4 = 130;
    }

    if (name4S4 === "しおみず") {
      kisoPower4S4 = 130;
    }

    //// じゅうでん(第四世代以降)

    //! ソーラービーム/
    if (
      (name1 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name1 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name1 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoS1Power1 = 60;
      kisoS2Power1 = 60;
      kisoS3Power1 = 60;
      kisoS4Power1 = 60;
    }

    if (
      (name2 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name2 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name2 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoS1Power2 = 60;
      kisoS2Power2 = 60;
      kisoS3Power2 = 60;
      kisoS4Power2 = 60;
    }

    if (
      (name3 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name3 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name3 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoS1Power3 = 60;
      kisoS2Power3 = 60;
      kisoS3Power3 = 60;
      kisoS4Power3 = 60;
    }

    if (
      (name4 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name4 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name4 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoS1Power4 = 60;
      kisoS2Power4 = 60;
      kisoS3Power4 = 60;
      kisoS4Power4 = 60;
    }

    if (
      (name1S1 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name1S1 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name1S1 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower1S1 = 60;
    }

    if (
      (name2S1 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name2S1 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name2S1 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower2S1 = 60;
    }

    if (
      (name3S1 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name3S1 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name3S1 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower3S1 = 60;
    }

    if (
      (name4S1 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name4S1 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name4S1 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower4S1 = 60;
    }

    if (
      (name1S2 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name1S2 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name1S2 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower1S2 = 60;
    }

    if (
      (name2S2 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name2S2 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name2S2 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower2S2 = 60;
    }

    if (
      (name3S2 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name3S2 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name3S2 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower3S2 = 60;
    }

    if (
      (name4S2 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name4S2 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name4S2 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower4S2 = 60;
    }

    if (
      (name1S3 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name1S3 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name1S3 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower1S3 = 60;
    }

    if (
      (name2S3 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name2S3 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name2S3 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower2S3 = 60;
    }

    if (
      (name3S3 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name3S3 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name3S3 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower3S3 = 60;
    }

    if (
      (name4S3 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name4S3 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name4S3 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower4S3 = 60;
    }

    if (
      (name1S4 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name1S4 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name1S4 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower1S4 = 60;
    }

    if (
      (name2S4 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name2S4 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name2S4 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower2S4 = 60;
    }

    if (
      (name3S4 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name3S4 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name3S4 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower3S4 = 60;
    }

    if (
      (name4S4 === "ソーラービーム" && selectedWhether === "おおあめ") ||
      (name4S4 === "ソーラービーム" && selectedWhether === "すなあらし") ||
      (name4S4 === "ソーラービーム" && selectedWhether === "あられ")
    ) {
      kisoPower4S4 = 60;
    }
    //// どろあそび/みずあそび

    //! テクニシャン	1.5	使用する基礎威力60以下の技の威力が上がる。
    if (selectedAbility === "テクニシャン") {
      if (kisoS1Power1 <= 60) {
        kisoS1Power1 = Math.floor((kisoS1Power1 * 150) / 100);
      }
      if (kisoS2Power1 <= 60) {
        kisoS2Power1 = Math.floor((kisoS2Power1 * 150) / 100);
      }
      if (kisoS3Power1 <= 60) {
        kisoS3Power1 = Math.floor((kisoS3Power1 * 150) / 100);
      }
      if (kisoS4Power1 <= 60) {
        kisoS4Power1 = Math.floor((kisoS4Power1 * 150) / 100);
      }
      if (power1 <= 60) {
        power1 = Math.floor((power1 * 150) / 100);
      }
    }

    if (selectedAbility === "テクニシャン") {
      if (kisoS1Power2 <= 60) {
        kisoS1Power2 = Math.floor((kisoS1Power2 * 150) / 100);
      }
      if (kisoS2Power2 <= 60) {
        kisoS2Power2 = Math.floor((kisoS2Power2 * 150) / 100);
      }
      if (kisoS3Power2 <= 60) {
        kisoS3Power2 = Math.floor((kisoS3Power2 * 150) / 100);
      }
      if (kisoS4Power2 <= 60) {
        kisoS4Power2 = Math.floor((kisoS4Power2 * 150) / 100);
      }
      if (power2 <= 60) {
        power2 = Math.floor((power2 * 150) / 100);
      }
    }

    if (selectedAbility === "テクニシャン") {
      if (kisoS1Power3 <= 60) {
        kisoS1Power3 = Math.floor((kisoS1Power3 * 150) / 100);
      }
      if (kisoS2Power3 <= 60) {
        kisoS2Power3 = Math.floor((kisoS2Power3 * 150) / 100);
      }
      if (kisoS3Power3 <= 60) {
        kisoS3Power3 = Math.floor((kisoS3Power3 * 150) / 100);
      }
      if (kisoS4Power3 <= 60) {
        kisoS4Power3 = Math.floor((kisoS4Power3 * 150) / 100);
      }
      if (power3 <= 60) {
        power3 = Math.floor((power3 * 150) / 100);
      }
    }

    if (selectedAbility === "テクニシャン") {
      if (kisoS1Power4 <= 60) {
        kisoS1Power4 = Math.floor((kisoS1Power4 * 150) / 100);
      }
      if (kisoS2Power4 <= 60) {
        kisoS2Power4 = Math.floor((kisoS2Power4 * 150) / 100);
      }
      if (kisoS3Power4 <= 60) {
        kisoS3Power4 = Math.floor((kisoS3Power4 * 150) / 100);
      }
      if (kisoS4Power4 <= 60) {
        kisoS4Power4 = Math.floor((kisoS4Power4 * 150) / 100);
      }
      if (power4 <= 60) {
        power4 = Math.floor((power4 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower1S1 <= 60) {
        kisoPower1S1 = Math.floor((kisoPower1S1 * 150) / 100);
      }
      if (power1S1 <= 60) {
        power1S1 = Math.floor((power1S1 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower2S1 <= 60) {
        kisoPower2S1 = Math.floor((kisoPower2S1 * 150) / 100);
      }
      if (power2S1 <= 60) {
        power2S1 = Math.floor((power2S1 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower3S1 <= 60) {
        kisoPower3S1 = Math.floor((kisoPower3S1 * 150) / 100);
      }
      if (power3S1 <= 60) {
        power3S1 = Math.floor((power3S1 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower4S1 <= 60) {
        kisoPower4S1 = Math.floor((kisoPower4S1 * 150) / 100);
      }
      if (power4S1 <= 60) {
        power4S1 = Math.floor((power4S1 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower1S2 <= 60) {
        kisoPower1S2 = Math.floor((kisoPower1S2 * 150) / 100);
      }
      if (power1S2 <= 60) {
        power1S2 = Math.floor((power1S2 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower2S2 <= 60) {
        kisoPower2S2 = Math.floor((kisoPower2S2 * 150) / 100);
      }
      if (power2S2 <= 60) {
        power2S2 = Math.floor((power2S2 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower3S2 <= 60) {
        kisoPower3S2 = Math.floor((kisoPower3S2 * 150) / 100);
      }
      if (power3S2 <= 60) {
        power3S2 = Math.floor((power3S2 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower4S2 <= 60) {
        kisoPower4S2 = Math.floor((kisoPower4S2 * 150) / 100);
      }
      if (power4S2 <= 60) {
        power4S2 = Math.floor((power4S2 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower1S3 <= 60) {
        kisoPower1S3 = Math.floor((kisoPower1S3 * 150) / 100);
      }
      if (power1S3 <= 60) {
        power1S3 = Math.floor((power1S3 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower2S3 <= 60) {
        kisoPower2S3 = Math.floor((kisoPower2S3 * 150) / 100);
      }
      if (power2S3 <= 60) {
        power2S3 = Math.floor((power2S3 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower3S3 <= 60) {
        kisoPower3S3 = Math.floor((kisoPower3S3 * 150) / 100);
      }
      if (power3S3 <= 60) {
        power3S3 = Math.floor((power3S3 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower4S3 <= 60) {
        kisoPower4S3 = Math.floor((kisoPower4S3 * 150) / 100);
      }
      if (power4S3 <= 60) {
        power4S3 = Math.floor((power4S3 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower1S4 <= 60) {
        kisoPower1S4 = Math.floor((kisoPower1S4 * 150) / 100);
      }
      if (power1S4 <= 60) {
        power1S4 = Math.floor((power1S4 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower2S4 <= 60) {
        kisoPower2S4 = Math.floor((kisoPower2S4 * 150) / 100);
      }
      if (power2S4 <= 60) {
        power2S4 = Math.floor((power2S4 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower3S4 <= 60) {
        kisoPower3S4 = Math.floor((kisoPower3S4 * 150) / 100);
      }
      if (power3S4 <= 60) {
        power3S4 = Math.floor((power3S4 * 150) / 100);
      }
    }

    if (selectedTekiAbility === "テクニシャン") {
      if (kisoPower4S4 <= 60) {
        kisoPower4S4 = Math.floor((kisoPower4S4 * 150) / 100);
      }
      if (power4S4 <= 60) {
        power4S4 = Math.floor((power4S4 * 150) / 100);
      }
    }

    ///////////////////////////////////////////////////

    //! もちもの補正

    // ちからのハチマキ1.1
    if (myItem === "ちからのハチマキ" && moveClass1 === "物理") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 110) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 110) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 110) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 110) / 100);
      power1 = Math.floor((power1 * 110) / 100);
    }

    if (myItem === "ちからのハチマキ" && moveClass2 === "物理") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 110) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 110) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 110) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 110) / 100);
      power2 = Math.floor((power2 * 110) / 100);
    }

    if (myItem === "ちからのハチマキ" && moveClass3 === "物理") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 110) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 110) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 110) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 110) / 100);
      power3 = Math.floor((power3 * 110) / 100);
    }

    if (myItem === "ちからのハチマキ" && moveClass4 === "物理") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 110) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 110) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 110) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 110) / 100);
      power4 = Math.floor((power4 * 110) / 100);
    }

    if (tekiItem1 === "ちからのハチマキ" && moveClass1S1 === "物理") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 110) / 100);
      power1S1 = Math.floor((power1S1 * 110) / 100);
    }

    if (tekiItem1 === "ちからのハチマキ" && moveClass2S1 === "物理") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 110) / 100);
      power2S1 = Math.floor((power2S1 * 110) / 100);
    }

    if (tekiItem1 === "ちからのハチマキ" && moveClass3S1 === "物理") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 110) / 100);
      power3S1 = Math.floor((power3S1 * 110) / 100);
    }

    if (tekiItem1 === "ちからのハチマキ" && moveClass4S1 === "物理") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 110) / 100);
      power4S1 = Math.floor((power4S1 * 110) / 100);
    }

    if (tekiItem2 === "ちからのハチマキ" && moveClass1S2 === "物理") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 110) / 100);
      power1S2 = Math.floor((power1S2 * 110) / 100);
    }

    if (tekiItem2 === "ちからのハチマキ" && moveClass2S2 === "物理") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 110) / 100);
      power2S2 = Math.floor((power2S2 * 110) / 100);
    }

    if (tekiItem2 === "ちからのハチマキ" && moveClass3S2 === "物理") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 110) / 100);
      power3S2 = Math.floor((power3S2 * 110) / 100);
    }

    if (tekiItem2 === "ちからのハチマキ" && moveClass4S2 === "物理") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 110) / 100);
      power4S2 = Math.floor((power4S2 * 110) / 100);
    }

    if (tekiItem3 === "ちからのハチマキ" && moveClass1S3 === "物理") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 110) / 100);
      power1S3 = Math.floor((power1S3 * 110) / 100);
    }

    if (tekiItem3 === "ちからのハチマキ" && moveClass2S3 === "物理") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 110) / 100);
      power2S3 = Math.floor((power2S3 * 110) / 100);
    }

    if (tekiItem3 === "ちからのハチマキ" && moveClass3S3 === "物理") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 110) / 100);
      power3S3 = Math.floor((power3S3 * 110) / 100);
    }

    if (tekiItem3 === "ちからのハチマキ" && moveClass4S3 === "物理") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 110) / 100);
      power4S3 = Math.floor((power4S3 * 110) / 100);
    }

    if (tekiItem4 === "ちからのハチマキ" && moveClass1S4 === "物理") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 110) / 100);
      power1S4 = Math.floor((power1S4 * 110) / 100);
    }

    if (tekiItem4 === "ちからのハチマキ" && moveClass2S4 === "物理") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 110) / 100);
      power2S4 = Math.floor((power2S4 * 110) / 100);
    }

    if (tekiItem4 === "ちからのハチマキ" && moveClass3S4 === "物理") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 110) / 100);
      power3S4 = Math.floor((power3S4 * 110) / 100);
    }

    if (tekiItem4 === "ちからのハチマキ" && moveClass4S4 === "物理") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 110) / 100);
      power4S4 = Math.floor((power4S4 * 110) / 100);
    }

    // ものしりメガネ1.1
    if (myItem === "ものしりメガネ" && moveClass1 === "特殊") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 110) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 110) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 110) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 110) / 100);
      power1 = Math.floor((power1 * 110) / 100);
    }

    if (myItem === "ものしりメガネ" && moveClass2 === "特殊") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 110) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 110) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 110) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 110) / 100);
      power2 = Math.floor((power2 * 110) / 100);
    }

    if (myItem === "ものしりメガネ" && moveClass3 === "特殊") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 110) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 110) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 110) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 110) / 100);
      power3 = Math.floor((power3 * 110) / 100);
    }

    if (myItem === "ものしりメガネ" && moveClass4 === "特殊") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 110) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 110) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 110) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 110) / 100);
      power4 = Math.floor((power4 * 110) / 100);
    }

    if (tekiItem1 === "ものしりメガネ" && moveClass1S1 === "特殊") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 110) / 100);
      power1S1 = Math.floor((power1S1 * 110) / 100);
    }

    if (tekiItem1 === "ものしりメガネ" && moveClass2S1 === "特殊") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 110) / 100);
      power2S1 = Math.floor((power2S1 * 110) / 100);
    }

    if (tekiItem1 === "ものしりメガネ" && moveClass3S1 === "特殊") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 110) / 100);
      power3S1 = Math.floor((power3S1 * 110) / 100);
    }

    if (tekiItem1 === "ものしりメガネ" && moveClass4S1 === "特殊") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 110) / 100);
      power4S1 = Math.floor((power4S1 * 110) / 100);
    }

    if (tekiItem2 === "ものしりメガネ" && moveClass1S2 === "特殊") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 110) / 100);
      power1S2 = Math.floor((power1S2 * 110) / 100);
    }

    if (tekiItem2 === "ものしりメガネ" && moveClass2S2 === "特殊") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 110) / 100);
      power2S2 = Math.floor((power2S2 * 110) / 100);
    }

    if (tekiItem2 === "ものしりメガネ" && moveClass3S2 === "特殊") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 110) / 100);
      power3S2 = Math.floor((power3S2 * 110) / 100);
    }

    if (tekiItem2 === "ものしりメガネ" && moveClass4S2 === "特殊") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 110) / 100);
      power4S2 = Math.floor((power4S2 * 110) / 100);
    }

    if (tekiItem3 === "ものしりメガネ" && moveClass1S3 === "特殊") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 110) / 100);
      power1S3 = Math.floor((power1S3 * 110) / 100);
    }

    if (tekiItem3 === "ものしりメガネ" && moveClass2S3 === "特殊") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 110) / 100);
      power2S3 = Math.floor((power2S3 * 110) / 100);
    }

    if (tekiItem3 === "ものしりメガネ" && moveClass3S3 === "特殊") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 110) / 100);
      power3S3 = Math.floor((power3S3 * 110) / 100);
    }

    if (tekiItem3 === "ものしりメガネ" && moveClass4S3 === "特殊") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 110) / 100);
      power4S3 = Math.floor((power4S3 * 110) / 100);
    }

    if (tekiItem4 === "ものしりメガネ" && moveClass1S4 === "特殊") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 110) / 100);
      power1S4 = Math.floor((power1S4 * 110) / 100);
    }

    if (tekiItem4 === "ものしりメガネ" && moveClass2S4 === "特殊") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 110) / 100);
      power2S4 = Math.floor((power2S4 * 110) / 100);
    }

    if (tekiItem4 === "ものしりメガネ" && moveClass3S4 === "特殊") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 110) / 100);
      power3S4 = Math.floor((power3S4 * 110) / 100);
    }

    if (tekiItem4 === "ものしりメガネ" && moveClass4S4 === "特殊") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 110) / 100);
      power4S4 = Math.floor((power4S4 * 110) / 100);
    }

    // あやしいおこう1.2
    if (myItem === "あやしいおこう" && wtype1 === "ゴースト") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "あやしいおこう" && wtype2 === "ゴースト") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "あやしいおこう" && wtype3 === "ゴースト") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "あやしいおこう" && wtype4 === "ゴースト") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "あやしいおこう" && wtype1S1 === "ゴースト") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "あやしいおこう" && wtype2S1 === "ゴースト") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "あやしいおこう" && wtype3S1 === "ゴースト") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "あやしいおこう" && wtype4S1 === "ゴースト") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "あやしいおこう" && wtype1S2 === "ゴースト") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "あやしいおこう" && wtype2S2 === "ゴースト") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "あやしいおこう" && wtype3S2 === "ゴースト") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "あやしいおこう" && wtype4S2 === "ゴースト") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "あやしいおこう" && wtype1S3 === "ゴースト") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "あやしいおこう" && wtype2S3 === "ゴースト") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "あやしいおこう" && wtype3S3 === "ゴースト") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "あやしいおこう" && wtype4S3 === "ゴースト") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "あやしいおこう" && wtype1S4 === "ゴースト") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "あやしいおこう" && wtype2S4 === "ゴースト") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "あやしいおこう" && wtype3S4 === "ゴースト") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "あやしいおこう" && wtype4S4 === "ゴースト") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    // うしおのおこう1.2
    if (myItem === "うしおのおこう" && wtype1 === "みず") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "うしおのおこう" && wtype2 === "みず") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "うしおのおこう" && wtype3 === "みず") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "うしおのおこう" && wtype4 === "みず") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "うしおのおこう" && wtype1S1 === "みず") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "うしおのおこう" && wtype2S1 === "みず") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "うしおのおこう" && wtype3S1 === "みず") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "うしおのおこう" && wtype4S1 === "みず") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "うしおのおこう" && wtype1S2 === "みず") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "うしおのおこう" && wtype2S2 === "みず") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "うしおのおこう" && wtype3S2 === "みず") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "うしおのおこう" && wtype4S2 === "みず") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "うしおのおこう" && wtype1S3 === "みず") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "うしおのおこう" && wtype2S3 === "みず") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "うしおのおこう" && wtype3S3 === "みず") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "うしおのおこう" && wtype4S3 === "みず") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "うしおのおこう" && wtype1S4 === "みず") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "うしおのおこう" && wtype2S4 === "みず") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "うしおのおこう" && wtype3S4 === "みず") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "うしおのおこう" && wtype4S4 === "みず") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    // おはなのおこう1.2
    if (myItem === "おはなのおこう" && wtype1 === "くさ") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "おはなのおこう" && wtype2 === "くさ") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "おはなのおこう" && wtype3 === "くさ") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "おはなのおこう" && wtype4 === "くさ") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "おはなのおこう" && wtype1S1 === "くさ") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "おはなのおこう" && wtype2S1 === "くさ") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "おはなのおこう" && wtype3S1 === "くさ") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "おはなのおこう" && wtype4S1 === "くさ") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "おはなのおこう" && wtype1S2 === "くさ") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "おはなのおこう" && wtype2S2 === "くさ") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "おはなのおこう" && wtype3S2 === "くさ") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "おはなのおこう" && wtype4S2 === "くさ") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "おはなのおこう" && wtype1S3 === "くさ") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "おはなのおこう" && wtype2S3 === "くさ") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "おはなのおこう" && wtype3S3 === "くさ") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "おはなのおこう" && wtype4S3 === "くさ") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "おはなのおこう" && wtype1S4 === "くさ") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "おはなのおこう" && wtype2S4 === "くさ") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "おはなのおこう" && wtype3S4 === "くさ") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "おはなのおこう" && wtype4S4 === "くさ") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    // かたいいし1.2
    if (myItem === "かたいいし" && wtype1 === "いわ") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "かたいいし" && wtype2 === "いわ") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "かたいいし" && wtype3 === "いわ") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "かたいいし" && wtype4 === "いわ") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "かたいいし" && wtype1S1 === "いわ") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "かたいいし" && wtype2S1 === "いわ") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "かたいいし" && wtype3S1 === "いわ") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "かたいいし" && wtype4S1 === "いわ") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "かたいいし" && wtype1S2 === "いわ") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "かたいいし" && wtype2S2 === "いわ") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "かたいいし" && wtype3S2 === "いわ") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "かたいいし" && wtype4S2 === "いわ") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "かたいいし" && wtype1S3 === "いわ") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "かたいいし" && wtype2S3 === "いわ") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "かたいいし" && wtype3S3 === "いわ") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "かたいいし" && wtype4S3 === "いわ") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "かたいいし" && wtype1S4 === "いわ") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "かたいいし" && wtype2S4 === "いわ") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "かたいいし" && wtype3S4 === "いわ") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "かたいいし" && wtype4S4 === "いわ") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    // がんせきおこう1.2
    if (myItem === "がんせきおこう" && wtype1 === "いわ") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "がんせきおこう" && wtype2 === "いわ") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "がんせきおこう" && wtype3 === "いわ") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "がんせきおこう" && wtype4 === "いわ") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "がんせきおこう" && wtype1S1 === "いわ") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "がんせきおこう" && wtype2S1 === "いわ") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "がんせきおこう" && wtype3S1 === "いわ") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "がんせきおこう" && wtype4S1 === "いわ") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "がんせきおこう" && wtype1S2 === "いわ") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "がんせきおこう" && wtype2S2 === "いわ") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "がんせきおこう" && wtype3S2 === "いわ") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "がんせきおこう" && wtype4S2 === "いわ") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "がんせきおこう" && wtype1S3 === "いわ") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "がんせきおこう" && wtype2S3 === "いわ") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "がんせきおこう" && wtype3S3 === "いわ") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "がんせきおこう" && wtype4S3 === "いわ") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "がんせきおこう" && wtype1S4 === "いわ") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "がんせきおこう" && wtype2S4 === "いわ") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "がんせきおこう" && wtype3S4 === "いわ") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "がんせきおこう" && wtype4S4 === "いわ") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! きせきのタネ1.2
    if (myItem === "きせきのタネ" && wtype1 === "くさ") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "きせきのタネ" && wtype2 === "くさ") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "きせきのタネ" && wtype3 === "くさ") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "きせきのタネ" && wtype4 === "くさ") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "きせきのタネ" && wtype1S1 === "くさ") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "きせきのタネ" && wtype2S1 === "くさ") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "きせきのタネ" && wtype3S1 === "くさ") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "きせきのタネ" && wtype4S1 === "くさ") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "きせきのタネ" && wtype1S2 === "くさ") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "きせきのタネ" && wtype2S2 === "くさ") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "きせきのタネ" && wtype3S2 === "くさ") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "きせきのタネ" && wtype4S2 === "くさ") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "きせきのタネ" && wtype1S3 === "くさ") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "きせきのタネ" && wtype2S3 === "くさ") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "きせきのタネ" && wtype3S3 === "くさ") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "きせきのタネ" && wtype4S3 === "くさ") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "きせきのタネ" && wtype1S4 === "くさ") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "きせきのタネ" && wtype2S4 === "くさ") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "きせきのタネ" && wtype3S4 === "くさ") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "きせきのタネ" && wtype4S4 === "くさ") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! ぎんのこな1.2
    if (myItem === "ぎんのこな" && wtype1 === "むし") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "ぎんのこな" && wtype2 === "むし") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "ぎんのこな" && wtype3 === "むし") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "ぎんのこな" && wtype4 === "むし") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "ぎんのこな" && wtype1S1 === "むし") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "ぎんのこな" && wtype2S1 === "むし") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "ぎんのこな" && wtype3S1 === "むし") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "ぎんのこな" && wtype4S1 === "むし") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "ぎんのこな" && wtype1S2 === "むし") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "ぎんのこな" && wtype2S2 === "むし") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "ぎんのこな" && wtype3S2 === "むし") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "ぎんのこな" && wtype4S2 === "むし") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "ぎんのこな" && wtype1S3 === "むし") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "ぎんのこな" && wtype2S3 === "むし") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "ぎんのこな" && wtype3S3 === "むし") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "ぎんのこな" && wtype4S3 === "むし") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "ぎんのこな" && wtype1S4 === "むし") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "ぎんのこな" && wtype2S4 === "むし") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "ぎんのこな" && wtype3S4 === "むし") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "ぎんのこな" && wtype4S4 === "むし") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! くろいメガネ1.2
    if (myItem === "くろいメガネ" && wtype1 === "あく") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "くろいメガネ" && wtype2 === "あく") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "くろいメガネ" && wtype3 === "あく") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "くろいメガネ" && wtype4 === "あく") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "くろいメガネ" && wtype1S1 === "あく") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "くろいメガネ" && wtype2S1 === "あく") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "くろいメガネ" && wtype3S1 === "あく") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "くろいメガネ" && wtype4S1 === "あく") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "くろいメガネ" && wtype1S2 === "あく") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "くろいメガネ" && wtype2S2 === "あく") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "くろいメガネ" && wtype3S2 === "あく") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "くろいメガネ" && wtype4S2 === "あく") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "くろいメガネ" && wtype1S3 === "あく") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "くろいメガネ" && wtype2S3 === "あく") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "くろいメガネ" && wtype3S3 === "あく") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "くろいメガネ" && wtype4S3 === "あく") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "くろいメガネ" && wtype1S4 === "あく") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "くろいメガネ" && wtype2S4 === "あく") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "くろいメガネ" && wtype3S4 === "あく") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "くろいメガネ" && wtype4S4 === "あく") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! くろおび1.2
    if (myItem === "くろおび" && wtype1 === "かくとう") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "くろおび" && wtype2 === "かくとう") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "くろおび" && wtype3 === "かくとう") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "くろおび" && wtype4 === "かくとう") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "くろおび" && wtype1S1 === "かくとう") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "くろおび" && wtype2S1 === "かくとう") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "くろおび" && wtype3S1 === "かくとう") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "くろおび" && wtype4S1 === "かくとう") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "くろおび" && wtype1S2 === "かくとう") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "くろおび" && wtype2S2 === "かくとう") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "くろおび" && wtype3S2 === "かくとう") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "くろおび" && wtype4S2 === "かくとう") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "くろおび" && wtype1S3 === "かくとう") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "くろおび" && wtype2S3 === "かくとう") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "くろおび" && wtype3S3 === "かくとう") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "くろおび" && wtype4S3 === "かくとう") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "くろおび" && wtype1S4 === "かくとう") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "くろおび" && wtype2S4 === "かくとう") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "くろおび" && wtype3S4 === "かくとう") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "くろおび" && wtype4S4 === "かくとう") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! さざなみのおこう1.2
    if (myItem === "さざなみのおこう" && wtype1 === "みず") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "さざなみのおこう" && wtype2 === "みず") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "さざなみのおこう" && wtype3 === "みず") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "さざなみのおこう" && wtype4 === "みず") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "さざなみのおこう" && wtype1S1 === "みず") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "さざなみのおこう" && wtype2S1 === "みず") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "さざなみのおこう" && wtype3S1 === "みず") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "さざなみのおこう" && wtype4S1 === "みず") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "さざなみのおこう" && wtype1S2 === "みず") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "さざなみのおこう" && wtype2S2 === "みず") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "さざなみのおこう" && wtype3S2 === "みず") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "さざなみのおこう" && wtype4S2 === "みず") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "さざなみのおこう" && wtype1S3 === "みず") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "さざなみのおこう" && wtype2S3 === "みず") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "さざなみのおこう" && wtype3S3 === "みず") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "さざなみのおこう" && wtype4S3 === "みず") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "さざなみのおこう" && wtype1S4 === "みず") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "さざなみのおこう" && wtype2S4 === "みず") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "さざなみのおこう" && wtype3S4 === "みず") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "さざなみのおこう" && wtype4S4 === "みず") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! じしゃく1.2
    if (myItem === "じしゃく" && wtype1 === "でんき") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "じしゃく" && wtype2 === "でんき") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "じしゃく" && wtype3 === "でんき") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "じしゃく" && wtype4 === "でんき") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "じしゃく" && wtype1S1 === "でんき") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "じしゃく" && wtype2S1 === "でんき") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "じしゃく" && wtype3S1 === "でんき") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "じしゃく" && wtype4S1 === "でんき") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "じしゃく" && wtype1S2 === "でんき") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "じしゃく" && wtype2S2 === "でんき") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "じしゃく" && wtype3S2 === "でんき") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "じしゃく" && wtype4S2 === "でんき") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "じしゃく" && wtype1S3 === "でんき") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "じしゃく" && wtype2S3 === "でんき") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "じしゃく" && wtype3S3 === "でんき") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "じしゃく" && wtype4S3 === "でんき") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "じしゃく" && wtype1S4 === "でんき") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "じしゃく" && wtype2S4 === "でんき") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "じしゃく" && wtype3S4 === "でんき") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "じしゃく" && wtype4S4 === "でんき") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! シルクのスカーフ1.2
    if (myItem === "シルクのスカーフ" && wtype1 === "ノーマル") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "シルクのスカーフ" && wtype2 === "ノーマル") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "シルクのスカーフ" && wtype3 === "ノーマル") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "シルクのスカーフ" && wtype4 === "ノーマル") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "シルクのスカーフ" && wtype1S1 === "ノーマル") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "シルクのスカーフ" && wtype2S1 === "ノーマル") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "シルクのスカーフ" && wtype3S1 === "ノーマル") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "シルクのスカーフ" && wtype4S1 === "ノーマル") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "シルクのスカーフ" && wtype1S2 === "ノーマル") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "シルクのスカーフ" && wtype2S2 === "ノーマル") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "シルクのスカーフ" && wtype3S2 === "ノーマル") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "シルクのスカーフ" && wtype4S2 === "ノーマル") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "シルクのスカーフ" && wtype1S3 === "ノーマル") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "シルクのスカーフ" && wtype2S3 === "ノーマル") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "シルクのスカーフ" && wtype3S3 === "ノーマル") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "シルクのスカーフ" && wtype4S3 === "ノーマル") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "シルクのスカーフ" && wtype1S4 === "ノーマル") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "シルクのスカーフ" && wtype2S4 === "ノーマル") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "シルクのスカーフ" && wtype3S4 === "ノーマル") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "シルクのスカーフ" && wtype4S4 === "ノーマル") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }
    //! しんぴのしずく1.2
    if (myItem === "しんぴのしずく" && wtype1 === "みず") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "しんぴのしずく" && wtype2 === "みず") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "しんぴのしずく" && wtype3 === "みず") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "しんぴのしずく" && wtype4 === "みず") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "しんぴのしずく" && wtype1S1 === "みず") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "しんぴのしずく" && wtype2S1 === "みず") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "しんぴのしずく" && wtype3S1 === "みず") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "しんぴのしずく" && wtype4S1 === "みず") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "しんぴのしずく" && wtype1S2 === "みず") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "しんぴのしずく" && wtype2S2 === "みず") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "しんぴのしずく" && wtype3S2 === "みず") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "しんぴのしずく" && wtype4S2 === "みず") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "しんぴのしずく" && wtype1S3 === "みず") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "しんぴのしずく" && wtype2S3 === "みず") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "しんぴのしずく" && wtype3S3 === "みず") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "しんぴのしずく" && wtype4S3 === "みず") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "しんぴのしずく" && wtype1S4 === "みず") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "しんぴのしずく" && wtype2S4 === "みず") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "しんぴのしずく" && wtype3S4 === "みず") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "しんぴのしずく" && wtype4S4 === "みず") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }
    //! するどいくちばし1.2
    if (myItem === "するどいくちばし" && wtype1 === "ひこう") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "するどいくちばし" && wtype2 === "ひこう") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "するどいくちばし" && wtype3 === "ひこう") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "するどいくちばし" && wtype4 === "ひこう") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "するどいくちばし" && wtype1S1 === "ひこう") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "するどいくちばし" && wtype2S1 === "ひこう") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "するどいくちばし" && wtype3S1 === "ひこう") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "するどいくちばし" && wtype4S1 === "ひこう") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "するどいくちばし" && wtype1S2 === "ひこう") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "するどいくちばし" && wtype2S2 === "ひこう") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "するどいくちばし" && wtype3S2 === "ひこう") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "するどいくちばし" && wtype4S2 === "ひこう") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "するどいくちばし" && wtype1S3 === "ひこう") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "するどいくちばし" && wtype2S3 === "ひこう") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "するどいくちばし" && wtype3S3 === "ひこう") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "するどいくちばし" && wtype4S3 === "ひこう") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "するどいくちばし" && wtype1S4 === "ひこう") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "するどいくちばし" && wtype2S4 === "ひこう") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "するどいくちばし" && wtype3S4 === "ひこう") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "するどいくちばし" && wtype4S4 === "ひこう") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! どくバリ1.2
    if (myItem === "どくバリ" && wtype1 === "どく") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "どくバリ" && wtype2 === "どく") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "どくバリ" && wtype3 === "どく") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "どくバリ" && wtype4 === "どく") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "どくバリ" && wtype1S1 === "どく") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "どくバリ" && wtype2S1 === "どく") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "どくバリ" && wtype3S1 === "どく") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "どくバリ" && wtype4S1 === "どく") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "どくバリ" && wtype1S2 === "どく") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "どくバリ" && wtype2S2 === "どく") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "どくバリ" && wtype3S2 === "どく") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "どくバリ" && wtype4S2 === "どく") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "どくバリ" && wtype1S3 === "どく") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "どくバリ" && wtype2S3 === "どく") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "どくバリ" && wtype3S3 === "どく") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "どくバリ" && wtype4S3 === "どく") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "どくバリ" && wtype1S4 === "どく") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "どくバリ" && wtype2S4 === "どく") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "どくバリ" && wtype3S4 === "どく") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "どくバリ" && wtype4S4 === "どく") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! とけないこおり1.2
    if (myItem === "とけないこおり" && wtype1 === "こおり") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "とけないこおり" && wtype2 === "こおり") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "とけないこおり" && wtype3 === "こおり") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "とけないこおり" && wtype4 === "こおり") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "とけないこおり" && wtype1S1 === "こおり") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "とけないこおり" && wtype2S1 === "こおり") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "とけないこおり" && wtype3S1 === "こおり") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "とけないこおり" && wtype4S1 === "こおり") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "とけないこおり" && wtype1S2 === "こおり") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "とけないこおり" && wtype2S2 === "こおり") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "とけないこおり" && wtype3S2 === "こおり") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "とけないこおり" && wtype4S2 === "こおり") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "とけないこおり" && wtype1S3 === "こおり") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "とけないこおり" && wtype2S3 === "こおり") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "とけないこおり" && wtype3S3 === "こおり") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "とけないこおり" && wtype4S3 === "こおり") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "とけないこおり" && wtype1S4 === "こおり") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "とけないこおり" && wtype2S4 === "こおり") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "とけないこおり" && wtype3S4 === "こおり") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "とけないこおり" && wtype4S4 === "こおり") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! のろいのおふだ1.2
    if (myItem === "のろいのおふだ" && wtype1 === "ゴースト") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "のろいのおふだ" && wtype2 === "ゴースト") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "のろいのおふだ" && wtype3 === "ゴースト") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "のろいのおふだ" && wtype4 === "ゴースト") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "のろいのおふだ" && wtype1S1 === "ゴースト") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "のろいのおふだ" && wtype2S1 === "ゴースト") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "のろいのおふだ" && wtype3S1 === "ゴースト") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "のろいのおふだ" && wtype4S1 === "ゴースト") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "のろいのおふだ" && wtype1S2 === "ゴースト") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "のろいのおふだ" && wtype2S2 === "ゴースト") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "のろいのおふだ" && wtype3S2 === "ゴースト") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "のろいのおふだ" && wtype4S2 === "ゴースト") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "のろいのおふだ" && wtype1S3 === "ゴースト") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "のろいのおふだ" && wtype2S3 === "ゴースト") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "のろいのおふだ" && wtype3S3 === "ゴースト") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "のろいのおふだ" && wtype4S3 === "ゴースト") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "のろいのおふだ" && wtype1S4 === "ゴースト") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "のろいのおふだ" && wtype2S4 === "ゴースト") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "のろいのおふだ" && wtype3S4 === "ゴースト") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "のろいのおふだ" && wtype4S4 === "ゴースト") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! まがったスプーン1.2
    if (myItem === "まがったスプーン" && wtype1 === "エスパー") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "まがったスプーン" && wtype2 === "エスパー") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "まがったスプーン" && wtype3 === "エスパー") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "まがったスプーン" && wtype4 === "エスパー") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "まがったスプーン" && wtype1S1 === "エスパー") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "まがったスプーン" && wtype2S1 === "エスパー") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "まがったスプーン" && wtype3S1 === "エスパー") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "まがったスプーン" && wtype4S1 === "エスパー") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "まがったスプーン" && wtype1S2 === "エスパー") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "まがったスプーン" && wtype2S2 === "エスパー") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "まがったスプーン" && wtype3S2 === "エスパー") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "まがったスプーン" && wtype4S2 === "エスパー") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "まがったスプーン" && wtype1S3 === "エスパー") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "まがったスプーン" && wtype2S3 === "エスパー") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "まがったスプーン" && wtype3S3 === "エスパー") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "まがったスプーン" && wtype4S3 === "エスパー") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "まがったスプーン" && wtype1S4 === "エスパー") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "まがったスプーン" && wtype2S4 === "エスパー") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "まがったスプーン" && wtype3S4 === "エスパー") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "まがったスプーン" && wtype4S4 === "エスパー") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! メタルコート1.2
    if (myItem === "メタルコート" && wtype1 === "はがね") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "メタルコート" && wtype2 === "はがね") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "メタルコート" && wtype3 === "はがね") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "メタルコート" && wtype4 === "はがね") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "メタルコート" && wtype1S1 === "はがね") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "メタルコート" && wtype2S1 === "はがね") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "メタルコート" && wtype3S1 === "はがね") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "メタルコート" && wtype4S1 === "はがね") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "メタルコート" && wtype1S2 === "はがね") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "メタルコート" && wtype2S2 === "はがね") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "メタルコート" && wtype3S2 === "はがね") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "メタルコート" && wtype4S2 === "はがね") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "メタルコート" && wtype1S3 === "はがね") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "メタルコート" && wtype2S3 === "はがね") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "メタルコート" && wtype3S3 === "はがね") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "メタルコート" && wtype4S3 === "はがね") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "メタルコート" && wtype1S4 === "はがね") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "メタルコート" && wtype2S4 === "はがね") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "メタルコート" && wtype3S4 === "はがね") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "メタルコート" && wtype4S4 === "はがね") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! もくたん1.2
    if (myItem === "もくたん" && wtype1 === "ほのお") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "もくたん" && wtype2 === "ほのお") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "もくたん" && wtype3 === "ほのお") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "もくたん" && wtype4 === "ほのお") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "もくたん" && wtype1S1 === "ほのお") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "もくたん" && wtype2S1 === "ほのお") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "もくたん" && wtype3S1 === "ほのお") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "もくたん" && wtype4S1 === "ほのお") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "もくたん" && wtype1S2 === "ほのお") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "もくたん" && wtype2S2 === "ほのお") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "もくたん" && wtype3S2 === "ほのお") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "もくたん" && wtype4S2 === "ほのお") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "もくたん" && wtype1S3 === "ほのお") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "もくたん" && wtype2S3 === "ほのお") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "もくたん" && wtype3S3 === "ほのお") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "もくたん" && wtype4S3 === "ほのお") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "もくたん" && wtype1S4 === "ほのお") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "もくたん" && wtype2S4 === "ほのお") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "もくたん" && wtype3S4 === "ほのお") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "もくたん" && wtype4S4 === "ほのお") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! やわらかいすな1.2
    if (myItem === "やわらかいすな" && wtype1 === "じめん") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "やわらかいすな" && wtype2 === "じめん") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "やわらかいすな" && wtype3 === "じめん") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "やわらかいすな" && wtype4 === "じめん") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "やわらかいすな" && wtype1S1 === "じめん") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "やわらかいすな" && wtype2S1 === "じめん") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "やわらかいすな" && wtype3S1 === "じめん") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "やわらかいすな" && wtype4S1 === "じめん") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "やわらかいすな" && wtype1S2 === "じめん") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "やわらかいすな" && wtype2S2 === "じめん") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "やわらかいすな" && wtype3S2 === "じめん") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "やわらかいすな" && wtype4S2 === "じめん") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "やわらかいすな" && wtype1S3 === "じめん") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "やわらかいすな" && wtype2S3 === "じめん") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "やわらかいすな" && wtype3S3 === "じめん") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "やわらかいすな" && wtype4S3 === "じめん") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "やわらかいすな" && wtype1S4 === "じめん") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "やわらかいすな" && wtype2S4 === "じめん") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "やわらかいすな" && wtype3S4 === "じめん") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "やわらかいすな" && wtype4S4 === "じめん") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //! りゅうのキバ1.2
    if (myItem === "りゅうのキバ" && wtype1 === "ドラゴン") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 120) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 120) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 120) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 120) / 100);
      power1 = Math.floor((power1 * 120) / 100);
    }

    if (myItem === "りゅうのキバ" && wtype2 === "ドラゴン") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 120) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 120) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 120) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 120) / 100);
      power2 = Math.floor((power2 * 120) / 100);
    }

    if (myItem === "りゅうのキバ" && wtype3 === "ドラゴン") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 120) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 120) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 120) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 120) / 100);
      power3 = Math.floor((power3 * 120) / 100);
    }

    if (myItem === "りゅうのキバ" && wtype4 === "ドラゴン") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 120) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 120) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 120) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 120) / 100);
      power4 = Math.floor((power4 * 120) / 100);
    }

    if (tekiItem1 === "りゅうのキバ" && wtype1S1 === "ドラゴン") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 120) / 100);
      power1S1 = Math.floor((power1S1 * 120) / 100);
    }

    if (tekiItem1 === "りゅうのキバ" && wtype2S1 === "ドラゴン") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 120) / 100);
      power2S1 = Math.floor((power2S1 * 120) / 100);
    }

    if (tekiItem1 === "りゅうのキバ" && wtype3S1 === "ドラゴン") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 120) / 100);
      power3S1 = Math.floor((power3S1 * 120) / 100);
    }

    if (tekiItem1 === "りゅうのキバ" && wtype4S1 === "ドラゴン") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 120) / 100);
      power4S1 = Math.floor((power4S1 * 120) / 100);
    }

    if (tekiItem2 === "りゅうのキバ" && wtype1S2 === "ドラゴン") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 120) / 100);
      power1S2 = Math.floor((power1S2 * 120) / 100);
    }

    if (tekiItem2 === "りゅうのキバ" && wtype2S2 === "ドラゴン") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 120) / 100);
      power2S2 = Math.floor((power2S2 * 120) / 100);
    }

    if (tekiItem2 === "りゅうのキバ" && wtype3S2 === "ドラゴン") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 120) / 100);
      power3S2 = Math.floor((power3S2 * 120) / 100);
    }

    if (tekiItem2 === "りゅうのキバ" && wtype4S2 === "ドラゴン") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 120) / 100);
      power4S2 = Math.floor((power4S2 * 120) / 100);
    }

    if (tekiItem3 === "りゅうのキバ" && wtype1S3 === "ドラゴン") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 120) / 100);
      power1S3 = Math.floor((power1S3 * 120) / 100);
    }

    if (tekiItem3 === "りゅうのキバ" && wtype2S3 === "ドラゴン") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 120) / 100);
      power2S3 = Math.floor((power2S3 * 120) / 100);
    }

    if (tekiItem3 === "りゅうのキバ" && wtype3S3 === "ドラゴン") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 120) / 100);
      power3S3 = Math.floor((power3S3 * 120) / 100);
    }

    if (tekiItem3 === "りゅうのキバ" && wtype4S3 === "ドラゴン") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 120) / 100);
      power4S3 = Math.floor((power4S3 * 120) / 100);
    }

    if (tekiItem4 === "りゅうのキバ" && wtype1S4 === "ドラゴン") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 120) / 100);
      power1S4 = Math.floor((power1S4 * 120) / 100);
    }

    if (tekiItem4 === "りゅうのキバ" && wtype2S4 === "ドラゴン") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 120) / 100);
      power2S4 = Math.floor((power2S4 * 120) / 100);
    }

    if (tekiItem4 === "りゅうのキバ" && wtype3S4 === "ドラゴン") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 120) / 100);
      power3S4 = Math.floor((power3S4 * 120) / 100);
    }

    if (tekiItem4 === "りゅうのキバ" && wtype4S4 === "ドラゴン") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 120) / 100);
      power4S4 = Math.floor((power4S4 * 120) / 100);
    }

    //   使用者特性補正

    // 効果	補正値	発動条件など
    //! とうそうしん(同性)	1.25	対象が使用者と同じ性別なら威力が上がる。
    if (selectedAbility === "とうそうしん同") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 125) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 125) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 125) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 125) / 100);
      power1 = Math.floor((power1 * 125) / 100);
    }

    if (selectedAbility === "とうそうしん同") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 125) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 125) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 125) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 125) / 100);
      power2 = Math.floor((power2 * 125) / 100);
    }

    if (selectedAbility === "とうそうしん同") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 125) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 125) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 125) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 125) / 100);
      power3 = Math.floor((power3 * 125) / 100);
    }

    if (selectedAbility === "とうそうしん同") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 125) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 125) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 125) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 125) / 100);
      power4 = Math.floor((power4 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 125) / 100);
      power1S1 = Math.floor((power1S1 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 125) / 100);
      power2S1 = Math.floor((power2S1 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 125) / 100);
      power3S1 = Math.floor((power3S1 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 125) / 100);
      power4S1 = Math.floor((power4S1 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 125) / 100);
      power1S2 = Math.floor((power1S2 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 125) / 100);
      power2S2 = Math.floor((power2S2 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 125) / 100);
      power3S2 = Math.floor((power3S2 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 125) / 100);
      power4S2 = Math.floor((power4S2 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 125) / 100);
      power1S3 = Math.floor((power1S3 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 125) / 100);
      power2S3 = Math.floor((power2S3 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 125) / 100);
      power3S3 = Math.floor((power3S3 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 125) / 100);
      power4S3 = Math.floor((power4S3 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 125) / 100);
      power1S4 = Math.floor((power1S4 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 125) / 100);
      power2S4 = Math.floor((power2S4 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 125) / 100);
      power3S4 = Math.floor((power3S4 * 125) / 100);
    }

    if (selectedTekiAbility === "とうそうしん同") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 125) / 100);
      power4S4 = Math.floor((power4S4 * 125) / 100);
    }

    //! とうそうしん(異性)	0.75	対象が使用者と異なる性別なら威力が下がる。
    if (selectedAbility === "とうそうしん異") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 75) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 75) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 75) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 75) / 100);
      power1 = Math.floor((power1 * 75) / 100);
    }

    if (selectedAbility === "とうそうしん異") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 75) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 75) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 75) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 75) / 100);
      power2 = Math.floor((power2 * 75) / 100);
    }

    if (selectedAbility === "とうそうしん異") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 75) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 75) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 75) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 75) / 100);
      power3 = Math.floor((power3 * 75) / 100);
    }

    if (selectedAbility === "とうそうしん異") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 75) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 75) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 75) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 75) / 100);
      power4 = Math.floor((power4 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 75) / 100);
      power1S1 = Math.floor((power1S1 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 75) / 100);
      power2S1 = Math.floor((power2S1 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 75) / 100);
      power3S1 = Math.floor((power3S1 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 75) / 100);
      power4S1 = Math.floor((power4S1 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 75) / 100);
      power1S2 = Math.floor((power1S2 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 75) / 100);
      power2S2 = Math.floor((power2S2 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 75) / 100);
      power3S2 = Math.floor((power3S2 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 75) / 100);
      power4S2 = Math.floor((power4S2 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 75) / 100);
      power1S3 = Math.floor((power1S3 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 75) / 100);
      power2S3 = Math.floor((power2S3 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 75) / 100);
      power3S3 = Math.floor((power3S3 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 75) / 100);
      power4S3 = Math.floor((power4S3 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 75) / 100);
      power1S4 = Math.floor((power1S4 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 75) / 100);
      power2S4 = Math.floor((power2S4 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 75) / 100);
      power3S4 = Math.floor((power3S4 * 75) / 100);
    }

    if (selectedTekiAbility === "とうそうしん異") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 75) / 100);
      power4S4 = Math.floor((power4S4 * 75) / 100);
    }

    // もうか・しんりょく・げきりゅう・むしのしらせ
    //もうか
    if (selectedAbility === "もうか" && wtype1 === "ほのお") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 150) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 150) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 150) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 150) / 100);
      power1 = Math.floor((power1 * 150) / 100);
    }

    if (selectedAbility === "もうか" && wtype2 === "ほのお") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 150) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 150) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 150) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 150) / 100);
      power2 = Math.floor((power2 * 150) / 100);
    }

    if (selectedAbility === "もうか" && wtype3 === "ほのお") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 150) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 150) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 150) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 150) / 100);
      power3 = Math.floor((power3 * 150) / 100);
    }

    if (selectedAbility === "もうか" && wtype4 === "ほのお") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 150) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 150) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 150) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 150) / 100);
      power4 = Math.floor((power4 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype1S1 === "ほのお") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 150) / 100);
      power1S1 = Math.floor((power1S1 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype2S1 === "ほのお") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 150) / 100);
      power2S1 = Math.floor((power2S1 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype3S1 === "ほのお") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 150) / 100);
      power3S1 = Math.floor((power3S1 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype4S1 === "ほのお") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 150) / 100);
      power4S1 = Math.floor((power4S1 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype1S2 === "ほのお") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 150) / 100);
      power1S2 = Math.floor((power1S2 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype2S2 === "ほのお") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 150) / 100);
      power2S2 = Math.floor((power2S2 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype3S2 === "ほのお") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 150) / 100);
      power3S2 = Math.floor((power3S2 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype4S2 === "ほのお") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 150) / 100);
      power4S2 = Math.floor((power4S2 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype1S3 === "ほのお") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 150) / 100);
      power1S3 = Math.floor((power1S3 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype2S3 === "ほのお") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 150) / 100);
      power2S3 = Math.floor((power2S3 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype3S3 === "ほのお") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 150) / 100);
      power3S3 = Math.floor((power3S3 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype4S3 === "ほのお") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 150) / 100);
      power4S3 = Math.floor((power4S3 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype1S4 === "ほのお") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 150) / 100);
      power1S4 = Math.floor((power1S4 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype2S4 === "ほのお") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 150) / 100);
      power2S4 = Math.floor((power2S4 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype3S4 === "ほのお") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 150) / 100);
      power3S4 = Math.floor((power3S4 * 150) / 100);
    }

    if (selectedTekiAbility === "もうか" && wtype4S4 === "ほのお") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 150) / 100);
      power4S4 = Math.floor((power4S4 * 150) / 100);
    }

    //しんりょく
    if (selectedAbility === "しんりょく" && wtype1 === "くさ") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 150) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 150) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 150) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 150) / 100);
      power1 = Math.floor((power1 * 150) / 100);
    }

    if (selectedAbility === "しんりょく" && wtype2 === "くさ") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 150) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 150) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 150) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 150) / 100);
      power2 = Math.floor((power2 * 150) / 100);
    }

    if (selectedAbility === "しんりょく" && wtype3 === "くさ") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 150) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 150) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 150) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 150) / 100);
      power3 = Math.floor((power3 * 150) / 100);
    }

    if (selectedAbility === "しんりょく" && wtype4 === "くさ") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 150) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 150) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 150) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 150) / 100);
      power4 = Math.floor((power4 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype1S1 === "くさ") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 150) / 100);
      power1S1 = Math.floor((power1S1 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype2S1 === "くさ") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 150) / 100);
      power2S1 = Math.floor((power2S1 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype3S1 === "くさ") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 150) / 100);
      power3S1 = Math.floor((power3S1 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype4S1 === "くさ") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 150) / 100);
      power4S1 = Math.floor((power4S1 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype1S2 === "くさ") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 150) / 100);
      power1S2 = Math.floor((power1S2 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype2S2 === "くさ") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 150) / 100);
      power2S2 = Math.floor((power2S2 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype3S2 === "くさ") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 150) / 100);
      power3S2 = Math.floor((power3S2 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype4S2 === "くさ") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 150) / 100);
      power4S2 = Math.floor((power4S2 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype1S3 === "くさ") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 150) / 100);
      power1S3 = Math.floor((power1S3 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype2S3 === "くさ") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 150) / 100);
      power2S3 = Math.floor((power2S3 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype3S3 === "くさ") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 150) / 100);
      power3S3 = Math.floor((power3S3 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype4S3 === "くさ") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 150) / 100);
      power4S3 = Math.floor((power4S3 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype1S4 === "くさ") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 150) / 100);
      power1S4 = Math.floor((power1S4 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype2S4 === "くさ") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 150) / 100);
      power2S4 = Math.floor((power2S4 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype3S4 === "くさ") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 150) / 100);
      power3S4 = Math.floor((power3S4 * 150) / 100);
    }

    if (selectedTekiAbility === "しんりょく" && wtype4S4 === "くさ") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 150) / 100);
      power4S4 = Math.floor((power4S4 * 150) / 100);
    }

    //げきりゅう
    if (selectedAbility === "げきりゅう" && wtype1 === "みず") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 150) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 150) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 150) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 150) / 100);
      power1 = Math.floor((power1 * 150) / 100);
    }

    if (selectedAbility === "げきりゅう" && wtype2 === "みず") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 150) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 150) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 150) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 150) / 100);
      power2 = Math.floor((power2 * 150) / 100);
    }

    if (selectedAbility === "げきりゅう" && wtype3 === "みず") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 150) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 150) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 150) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 150) / 100);
      power3 = Math.floor((power3 * 150) / 100);
    }

    if (selectedAbility === "げきりゅう" && wtype4 === "みず") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 150) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 150) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 150) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 150) / 100);
      power4 = Math.floor((power4 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype1S1 === "みず") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 150) / 100);
      power1S1 = Math.floor((power1S1 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype2S1 === "みず") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 150) / 100);
      power2S1 = Math.floor((power2S1 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype3S1 === "みず") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 150) / 100);
      power3S1 = Math.floor((power3S1 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype4S1 === "みず") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 150) / 100);
      power4S1 = Math.floor((power4S1 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype1S2 === "みず") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 150) / 100);
      power1S2 = Math.floor((power1S2 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype2S2 === "みず") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 150) / 100);
      power2S2 = Math.floor((power2S2 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype3S2 === "みず") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 150) / 100);
      power3S2 = Math.floor((power3S2 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype4S2 === "みず") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 150) / 100);
      power4S2 = Math.floor((power4S2 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype1S3 === "みず") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 150) / 100);
      power1S3 = Math.floor((power1S3 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype2S3 === "みず") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 150) / 100);
      power2S3 = Math.floor((power2S3 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype3S3 === "みず") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 150) / 100);
      power3S3 = Math.floor((power3S3 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype4S3 === "みず") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 150) / 100);
      power4S3 = Math.floor((power4S3 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype1S4 === "みず") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 150) / 100);
      power1S4 = Math.floor((power1S4 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype2S4 === "みず") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 150) / 100);
      power2S4 = Math.floor((power2S4 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype3S4 === "みず") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 150) / 100);
      power3S4 = Math.floor((power3S4 * 150) / 100);
    }

    if (selectedTekiAbility === "げきりゅう" && wtype4S4 === "みず") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 150) / 100);
      power4S4 = Math.floor((power4S4 * 150) / 100);
    }

    //むしのしらせ
    if (selectedAbility === "むしのしらせ" && wtype1 === "むし") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 150) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 150) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 150) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 150) / 100);
      power1 = Math.floor((power1 * 150) / 100);
    }

    if (selectedAbility === "むしのしらせ" && wtype2 === "むし") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 150) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 150) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 150) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 150) / 100);
      power2 = Math.floor((power2 * 150) / 100);
    }

    if (selectedAbility === "むしのしらせ" && wtype3 === "むし") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 150) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 150) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 150) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 150) / 100);
      power3 = Math.floor((power3 * 150) / 100);
    }

    if (selectedAbility === "むしのしらせ" && wtype4 === "むし") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 150) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 150) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 150) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 150) / 100);
      power4 = Math.floor((power4 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype1S1 === "むし") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 150) / 100);
      power1S1 = Math.floor((power1S1 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype2S1 === "むし") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 150) / 100);
      power2S1 = Math.floor((power2S1 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype3S1 === "むし") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 150) / 100);
      power3S1 = Math.floor((power3S1 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype4S1 === "むし") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 150) / 100);
      power4S1 = Math.floor((power4S1 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype1S2 === "むし") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 150) / 100);
      power1S2 = Math.floor((power1S2 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype2S2 === "むし") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 150) / 100);
      power2S2 = Math.floor((power2S2 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype3S2 === "むし") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 150) / 100);
      power3S2 = Math.floor((power3S2 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype4S2 === "むし") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 150) / 100);
      power4S2 = Math.floor((power4S2 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype1S3 === "むし") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 150) / 100);
      power1S3 = Math.floor((power1S3 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype2S3 === "むし") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 150) / 100);
      power2S3 = Math.floor((power2S3 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype3S3 === "むし") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 150) / 100);
      power3S3 = Math.floor((power3S3 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype4S3 === "むし") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 150) / 100);
      power4S3 = Math.floor((power4S3 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype1S4 === "むし") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 150) / 100);
      power1S4 = Math.floor((power1S4 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype2S4 === "むし") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 150) / 100);
      power2S4 = Math.floor((power2S4 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype3S4 === "むし") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 150) / 100);
      power3S4 = Math.floor((power3S4 * 150) / 100);
    }

    if (selectedTekiAbility === "むしのしらせ" && wtype4S4 === "むし") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 150) / 100);
      power4S4 = Math.floor((power4S4 * 150) / 100);
    }

    //   対象者特性補正
    //自分特性取得
    // const selectedAbility = myAbilitySelect.value;
    //敵特性取得
    // const selectedTekiAbility = tekiAbilitySelect.value;

    //! あついしぼう	0.5	ほのお・こおりタイプの技を受けるとき威力が下がる。
    if (
      (selectedTekiAbility === "あついしぼう" && wtype1 === "こおり") ||
      (selectedTekiAbility === "あついしぼう" && wtype1 === "ほのお")
    ) {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 50) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 50) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 50) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 50) / 100);
      power1 = Math.floor((power1 * 50) / 100);
    }

    if (
      (selectedTekiAbility === "あついしぼう" && wtype2 === "こおり") ||
      (selectedTekiAbility === "あついしぼう" && wtype2 === "ほのお")
    ) {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 50) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 50) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 50) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 50) / 100);
      power2 = Math.floor((power2 * 50) / 100);
    }

    if (
      (selectedTekiAbility === "あついしぼう" && wtype3 === "こおり") ||
      (selectedTekiAbility === "あついしぼう" && wtype3 === "ほのお")
    ) {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 50) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 50) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 50) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 50) / 100);
      power3 = Math.floor((power3 * 50) / 100);
    }

    if (
      (selectedTekiAbility === "あついしぼう" && wtype4 === "こおり") ||
      (selectedTekiAbility === "あついしぼう" && wtype4 === "ほのお")
    ) {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 50) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 50) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 50) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 50) / 100);
      power4 = Math.floor((power4 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype1S1 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype1S1 === "ほのお")
    ) {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 50) / 100);
      power1S1 = Math.floor((power1S1 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype2S1 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype2S1 === "ほのお")
    ) {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 50) / 100);
      power2S1 = Math.floor((power2S1 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype3S1 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype3S1 === "ほのお")
    ) {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 50) / 100);
      power3S1 = Math.floor((power3S1 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype4S1 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype4S1 === "ほのお")
    ) {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 50) / 100);
      power4S1 = Math.floor((power4S1 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype1S2 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype1S2 === "ほのお")
    ) {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 50) / 100);
      power1S2 = Math.floor((power1S2 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype2S2 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype2S2 === "ほのお")
    ) {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 50) / 100);
      power2S2 = Math.floor((power2S2 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype3S2 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype3S2 === "ほのお")
    ) {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 50) / 100);
      power3S2 = Math.floor((power3S2 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype4S2 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype4S2 === "ほのお")
    ) {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 50) / 100);
      power4S2 = Math.floor((power4S2 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype1S3 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype1S3 === "ほのお")
    ) {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 50) / 100);
      power1S3 = Math.floor((power1S3 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype2S3 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype2S3 === "ほのお")
    ) {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 50) / 100);
      power2S3 = Math.floor((power2S3 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype3S3 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype3S3 === "ほのお")
    ) {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 50) / 100);
      power3S3 = Math.floor((power3S3 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype4S3 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype4S3 === "ほのお")
    ) {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 50) / 100);
      power4S3 = Math.floor((power4S3 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype1S4 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype1S4 === "ほのお")
    ) {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 50) / 100);
      power1S4 = Math.floor((power1S4 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype2S4 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype2S4 === "ほのお")
    ) {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 50) / 100);
      power2S4 = Math.floor((power2S4 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype3S4 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype3S4 === "ほのお")
    ) {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 50) / 100);
      power3S4 = Math.floor((power3S4 * 50) / 100);
    }

    if (
      (selectedAbility === "あついしぼう" && wtype4S4 === "こおり") ||
      (selectedAbility === "あついしぼう" && wtype4S4 === "ほのお")
    ) {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 50) / 100);
      power4S4 = Math.floor((power4S4 * 50) / 100);
    }

    //! たいねつ	0.5	ほのおタイプの技を受けるとき威力が下がる。
    if (selectedTekiAbility === "たいねつ" && wtype1 === "ほのお") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 50) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 50) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 50) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 50) / 100);
      power1 = Math.floor((power1 * 50) / 100);
    }

    if (selectedTekiAbility === "たいねつ" && wtype2 === "ほのお") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 50) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 50) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 50) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 50) / 100);
      power2 = Math.floor((power2 * 50) / 100);
    }

    if (selectedTekiAbility === "たいねつ" && wtype3 === "ほのお") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 50) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 50) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 50) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 50) / 100);
      power3 = Math.floor((power3 * 50) / 100);
    }

    if (selectedTekiAbility === "たいねつ" && wtype4 === "ほのお") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 50) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 50) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 50) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 50) / 100);
      power4 = Math.floor((power4 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype1S1 === "ほのお") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 50) / 100);
      power1S1 = Math.floor((power1S1 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype2S1 === "ほのお") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 50) / 100);
      power2S1 = Math.floor((power2S1 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype3S1 === "ほのお") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 50) / 100);
      power3S1 = Math.floor((power3S1 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype4S1 === "ほのお") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 50) / 100);
      power4S1 = Math.floor((power4S1 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype1S2 === "ほのお") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 50) / 100);
      power1S2 = Math.floor((power1S2 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype2S2 === "ほのお") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 50) / 100);
      power2S2 = Math.floor((power2S2 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype3S2 === "ほのお") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 50) / 100);
      power3S2 = Math.floor((power3S2 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype4S2 === "ほのお") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 50) / 100);
      power4S2 = Math.floor((power4S2 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype1S3 === "ほのお") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 50) / 100);
      power1S3 = Math.floor((power1S3 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype2S3 === "ほのお") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 50) / 100);
      power2S3 = Math.floor((power2S3 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype3S3 === "ほのお") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 50) / 100);
      power3S3 = Math.floor((power3S3 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype4S3 === "ほのお") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 50) / 100);
      power4S3 = Math.floor((power4S3 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype1S4 === "ほのお") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 50) / 100);
      power1S4 = Math.floor((power1S4 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype2S4 === "ほのお") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 50) / 100);
      power2S4 = Math.floor((power2S4 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype3S4 === "ほのお") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 50) / 100);
      power3S4 = Math.floor((power3S4 * 50) / 100);
    }

    if (selectedAbility === "たいねつ" && wtype4S4 === "ほのお") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 50) / 100);
      power4S4 = Math.floor((power4S4 * 50) / 100);
    }

    //! かんそうはだ	1.25	ほのおタイプの技を受けるとき威力が上がる。
    if (selectedTekiAbility === "かんそうはだ" && wtype1 === "ほのお") {
      kisoS1Power1 = Math.floor((kisoS1Power1 * 125) / 100);
      kisoS2Power1 = Math.floor((kisoS2Power1 * 125) / 100);
      kisoS3Power1 = Math.floor((kisoS3Power1 * 125) / 100);
      kisoS4Power1 = Math.floor((kisoS4Power1 * 125) / 100);
      power1 = Math.floor((power1 * 125) / 100);
    }

    if (selectedTekiAbility === "かんそうはだ" && wtype2 === "ほのお") {
      kisoS1Power2 = Math.floor((kisoS1Power2 * 125) / 100);
      kisoS2Power2 = Math.floor((kisoS2Power2 * 125) / 100);
      kisoS3Power2 = Math.floor((kisoS3Power2 * 125) / 100);
      kisoS4Power2 = Math.floor((kisoS4Power2 * 125) / 100);
      power2 = Math.floor((power2 * 125) / 100);
    }

    if (selectedTekiAbility === "かんそうはだ" && wtype3 === "ほのお") {
      kisoS1Power3 = Math.floor((kisoS1Power3 * 125) / 100);
      kisoS2Power3 = Math.floor((kisoS2Power3 * 125) / 100);
      kisoS3Power3 = Math.floor((kisoS3Power3 * 125) / 100);
      kisoS4Power3 = Math.floor((kisoS4Power3 * 125) / 100);
      power3 = Math.floor((power3 * 125) / 100);
    }

    if (selectedTekiAbility === "かんそうはだ" && wtype4 === "ほのお") {
      kisoS1Power4 = Math.floor((kisoS1Power4 * 125) / 100);
      kisoS2Power4 = Math.floor((kisoS2Power4 * 125) / 100);
      kisoS3Power4 = Math.floor((kisoS3Power4 * 125) / 100);
      kisoS4Power4 = Math.floor((kisoS4Power4 * 125) / 100);
      power4 = Math.floor((power4 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S1 === "ほのお") {
      kisoPower1S1 = Math.floor((kisoPower1S1 * 125) / 100);
      power1S1 = Math.floor((power1S1 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S1 === "ほのお") {
      kisoPower2S1 = Math.floor((kisoPower2S1 * 125) / 100);
      power2S1 = Math.floor((power2S1 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S1 === "ほのお") {
      kisoPower3S1 = Math.floor((kisoPower3S1 * 125) / 100);
      power3S1 = Math.floor((power3S1 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S1 === "ほのお") {
      kisoPower4S1 = Math.floor((kisoPower4S1 * 125) / 100);
      power4S1 = Math.floor((power4S1 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S2 === "ほのお") {
      kisoPower1S2 = Math.floor((kisoPower1S2 * 125) / 100);
      power1S2 = Math.floor((power1S2 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S2 === "ほのお") {
      kisoPower2S2 = Math.floor((kisoPower2S2 * 125) / 100);
      power2S2 = Math.floor((power2S2 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S2 === "ほのお") {
      kisoPower3S2 = Math.floor((kisoPower3S2 * 125) / 100);
      power3S2 = Math.floor((power3S2 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S2 === "ほのお") {
      kisoPower4S2 = Math.floor((kisoPower4S2 * 125) / 100);
      power4S2 = Math.floor((power4S2 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S3 === "ほのお") {
      kisoPower1S3 = Math.floor((kisoPower1S3 * 125) / 100);
      power1S3 = Math.floor((power1S3 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S3 === "ほのお") {
      kisoPower2S3 = Math.floor((kisoPower2S3 * 125) / 100);
      power2S3 = Math.floor((power2S3 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S3 === "ほのお") {
      kisoPower3S3 = Math.floor((kisoPower3S3 * 125) / 100);
      power3S3 = Math.floor((power3S3 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S3 === "ほのお") {
      kisoPower4S3 = Math.floor((kisoPower4S3 * 125) / 100);
      power4S3 = Math.floor((power4S3 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S4 === "ほのお") {
      kisoPower1S4 = Math.floor((kisoPower1S4 * 125) / 100);
      power1S4 = Math.floor((power1S4 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S4 === "ほのお") {
      kisoPower2S4 = Math.floor((kisoPower2S4 * 125) / 100);
      power2S4 = Math.floor((power2S4 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S4 === "ほのお") {
      kisoPower3S4 = Math.floor((kisoPower3S4 * 125) / 100);
      power3S4 = Math.floor((power3S4 * 125) / 100);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S4 === "ほのお") {
      kisoPower4S4 = Math.floor((kisoPower4S4 * 125) / 100);
      power4S4 = Math.floor((power4S4 * 125) / 100);
    }

    //! かんそうはだ	水無効
    if (selectedTekiAbility === "かんそうはだ" && wtype1 === "みず") {
      kisoS1Power1 = Math.floor(kisoS1Power1 * 0);
      kisoS2Power1 = Math.floor(kisoS2Power1 * 0);
      kisoS3Power1 = Math.floor(kisoS3Power1 * 0);
      kisoS4Power1 = Math.floor(kisoS4Power1 * 0);
      power1 = Math.floor(power1 * 0);
    }

    if (selectedTekiAbility === "かんそうはだ" && wtype2 === "みず") {
      kisoS1Power2 = Math.floor(kisoS1Power2 * 0);
      kisoS2Power2 = Math.floor(kisoS2Power2 * 0);
      kisoS3Power2 = Math.floor(kisoS3Power2 * 0);
      kisoS4Power2 = Math.floor(kisoS4Power2 * 0);
      power2 = Math.floor(power2 * 0);
    }

    if (selectedTekiAbility === "かんそうはだ" && wtype3 === "みず") {
      kisoS1Power3 = Math.floor(kisoS1Power3 * 0);
      kisoS2Power3 = Math.floor(kisoS2Power3 * 0);
      kisoS3Power3 = Math.floor(kisoS3Power3 * 0);
      kisoS4Power3 = Math.floor(kisoS4Power3 * 0);
      power3 = Math.floor(power3 * 0);
    }

    if (selectedTekiAbility === "かんそうはだ" && wtype4 === "みず") {
      kisoS1Power4 = Math.floor(kisoS1Power4 * 0);
      kisoS2Power4 = Math.floor(kisoS2Power4 * 0);
      kisoS3Power4 = Math.floor(kisoS3Power4 * 0);
      kisoS4Power4 = Math.floor(kisoS4Power4 * 0);
      power4 = Math.floor(power4 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S1 === "みず") {
      kisoPower1S1 = Math.floor(kisoPower1S1 * 0);
      power1S1 = Math.floor(power1S1 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S1 === "みず") {
      kisoPower2S1 = Math.floor(kisoPower2S1 * 0);
      power2S1 = Math.floor(power2S1 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S1 === "みず") {
      kisoPower3S1 = Math.floor(kisoPower3S1 * 0);
      power3S1 = Math.floor(power3S1 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S1 === "みず") {
      kisoPower4S1 = Math.floor(kisoPower4S1 * 0);
      power4S1 = Math.floor(power4S1 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S2 === "みず") {
      kisoPower1S2 = Math.floor(kisoPower1S2 * 0);
      power1S2 = Math.floor(power1S2 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S2 === "みず") {
      kisoPower2S2 = Math.floor(kisoPower2S2 * 0);
      power2S2 = Math.floor(power2S2 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S2 === "みず") {
      kisoPower3S2 = Math.floor(kisoPower3S2 * 0);
      power3S2 = Math.floor(power3S2 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S2 === "みず") {
      kisoPower4S2 = Math.floor(kisoPower4S2 * 0);
      power4S2 = Math.floor(power4S2 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S3 === "みず") {
      kisoPower1S3 = Math.floor(kisoPower1S3 * 0);
      power1S3 = Math.floor(power1S3 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S3 === "みず") {
      kisoPower2S3 = Math.floor(kisoPower2S3 * 0);
      power2S3 = Math.floor(power2S3 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S3 === "みず") {
      kisoPower3S3 = Math.floor(kisoPower3S3 * 0);
      power3S3 = Math.floor(power3S3 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S3 === "みず") {
      kisoPower4S3 = Math.floor(kisoPower4S3 * 0);
      power4S3 = Math.floor(power4S3 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype1S4 === "みず") {
      kisoPower1S4 = Math.floor(kisoPower1S4 * 0);
      power1S4 = Math.floor(power1S4 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype2S4 === "みず") {
      kisoPower2S4 = Math.floor(kisoPower2S4 * 0);
      power2S4 = Math.floor(power2S4 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype3S4 === "みず") {
      kisoPower3S4 = Math.floor(kisoPower3S4 * 0);
      power3S4 = Math.floor(power3S4 * 0);
    }

    if (selectedAbility === "かんそうはだ" && wtype4S4 === "みず") {
      kisoPower4S4 = Math.floor(kisoPower4S4 * 0);
      power4S4 = Math.floor(power4S4 * 0);
    }

    //! ふゆう	地面無効
    if (selectedTekiAbility === "ふゆう" && wtype1 === "じめん") {
      kisoS1Power1 = Math.floor(kisoS1Power1 * 0);
      kisoS2Power1 = Math.floor(kisoS2Power1 * 0);
      kisoS3Power1 = Math.floor(kisoS3Power1 * 0);
      kisoS4Power1 = Math.floor(kisoS4Power1 * 0);
      power1 = Math.floor(power1 * 0);
    }

    if (selectedTekiAbility === "ふゆう" && wtype2 === "じめん") {
      kisoS1Power2 = Math.floor(kisoS1Power2 * 0);
      kisoS2Power2 = Math.floor(kisoS2Power2 * 0);
      kisoS3Power2 = Math.floor(kisoS3Power2 * 0);
      kisoS4Power2 = Math.floor(kisoS4Power2 * 0);
      power2 = Math.floor(power2 * 0);
    }

    if (selectedTekiAbility === "ふゆう" && wtype3 === "じめん") {
      kisoS1Power3 = Math.floor(kisoS1Power3 * 0);
      kisoS2Power3 = Math.floor(kisoS2Power3 * 0);
      kisoS3Power3 = Math.floor(kisoS3Power3 * 0);
      kisoS4Power3 = Math.floor(kisoS4Power3 * 0);
      power3 = Math.floor(power3 * 0);
    }

    if (selectedTekiAbility === "ふゆう" && wtype4 === "じめん") {
      kisoS1Power4 = Math.floor(kisoS1Power4 * 0);
      kisoS2Power4 = Math.floor(kisoS2Power4 * 0);
      kisoS3Power4 = Math.floor(kisoS3Power4 * 0);
      kisoS4Power4 = Math.floor(kisoS4Power4 * 0);
      power4 = Math.floor(power4 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype1S1 === "じめん") {
      kisoPower1S1 = Math.floor(kisoPower1S1 * 0);
      power1S1 = Math.floor(power1S1 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype2S1 === "じめん") {
      kisoPower2S1 = Math.floor(kisoPower2S1 * 0);
      power2S1 = Math.floor(power2S1 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype3S1 === "じめん") {
      kisoPower3S1 = Math.floor(kisoPower3S1 * 0);
      power3S1 = Math.floor(power3S1 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype4S1 === "じめん") {
      kisoPower4S1 = Math.floor(kisoPower4S1 * 0);
      power4S1 = Math.floor(power4S1 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype1S2 === "じめん") {
      kisoPower1S2 = Math.floor(kisoPower1S2 * 0);
      power1S2 = Math.floor(power1S2 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype2S2 === "じめん") {
      kisoPower2S2 = Math.floor(kisoPower2S2 * 0);
      power2S2 = Math.floor(power2S2 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype3S2 === "じめん") {
      kisoPower3S2 = Math.floor(kisoPower3S2 * 0);
      power3S2 = Math.floor(power3S2 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype4S2 === "じめん") {
      kisoPower4S2 = Math.floor(kisoPower4S2 * 0);
      power4S2 = Math.floor(power4S2 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype1S3 === "じめん") {
      kisoPower1S3 = Math.floor(kisoPower1S3 * 0);
      power1S3 = Math.floor(power1S3 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype2S3 === "じめん") {
      kisoPower2S3 = Math.floor(kisoPower2S3 * 0);
      power2S3 = Math.floor(power2S3 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype3S3 === "じめん") {
      kisoPower3S3 = Math.floor(kisoPower3S3 * 0);
      power3S3 = Math.floor(power3S3 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype4S3 === "じめん") {
      kisoPower4S3 = Math.floor(kisoPower4S3 * 0);
      power4S3 = Math.floor(power4S3 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype1S4 === "じめん") {
      kisoPower1S4 = Math.floor(kisoPower1S4 * 0);
      power1S4 = Math.floor(power1S4 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype2S4 === "じめん") {
      kisoPower2S4 = Math.floor(kisoPower2S4 * 0);
      power2S4 = Math.floor(power2S4 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype3S4 === "じめん") {
      kisoPower3S4 = Math.floor(kisoPower3S4 * 0);
      power3S4 = Math.floor(power3S4 * 0);
    }

    if (selectedAbility === "ふゆう" && wtype4S4 === "じめん") {
      kisoPower4S4 = Math.floor(kisoPower4S4 * 0);
      power4S4 = Math.floor(power4S4 * 0);
    }

    //! もらいび	ほのお無効
    if (selectedTekiAbility === "もらいび" && wtype1 === "ほのお") {
      kisoS1Power1 = Math.floor(kisoS1Power1 * 0);
      kisoS2Power1 = Math.floor(kisoS2Power1 * 0);
      kisoS3Power1 = Math.floor(kisoS3Power1 * 0);
      kisoS4Power1 = Math.floor(kisoS4Power1 * 0);
      power1 = Math.floor(power1 * 0);
    }

    if (selectedTekiAbility === "もらいび" && wtype2 === "ほのお") {
      kisoS1Power2 = Math.floor(kisoS1Power2 * 0);
      kisoS2Power2 = Math.floor(kisoS2Power2 * 0);
      kisoS3Power2 = Math.floor(kisoS3Power2 * 0);
      kisoS4Power2 = Math.floor(kisoS4Power2 * 0);
      power2 = Math.floor(power2 * 0);
    }

    if (selectedTekiAbility === "もらいび" && wtype3 === "ほのお") {
      kisoS1Power3 = Math.floor(kisoS1Power3 * 0);
      kisoS2Power3 = Math.floor(kisoS2Power3 * 0);
      kisoS3Power3 = Math.floor(kisoS3Power3 * 0);
      kisoS4Power3 = Math.floor(kisoS4Power3 * 0);
      power3 = Math.floor(power3 * 0);
    }

    if (selectedTekiAbility === "もらいび" && wtype4 === "ほのお") {
      kisoS1Power4 = Math.floor(kisoS1Power4 * 0);
      kisoS2Power4 = Math.floor(kisoS2Power4 * 0);
      kisoS3Power4 = Math.floor(kisoS3Power4 * 0);
      kisoS4Power4 = Math.floor(kisoS4Power4 * 0);
      power4 = Math.floor(power4 * 0);
    }

    if (selectedAbility === "もらいび" && wtype1S1 === "ほのお") {
      kisoPower1S1 = Math.floor(kisoPower1S1 * 0);
      power1S1 = Math.floor(power1S1 * 0);
    }

    if (selectedAbility === "もらいび" && wtype2S1 === "ほのお") {
      kisoPower2S1 = Math.floor(kisoPower2S1 * 0);
      power2S1 = Math.floor(power2S1 * 0);
    }

    if (selectedAbility === "もらいび" && wtype3S1 === "ほのお") {
      kisoPower3S1 = Math.floor(kisoPower3S1 * 0);
      power3S1 = Math.floor(power3S1 * 0);
    }

    if (selectedAbility === "もらいび" && wtype4S1 === "ほのお") {
      kisoPower4S1 = Math.floor(kisoPower4S1 * 0);
      power4S1 = Math.floor(power4S1 * 0);
    }

    if (selectedAbility === "もらいび" && wtype1S2 === "ほのお") {
      kisoPower1S2 = Math.floor(kisoPower1S2 * 0);
      power1S2 = Math.floor(power1S2 * 0);
    }

    if (selectedAbility === "もらいび" && wtype2S2 === "ほのお") {
      kisoPower2S2 = Math.floor(kisoPower2S2 * 0);
      power2S2 = Math.floor(power2S2 * 0);
    }

    if (selectedAbility === "もらいび" && wtype3S2 === "ほのお") {
      kisoPower3S2 = Math.floor(kisoPower3S2 * 0);
      power3S2 = Math.floor(power3S2 * 0);
    }

    if (selectedAbility === "もらいび" && wtype4S2 === "ほのお") {
      kisoPower4S2 = Math.floor(kisoPower4S2 * 0);
      power4S2 = Math.floor(power4S2 * 0);
    }

    if (selectedAbility === "もらいび" && wtype1S3 === "ほのお") {
      kisoPower1S3 = Math.floor(kisoPower1S3 * 0);
      power1S3 = Math.floor(power1S3 * 0);
    }

    if (selectedAbility === "もらいび" && wtype2S3 === "ほのお") {
      kisoPower2S3 = Math.floor(kisoPower2S3 * 0);
      power2S3 = Math.floor(power2S3 * 0);
    }

    if (selectedAbility === "もらいび" && wtype3S3 === "ほのお") {
      kisoPower3S3 = Math.floor(kisoPower3S3 * 0);
      power3S3 = Math.floor(power3S3 * 0);
    }

    if (selectedAbility === "もらいび" && wtype4S3 === "ほのお") {
      kisoPower4S3 = Math.floor(kisoPower4S3 * 0);
      power4S3 = Math.floor(power4S3 * 0);
    }

    if (selectedAbility === "もらいび" && wtype1S4 === "ほのお") {
      kisoPower1S4 = Math.floor(kisoPower1S4 * 0);
      power1S4 = Math.floor(power1S4 * 0);
    }

    if (selectedAbility === "もらいび" && wtype2S4 === "ほのお") {
      kisoPower2S4 = Math.floor(kisoPower2S4 * 0);
      power2S4 = Math.floor(power2S4 * 0);
    }

    if (selectedAbility === "もらいび" && wtype3S4 === "ほのお") {
      kisoPower3S4 = Math.floor(kisoPower3S4 * 0);
      power3S4 = Math.floor(power3S4 * 0);
    }

    if (selectedAbility === "もらいび" && wtype4S4 === "ほのお") {
      kisoPower4S4 = Math.floor(kisoPower4S4 * 0);
      power4S4 = Math.floor(power4S4 * 0);
    }

    //自分の使うポケモンの4つの技
    const calc2P1 = calc1 * power1; //自分ポケ技1例外補正なし威力
    const calc2P2 = calc1 * power2; //自分ポケ技2例外補正なし威力
    const calc2P3 = calc1 * power3; //自分ポケ技3例外補正なし威力
    const calc2P4 = calc1 * power4; //自分ポケ技4例外補正なし威力

    //敵ポケ１の型が使う4つの技
    const calc2P1S1 = calc1 * power1S1; //敵ポケ１技1例外補正なし威力
    const calc2P2S1 = calc1 * power2S1; //敵ポケ１技2例外補正なし威力
    const calc2P3S1 = calc1 * power3S1; //敵ポケ１技3例外補正なし威力
    const calc2P4S1 = calc1 * power4S1; //敵ポケ１技4例外補正なし威力

    //敵ポケ2の型が使う4つの技
    const calc2P1S2 = calc1 * power1S2; //敵ポケ2技1例外補正なし威力
    const calc2P2S2 = calc1 * power2S2; //敵ポケ2技2例外補正なし威力
    const calc2P3S2 = calc1 * power3S2; //敵ポケ2技3例外補正なし威力
    const calc2P4S2 = calc1 * power4S2; //敵ポケ2技4例外補正なし威力

    //敵ポケ3の型が使う4つの技
    const calc2P1S3 = calc1 * power1S3; //敵ポケ3技1例外補正なし威力
    const calc2P2S3 = calc1 * power2S3; //敵ポケ3技2例外補正なし威力
    const calc2P3S3 = calc1 * power3S3; //敵ポケ3技3例外補正なし威力
    const calc2P4S3 = calc1 * power4S3; //敵ポケ3技4例外補正なし威力

    //敵ポケ4の型が使う4つの技
    const calc2P1S4 = calc1 * power1S4; //敵ポケ4技1例外補正なし威力
    const calc2P2S4 = calc1 * power2S4; //敵ポケ4技2例外補正なし威力
    const calc2P3S4 = calc1 * power3S4; //敵ポケ4技3例外補正なし威力
    const calc2P4S4 = calc1 * power4S4; //敵ポケ4技4例外補正なし威力

    const calc2KS1Power1 = calc1 * kisoS1Power1; //自分ポケ技1が敵型1への威力
    const calc2KS1Power2 = calc1 * kisoS1Power2; //自分ポケ技2が敵型1への威力
    const calc2KS1Power3 = calc1 * kisoS1Power3; //自分ポケ技3が敵型1への威力
    const calc2KS1Power4 = calc1 * kisoS1Power4; //自分ポケ技4が敵型1への威力

    const calc2KS2Power1 = calc1 * kisoS2Power1; //自分ポケ技1が敵型2への威力
    const calc2KS2Power2 = calc1 * kisoS2Power2; //自分ポケ技2が敵型2への威力
    const calc2KS2Power3 = calc1 * kisoS2Power3; //自分ポケ技3が敵型2への威力
    const calc2KS2Power4 = calc1 * kisoS2Power4; //自分ポケ技4が敵型2への威力

    const calc2KS3Power1 = calc1 * kisoS3Power1; //自分ポケ技1が敵型3への威力
    const calc2KS3Power2 = calc1 * kisoS3Power2; //自分ポケ技2が敵型3への威力
    const calc2KS3Power3 = calc1 * kisoS3Power3; //自分ポケ技3が敵型3への威力
    const calc2KS3Power4 = calc1 * kisoS3Power4; //自分ポケ技4が敵型3への威力

    const calc2KS4Power1 = calc1 * kisoS4Power1; //自分ポケ技1が敵型4への威力
    const calc2KS4Power2 = calc1 * kisoS4Power2; //自分ポケ技2が敵型4への威力
    const calc2KS4Power3 = calc1 * kisoS4Power3; //自分ポケ技3が敵型4への威力
    const calc2KS4Power4 = calc1 * kisoS4Power4; //自分ポケ技4が敵型4への威力

    const calc2KPower1S1 = calc1 * kisoPower1S1; //敵1ポケ技1威力
    const calc2KPower2S1 = calc1 * kisoPower2S1; //敵1ポケ技2威力
    const calc2KPower3S1 = calc1 * kisoPower3S1; //敵1ポケ技3威力
    const calc2KPower4S1 = calc1 * kisoPower4S1; //敵1ポケ技4威力

    const calc2KPower1S2 = calc1 * kisoPower1S2; //敵2ポケ技1威力
    const calc2KPower2S2 = calc1 * kisoPower2S2; //敵2ポケ技2威力
    const calc2KPower3S2 = calc1 * kisoPower3S2; //敵2ポケ技3威力
    const calc2KPower4S2 = calc1 * kisoPower4S2; //敵2ポケ技4威力

    const calc2KPower1S3 = calc1 * kisoPower1S3; //敵3ポケ技1威力
    const calc2KPower2S3 = calc1 * kisoPower2S3; //敵3ポケ技2威力
    const calc2KPower3S3 = calc1 * kisoPower3S3; //敵3ポケ技3威力
    const calc2KPower4S3 = calc1 * kisoPower4S3; //敵3ポケ技4威力

    const calc2KPower1S4 = calc1 * kisoPower1S4; //敵4ポケ技1威力
    const calc2KPower2S4 = calc1 * kisoPower2S4; //敵4ポケ技2威力
    const calc2KPower3S4 = calc1 * kisoPower3S4; //敵4ポケ技3威力
    const calc2KPower4S4 = calc1 * kisoPower4S4; //敵4ポケ技4威力

    // ↓((calc2×[A/BorC/D])/50×Ma+2)

    let PhysicalMyATekiB1 = mypokeStatusARanked / tekipokeStatusBS1Ranked; //自分A/敵型1B(物理)
    let PhysicalMyATekiB2 = mypokeStatusARanked / tekipokeStatusBS2Ranked; //自分A/敵型2B(物理)
    let PhysicalMyATekiB3 = mypokeStatusARanked / tekipokeStatusBS3Ranked; //自分A/敵型3B(物理)
    let PhysicalMyATekiB4 = mypokeStatusARanked / tekipokeStatusBS4Ranked; //自分A/敵型4B(物理)

    // myC1つ TekiD4つ
    let SpecialMyCTekiD1 = mypokeStatusCRanked / tekipokeStatusDS1Ranked; //自分C/敵型1D(特殊)
    let SpecialMyCTekiD2 = mypokeStatusCRanked / tekipokeStatusDS2Ranked; //自分C/敵型2D(特殊)
    let SpecialMyCTekiD3 = mypokeStatusCRanked / tekipokeStatusDS3Ranked; //自分C/敵型3D(特殊)
    let SpecialMyCTekiD4 = mypokeStatusCRanked / tekipokeStatusDS4Ranked; //自分C/敵型4D(特殊)

    let calc3P1_S1; //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P1_S2; //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P1_S3; //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P1_S4; //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3P2_S1; //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2_S2; //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2_S3; //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2_S4; //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3P3_S1; //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3_S2; //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3_S3; //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3_S4; //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3P4_S1; //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4_S2; //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4_S3; //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4_S4; //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS1Power1; //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS1Power2; //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS1Power3; //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS1Power4; //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS2Power1; //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS2Power2; //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS2Power3; //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS2Power4; //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS3Power1; //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS3Power2; //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS3Power3; //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS3Power4; //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS4Power1; //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS4Power2; //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS4Power3; //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS4Power4; //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    let calc3P1S1; //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2S1; //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3S1; //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4S1; //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ2の型が使う4つの技
    let calc3P1S2; //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2S2; //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3S2; //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4S2; //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ3の型が使う4つの技
    let calc3P1S3; //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2S3; //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3S3; //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4S3; //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ4の型が使う4つの技
    let calc3P1S4; //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2S4; //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3S4; //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4S4; //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KPower1S1; //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower2S1; //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower3S1; //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower4S1; //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KPower1S2; //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower2S2; //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower3S2; //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower4S2; //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KPower1S3; //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower2S3; //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower3S3; //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower4S3; //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KPower1S4; //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower2S4; //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower3S4; //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KPower4S4; //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵型1へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S1 = Math.floor(calc2P1 * PhysicalMyATekiB1); //自分ポケ技1例外補正なし威力 * 自分A/敵型1B(物理)
      calc3KS1Power1 = Math.floor(calc2KS1Power1 * PhysicalMyATekiB1); //自分ポケ技1が敵型1への威力 * 自分A/敵型1B(物理)
    } else if (moveClass1 === "特殊") {
      calc3P1_S1 = Math.floor(calc2P1 * SpecialMyCTekiD1); //自分ポケ技1例外補正なし威力 * 自分C/敵型1D(特殊)
      calc3KS1Power1 = Math.floor(calc2KS1Power1 * SpecialMyCTekiD1); //自分ポケ技1が敵型1への威力 * 自分C/敵型1D(特殊)
    } else {
      calc3P1_S1 = Math.floor(calc2P1 * 0);
      calc3KS1Power1 = Math.floor(calc2KS1Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S1 = Math.floor(calc2P2 * PhysicalMyATekiB1);
      calc3KS1Power2 = Math.floor(calc2KS1Power2 * PhysicalMyATekiB1);
    } else if (moveClass2 === "特殊") {
      calc3P2_S1 = Math.floor(calc2P2 * SpecialMyCTekiD1);
      calc3KS1Power2 = Math.floor(calc2KS1Power2 * SpecialMyCTekiD1);
    } else {
      calc3P2_S1 = Math.floor(calc2P2 * 0);
      calc3KS1Power2 = Math.floor(calc2KS1Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S1 = Math.floor(calc2P3 * PhysicalMyATekiB1);
      calc3KS1Power3 = Math.floor(calc2KS1Power3 * PhysicalMyATekiB1);
    } else if (moveClass3 === "特殊") {
      calc3P3_S1 = Math.floor(calc2P3 * SpecialMyCTekiD1);
      calc3KS1Power3 = Math.floor(calc2KS1Power3 * SpecialMyCTekiD1);
    } else {
      calc3P3_S1 = Math.floor(calc2P3 * 0);
      calc3KS1Power3 = Math.floor(calc2KS1Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S1 = Math.floor(calc2P4 * PhysicalMyATekiB1);
      calc3KS1Power4 = Math.floor(calc2KS1Power4 * PhysicalMyATekiB1);
    } else if (moveClass4 === "特殊") {
      calc3P4_S1 = Math.floor(calc2P4 * SpecialMyCTekiD1);
      calc3KS1Power4 = Math.floor(calc2KS1Power4 * SpecialMyCTekiD1);
    } else {
      calc3P4_S1 = Math.floor(calc2P4 * 0);
      calc3KS1Power4 = Math.floor(calc2KS1Power4 * 0);
    }

    //敵型2へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S2 = Math.floor(calc2P1 * PhysicalMyATekiB2);
      calc3KS2Power1 = Math.floor(calc2KS2Power1 * PhysicalMyATekiB2);
    } else if (moveClass1 === "特殊") {
      calc3P1_S2 = Math.floor(calc2P1 * SpecialMyCTekiD2);
      calc3KS2Power1 = Math.floor(calc2KS2Power1 * SpecialMyCTekiD2);
    } else {
      calc3P1_S2 = Math.floor(calc2P1 * 0);
      calc3KS2Power1 = Math.floor(calc2KS2Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S2 = Math.floor(calc2P2 * PhysicalMyATekiB2);
      calc3KS2Power2 = Math.floor(calc2KS2Power2 * PhysicalMyATekiB2);
    } else if (moveClass2 === "特殊") {
      calc3P2_S2 = Math.floor(calc2P2 * SpecialMyCTekiD2);
      calc3KS2Power2 = Math.floor(calc2KS2Power2 * SpecialMyCTekiD2);
    } else {
      calc3P2_S2 = Math.floor(calc2P2 * 0);
      calc3KS2Power2 = Math.floor(calc2KS2Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S2 = Math.floor(calc2P3 * PhysicalMyATekiB2);
      calc3KS2Power3 = Math.floor(calc2KS2Power3 * PhysicalMyATekiB2);
    } else if (moveClass3 === "特殊") {
      calc3P3_S2 = Math.floor(calc2P3 * SpecialMyCTekiD2);
      calc3KS2Power3 = Math.floor(calc2KS2Power3 * SpecialMyCTekiD2);
    } else {
      calc3P3_S2 = Math.floor(calc2P3 * 0);
      calc3KS2Power3 = Math.floor(calc2KS2Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S2 = Math.floor(calc2P4 * PhysicalMyATekiB2);
      calc3KS2Power4 = Math.floor(calc2KS2Power4 * PhysicalMyATekiB2);
    } else if (moveClass4 === "特殊") {
      calc3P4_S2 = Math.floor(calc2P4 * SpecialMyCTekiD2);
      calc3KS2Power4 = Math.floor(calc2KS2Power4 * SpecialMyCTekiD2);
    } else {
      calc3P4_S2 = Math.floor(calc2P4 * 0);
      calc3KS2Power4 = Math.floor(calc2KS2Power4 * 0);
    }

    //敵型3へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S3 = Math.floor(calc2P1 * PhysicalMyATekiB3);
      calc3KS3Power1 = Math.floor(calc2KS3Power1 * PhysicalMyATekiB3);
    } else if (moveClass1 === "特殊") {
      calc3P1_S3 = Math.floor(calc2P1 * SpecialMyCTekiD3);
      calc3KS3Power1 = Math.floor(calc2KS3Power1 * SpecialMyCTekiD3);
    } else {
      calc3P1_S3 = Math.floor(calc2P1 * 0);
      calc3KS3Power1 = Math.floor(calc2KS3Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S3 = Math.floor(calc2P2 * PhysicalMyATekiB3);
      calc3KS3Power2 = Math.floor(calc2KS3Power2 * PhysicalMyATekiB3);
    } else if (moveClass2 === "特殊") {
      calc3P2_S3 = Math.floor(calc2P2 * SpecialMyCTekiD3);
      calc3KS3Power2 = Math.floor(calc2KS3Power2 * SpecialMyCTekiD3);
    } else {
      calc3P2_S3 = Math.floor(calc2P2 * 0);
      calc3KS3Power2 = Math.floor(calc2KS3Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S3 = Math.floor(calc2P3 * PhysicalMyATekiB3);
      calc3KS3Power3 = Math.floor(calc2KS3Power3 * PhysicalMyATekiB3);
    } else if (moveClass3 === "特殊") {
      calc3P3_S3 = Math.floor(calc2P3 * SpecialMyCTekiD3);
      calc3KS3Power3 = Math.floor(calc2KS3Power3 * SpecialMyCTekiD3);
    } else {
      calc3P3_S3 = Math.floor(calc2P3 * 0);
      calc3KS3Power3 = Math.floor(calc2KS3Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S3 = Math.floor(calc2P4 * PhysicalMyATekiB3);
      calc3KS3Power4 = Math.floor(calc2KS3Power4 * PhysicalMyATekiB3);
    } else if (moveClass4 === "特殊") {
      calc3P4_S3 = Math.floor(calc2P4 * SpecialMyCTekiD3);
      calc3KS3Power4 = Math.floor(calc2KS3Power4 * SpecialMyCTekiD3);
    } else {
      calc3P4_S3 = Math.floor(calc2P4 * 0);
      calc3KS3Power4 = Math.floor(calc2KS3Power4 * 0);
    }

    //敵型4へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S4 = Math.floor(calc2P1 * PhysicalMyATekiB4);
      calc3KS4Power1 = Math.floor(calc2KS4Power1 * PhysicalMyATekiB4);
    } else if (moveClass1 === "特殊") {
      calc3P1_S4 = Math.floor(calc2P1 * SpecialMyCTekiD4);
      calc3KS4Power1 = Math.floor(calc2KS4Power1 * SpecialMyCTekiD4);
    } else {
      calc3P1_S4 = Math.floor(calc2P1 * 0);
      calc3KS4Power1 = Math.floor(calc2KS4Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S4 = Math.floor(calc2P2 * PhysicalMyATekiB4);
      calc3KS4Power2 = Math.floor(calc2KS4Power2 * PhysicalMyATekiB4);
    } else if (moveClass2 === "特殊") {
      calc3P2_S4 = Math.floor(calc2P2 * SpecialMyCTekiD4);
      calc3KS4Power2 = Math.floor(calc2KS4Power2 * SpecialMyCTekiD4);
    } else {
      calc3P2_S4 = Math.floor(calc2P2 * 0);
      calc3KS4Power2 = Math.floor(calc2KS4Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S4 = Math.floor(calc2P3 * PhysicalMyATekiB4);
      calc3KS4Power3 = Math.floor(calc2KS4Power3 * PhysicalMyATekiB4);
    } else if (moveClass3 === "特殊") {
      calc3P3_S4 = Math.floor(calc2P3 * SpecialMyCTekiD4);
      calc3KS4Power3 = Math.floor(calc2KS4Power3 * SpecialMyCTekiD4);
    } else {
      calc3P3_S4 = Math.floor(calc2P3 * 0);
      calc3KS4Power3 = Math.floor(calc2KS4Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S4 = Math.floor(calc2P4 * PhysicalMyATekiB4);
      calc3KS4Power4 = Math.floor(calc2KS4Power4 * PhysicalMyATekiB4);
    } else if (moveClass4 === "特殊") {
      calc3P4_S4 = Math.floor(calc2P4 * SpecialMyCTekiD4);
      calc3KS4Power4 = Math.floor(calc2KS4Power4 * SpecialMyCTekiD4);
    } else {
      calc3P4_S4 = Math.floor(calc2P4 * 0);
      calc3KS4Power4 = Math.floor(calc2KS4Power4 * 0);
    }

    // tekiA4つ myB1つ
    let PhysicalTekiA1MyB = tekipokeStatusAS1Ranked / mypokeStatusBRanked; //敵型1A/自分B(物理)
    let PhysicalTekiA2MyB = tekipokeStatusAS2Ranked / mypokeStatusBRanked; //敵型2A/自分B(物理)
    let PhysicalTekiA3MyB = tekipokeStatusAS3Ranked / mypokeStatusBRanked; //敵型3A/自分B(物理)
    let PhysicalTekiA4MyB = tekipokeStatusAS4Ranked / mypokeStatusBRanked; //敵型4A/自分B(物理)

    // tekiC4つ  mayD1つ
    let SpecialTekiC1MyD = tekipokeStatusCS1Ranked / mypokeStatusDRanked; //敵型1C/自分D(特殊)
    let SpecialTekiC2MyD = tekipokeStatusCS2Ranked / mypokeStatusDRanked; //敵型2C/自分D(特殊)
    let SpecialTekiC3MyD = tekipokeStatusCS3Ranked / mypokeStatusDRanked; //敵型3C/自分D(特殊)
    let SpecialTekiC4MyD = tekipokeStatusCS4Ranked / mypokeStatusDRanked; //敵型4C/自分D(特殊)

    //敵型1が攻撃
    // 技1
    if (moveClass1S1 === "物理") {
      calc3P1S1 = Math.floor(calc2P1S1 * PhysicalTekiA1MyB);
      calc3KPower1S1 = Math.floor(calc2KPower1S1 * PhysicalTekiA1MyB);
    } else if (moveClass1S1 === "特殊") {
      calc3P1S1 = Math.floor(calc2P1S1 * SpecialTekiC1MyD);
      calc3KPower1S1 = Math.floor(calc2KPower1S1 * SpecialTekiC1MyD);
    } else {
      calc3P1S1 = Math.floor(calc2P1S1 * 0);
      calc3KPower1S1 = Math.floor(calc2KPower1S1 * 0);
    }

    //技2
    if (moveClass2S1 === "物理") {
      calc3P2S1 = Math.floor(calc2P2S1 * PhysicalTekiA1MyB);
      calc3KPower2S1 = Math.floor(calc2KPower2S1 * PhysicalTekiA1MyB);
    } else if (moveClass2S1 === "特殊") {
      calc3P2S1 = Math.floor(calc2P2S1 * SpecialTekiC1MyD);
      calc3KPower2S1 = Math.floor(calc2KPower2S1 * SpecialTekiC1MyD);
    } else {
      calc3P2S1 = Math.floor(calc2P2S1 * 0);
      calc3KPower2S1 = Math.floor(calc2KPower2S1 * 0);
    }

    //技3
    if (moveClass3S1 === "物理") {
      calc3P3S1 = Math.floor(calc2P3S1 * PhysicalTekiA1MyB);
      calc3KPower3S1 = Math.floor(calc2KPower3S1 * PhysicalTekiA1MyB);
    } else if (moveClass3S1 === "特殊") {
      calc3P3S1 = Math.floor(calc2P3S1 * SpecialTekiC1MyD);
      calc3KPower3S1 = Math.floor(calc2KPower3S1 * SpecialTekiC1MyD);
    } else {
      calc3P3S1 = Math.floor(calc2P3S1 * 0);
      calc3KPower3S1 = Math.floor(calc2KPower3S1 * 0);
    }

    //技4
    if (moveClass4S1 === "物理") {
      calc3P4S1 = Math.floor(calc2P4S1 * PhysicalTekiA1MyB);
      calc3KPower4S1 = Math.floor(calc2KPower4S1 * PhysicalTekiA1MyB);
    } else if (moveClass4S1 === "特殊") {
      calc3P4S1 = Math.floor(calc2P4S1 * SpecialTekiC1MyD);
      calc3KPower4S1 = Math.floor(calc2KPower4S1 * SpecialTekiC1MyD);
    } else {
      calc3P4S1 = Math.floor(calc2P4S1 * 0);
      calc3KPower4S1 = Math.floor(calc2KPower4S1 * 0);
    }

    //敵型2が攻撃
    // 技1
    if (moveClass1S2 === "物理") {
      calc3P1S2 = Math.floor(calc2P1S2 * PhysicalTekiA2MyB);
      calc3KPower1S2 = Math.floor(calc2KPower1S2 * PhysicalTekiA2MyB);
    } else if (moveClass1S2 === "特殊") {
      calc3P1S2 = Math.floor(calc2P1S2 * SpecialTekiC2MyD);
      calc3KPower1S2 = Math.floor(calc2KPower1S2 * SpecialTekiC2MyD);
    } else {
      calc3P1S2 = Math.floor(calc2P1S2 * 0);
      calc3KPower1S2 = Math.floor(calc2KPower1S2 * 0);
    }

    //技2
    if (moveClass2S2 === "物理") {
      calc3P2S2 = Math.floor(calc2P2S2 * PhysicalTekiA2MyB);
      calc3KPower2S2 = Math.floor(calc2KPower2S2 * PhysicalTekiA2MyB);
    } else if (moveClass2S2 === "特殊") {
      calc3P2S2 = Math.floor(calc2P2S2 * SpecialTekiC2MyD);
      calc3KPower2S2 = Math.floor(calc2KPower2S2 * SpecialTekiC2MyD);
    } else {
      calc3P2S2 = Math.floor(calc2P2S2 * 0);
      calc3KPower2S2 = Math.floor(calc2KPower2S2 * 0);
    }

    //技3
    if (moveClass3S2 === "物理") {
      calc3P3S2 = Math.floor(calc2P3S2 * PhysicalTekiA2MyB);
      calc3KPower3S2 = Math.floor(calc2KPower3S2 * PhysicalTekiA2MyB);
    } else if (moveClass3S2 === "特殊") {
      calc3P3S2 = Math.floor(calc2P3S2 * SpecialTekiC2MyD);
      calc3KPower3S2 = Math.floor(calc2KPower3S2 * SpecialTekiC2MyD);
    } else {
      calc3P3S2 = Math.floor(calc2P3S2 * 0);
      calc3KPower3S2 = Math.floor(calc2KPower3S2 * 0);
    }

    //技4
    if (moveClass4S2 === "物理") {
      calc3P4S2 = Math.floor(calc2P4S2 * PhysicalTekiA2MyB);
      calc3KPower4S2 = Math.floor(calc2KPower4S2 * PhysicalTekiA2MyB);
    } else if (moveClass4S2 === "特殊") {
      calc3P4S2 = Math.floor(calc2P4S2 * SpecialTekiC2MyD);
      calc3KPower4S2 = Math.floor(calc2KPower4S2 * SpecialTekiC2MyD);
    } else {
      calc3P4S2 = Math.floor(calc2P4S2 * 0);
      calc3KPower4S2 = Math.floor(calc2KPower4S2 * 0);
    }

    //敵型3が攻撃
    // 技1
    if (moveClass1S3 === "物理") {
      calc3P1S3 = Math.floor(calc2P1S3 * PhysicalTekiA3MyB);
      calc3KPower1S3 = Math.floor(calc2KPower1S3 * PhysicalTekiA3MyB);
    } else if (moveClass1S3 === "特殊") {
      calc3P1S3 = Math.floor(calc2P1S3 * SpecialTekiC3MyD);
      calc3KPower1S3 = Math.floor(calc2KPower1S3 * SpecialTekiC3MyD);
    } else {
      calc3P1S3 = Math.floor(calc2P1S3 * 0);
      calc3KPower1S3 = Math.floor(calc2KPower1S3 * 0);
    }

    //技2
    if (moveClass2S3 === "物理") {
      calc3P2S3 = Math.floor(calc2P2S3 * PhysicalTekiA3MyB);
      calc3KPower2S3 = Math.floor(calc2KPower2S3 * PhysicalTekiA3MyB);
    } else if (moveClass2S3 === "特殊") {
      calc3P2S3 = Math.floor(calc2P2S3 * SpecialTekiC3MyD);
      calc3KPower2S3 = Math.floor(calc2KPower2S3 * SpecialTekiC3MyD);
    } else {
      calc3P2S3 = Math.floor(calc2P2S3 * 0);
      calc3KPower2S3 = Math.floor(calc2KPower2S3 * 0);
    }

    //技3
    if (moveClass3S3 === "物理") {
      calc3P3S3 = Math.floor(calc2P3S3 * PhysicalTekiA3MyB);
      calc3KPower3S3 = Math.floor(calc2KPower3S3 * PhysicalTekiA3MyB);
    } else if (moveClass3S3 === "特殊") {
      calc3P3S3 = Math.floor(calc2P3S3 * SpecialTekiC3MyD);
      calc3KPower3S3 = Math.floor(calc2KPower3S3 * SpecialTekiC3MyD);
    } else {
      calc3P3S3 = Math.floor(calc2P3S3 * 0);
      calc3KPower3S3 = Math.floor(calc2KPower3S3 * 0);
    }

    //技4
    if (moveClass4S3 === "物理") {
      calc3P4S3 = Math.floor(calc2P4S3 * PhysicalTekiA3MyB);
      calc3KPower4S3 = Math.floor(calc2KPower4S3 * PhysicalTekiA3MyB);
    } else if (moveClass4S3 === "特殊") {
      calc3P4S3 = Math.floor(calc2P4S3 * SpecialTekiC3MyD);
      calc3KPower4S3 = Math.floor(calc2KPower4S3 * SpecialTekiC3MyD);
    } else {
      calc3P4S3 = Math.floor(calc2P4S3 * 0);
      calc3KPower4S3 = Math.floor(calc2KPower4S3 * 0);
    }

    //敵型4が攻撃
    // 技1
    if (moveClass1S4 === "物理") {
      calc3P1S4 = Math.floor(calc2P1S4 * PhysicalTekiA4MyB);
      calc3KPower1S4 = Math.floor(calc2KPower1S4 * PhysicalTekiA4MyB);
    } else if (moveClass1S4 === "特殊") {
      calc3P1S4 = Math.floor(calc2P1S4 * SpecialTekiC4MyD);
      calc3KPower1S4 = Math.floor(calc2KPower1S4 * SpecialTekiC4MyD);
    } else {
      calc3P1S4 = Math.floor(calc2P1S4 * 0);
      calc3KPower1S4 = Math.floor(calc2KPower1S4 * 0);
    }

    //技2
    if (moveClass2S4 === "物理") {
      calc3P2S4 = Math.floor(calc2P2S4 * PhysicalTekiA4MyB);
      calc3KPower2S4 = Math.floor(calc2KPower2S4 * PhysicalTekiA4MyB);
    } else if (moveClass2S4 === "特殊") {
      calc3P2S4 = Math.floor(calc2P2S4 * SpecialTekiC4MyD);
      calc3KPower2S4 = Math.floor(calc2KPower2S4 * SpecialTekiC4MyD);
    } else {
      calc3P2S4 = Math.floor(calc2P2S4 * 0);
      calc3KPower2S4 = Math.floor(calc2KPower2S4 * 0);
    }

    //技3
    if (moveClass3S4 === "物理") {
      calc3P3S4 = Math.floor(calc2P3S4 * PhysicalTekiA4MyB);
      calc3KPower3S4 = Math.floor(calc2KPower3S4 * PhysicalTekiA4MyB);
    } else if (moveClass3S4 === "特殊") {
      calc3P3S4 = Math.floor(calc2P3S4 * SpecialTekiC4MyD);
      calc3KPower3S4 = Math.floor(calc2KPower3S4 * SpecialTekiC4MyD);
    } else {
      calc3P3S4 = Math.floor(calc2P3S4 * 0);
      calc3KPower3S4 = Math.floor(calc2KPower3S4 * 0);
    }

    //技4
    if (moveClass4S4 === "物理") {
      calc3P4S4 = Math.floor(calc2P4S4 * PhysicalTekiA4MyB);
      calc3KPower4S4 = Math.floor(calc2KPower4S4 * PhysicalTekiA4MyB);
    } else if (moveClass4S4 === "特殊") {
      calc3P4S4 = Math.floor(calc2P4S4 * SpecialTekiC4MyD);
      calc3KPower4S4 = Math.floor(calc2KPower4S4 * SpecialTekiC4MyD);
    } else {
      calc3P4S4 = Math.floor(calc2P4S4 * 0);
      calc3KPower4S4 = Math.floor(calc2KPower4S4 * 0);
    }

    /////////急所//////////
    let calc3P1_S1Critical; //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P1_S2Critical; //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P1_S3Critical; //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P1_S4Critical; //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3P2_S1Critical; //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2_S2Critical; //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2_S3Critical; //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P2_S4Critical; //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3P3_S1Critical; //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3_S2Critical; //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3_S3Critical; //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P3_S4Critical; //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3P4_S1Critical; //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4_S2Critical; //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4_S3Critical; //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc3P4_S4Critical; //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS1Power1Critical; //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS1Power2Critical; //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS1Power3Critical; //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS1Power4Critical; //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS2Power1Critical; //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS2Power2Critical; //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS2Power3Critical; //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS2Power4Critical; //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS3Power1Critical; //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS3Power2Critical; //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS3Power3Critical; //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS3Power4Critical; //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KS4Power1Critical; //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS4Power2Critical; //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS4Power3Critical; //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc3KS4Power4Critical; //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    let calc3P1S1Critical; //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P2S1Critical; //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P3S1Critical; //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    let calc3P4S1Critical; //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ2の型が使う4つの技
    let calc3P1S2Critical; //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P2S2Critical; //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P3S2Critical; //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P4S2Critical; //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ3の型が使う4つの技
    let calc3P1S3Critical; //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P2S3Critical; //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    let calc3P3S3Critical; //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P4S3Critical; //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ4の型が使う4つの技
    let calc3P1S4Critical; //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P2S4Critical; //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P3S4Critical; //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc3P4S4Critical; //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    let calc3KPower1S1Critical; //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower2S1Critical; //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower3S1Critical; //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower4S1Critical; //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    let calc3KPower1S2Critical; //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower2S2Critical; //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower3S2Critical; //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower4S2Critical; //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    let calc3KPower1S3Critical; //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower2S3Critical; //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower3S3Critical; //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower4S3Critical; //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    let calc3KPower1S4Critical; //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower2S4Critical; //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower3S4Critical; //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc3KPower4S4Critical; //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //急所 myA1 tekiB4つ
    let PhysicalMyATekiB1Critical = mypokeStatusARankedCritical / tekipokeStatusBS1RankedCritical;
    let PhysicalMyATekiB2Critical = mypokeStatusARankedCritical / tekipokeStatusBS2RankedCritical;
    let PhysicalMyATekiB3Critical = mypokeStatusARankedCritical / tekipokeStatusBS3RankedCritical;
    let PhysicalMyATekiB4Critical = mypokeStatusARankedCritical / tekipokeStatusBS4RankedCritical;

    //急所 myC1つ TekiD4つ
    let SpecialMyCTekiD1Critical = mypokeStatusCRankedCritical / tekipokeStatusDS1RankedCritical;
    let SpecialMyCTekiD2Critical = mypokeStatusCRankedCritical / tekipokeStatusDS2RankedCritical;
    let SpecialMyCTekiD3Critical = mypokeStatusCRankedCritical / tekipokeStatusDS3RankedCritical;
    let SpecialMyCTekiD4Critical = mypokeStatusCRankedCritical / tekipokeStatusDS4RankedCritical;

    //敵型1へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S1Critical = Math.floor(calc2P1 * PhysicalMyATekiB1Critical);
      calc3KS1Power1Critical = Math.floor(calc2KS1Power1 * PhysicalMyATekiB1Critical);
    } else if (moveClass1 === "特殊") {
      calc3P1_S1Critical = Math.floor(calc2P1 * SpecialMyCTekiD1Critical);
      calc3KS1Power1Critical = Math.floor(calc2KS1Power1 * SpecialMyCTekiD1Critical);
    } else {
      calc3P1_S1Critical = Math.floor(calc2P1 * 0);
      calc3KS1Power1Critical = Math.floor(calc2KS1Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S1Critical = Math.floor(calc2P2 * PhysicalMyATekiB1Critical);
      calc3KS1Power2Critical = Math.floor(calc2KS1Power2 * PhysicalMyATekiB1Critical);
    } else if (moveClass2 === "特殊") {
      calc3P2_S1Critical = Math.floor(calc2P2 * SpecialMyCTekiD1Critical);
      calc3KS1Power2Critical = Math.floor(calc2KS1Power2 * SpecialMyCTekiD1Critical);
    } else {
      calc3P2_S1Critical = Math.floor(calc2P2 * 0);
      calc3KS1Power2Critical = Math.floor(calc2KS1Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S1Critical = Math.floor(calc2P3 * PhysicalMyATekiB1Critical);
      calc3KS1Power3Critical = Math.floor(calc2KS1Power3 * PhysicalMyATekiB1Critical);
    } else if (moveClass3 === "特殊") {
      calc3P3_S1Critical = Math.floor(calc2P3 * SpecialMyCTekiD1Critical);
      calc3KS1Power3Critical = Math.floor(calc2KS1Power3 * SpecialMyCTekiD1Critical);
    } else {
      calc3P3_S1Critical = Math.floor(calc2P3 * 0);
      calc3KS1Power3Critical = Math.floor(calc2KS1Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S1Critical = Math.floor(calc2P4 * PhysicalMyATekiB1Critical);
      calc3KS1Power4Critical = Math.floor(calc2KS1Power4 * PhysicalMyATekiB1Critical);
    } else if (moveClass4 === "特殊") {
      calc3P4_S1Critical = Math.floor(calc2P4 * SpecialMyCTekiD1Critical);
      calc3KS1Power4Critical = Math.floor(calc2KS1Power4 * SpecialMyCTekiD1Critical);
    } else {
      calc3P4_S1Critical = Math.floor(calc2P4 * 0);
      calc3KS1Power4Critical = Math.floor(calc2KS1Power4 * 0);
    }

    //敵型2へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S2Critical = Math.floor(calc2P1 * PhysicalMyATekiB2Critical);
      calc3KS2Power1Critical = Math.floor(calc2KS2Power1 * PhysicalMyATekiB2Critical);
    } else if (moveClass1 === "特殊") {
      calc3P1_S2Critical = Math.floor(calc2P1 * SpecialMyCTekiD2Critical);
      calc3KS2Power1Critical = Math.floor(calc2KS2Power1 * SpecialMyCTekiD2Critical);
    } else {
      calc3P1_S2Critical = Math.floor(calc2P1 * 0);
      calc3KS2Power1Critical = Math.floor(calc2KS2Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S2Critical = Math.floor(calc2P2 * PhysicalMyATekiB2Critical);
      calc3KS2Power2Critical = Math.floor(calc2KS2Power2 * PhysicalMyATekiB2Critical);
    } else if (moveClass2 === "特殊") {
      calc3P2_S2Critical = Math.floor(calc2P2 * SpecialMyCTekiD2Critical);
      calc3KS2Power2Critical = Math.floor(calc2KS2Power2 * SpecialMyCTekiD2Critical);
    } else {
      calc3P2_S2Critical = Math.floor(calc2P2 * 0);
      calc3KS2Power2Critical = Math.floor(calc2KS2Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S2Critical = Math.floor(calc2P3 * PhysicalMyATekiB2Critical);
      calc3KS2Power3Critical = Math.floor(calc2KS2Power3 * PhysicalMyATekiB2Critical);
    } else if (moveClass3 === "特殊") {
      calc3P3_S2Critical = Math.floor(calc2P3 * SpecialMyCTekiD2Critical);
      calc3KS2Power3Critical = Math.floor(calc2KS2Power3 * SpecialMyCTekiD2Critical);
    } else {
      calc3P3_S2Critical = Math.floor(calc2P3 * 0);
      calc3KS2Power3Critical = Math.floor(calc2KS2Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S2Critical = Math.floor(calc2P4 * PhysicalMyATekiB2Critical);
      calc3KS2Power4Critical = Math.floor(calc2KS2Power4 * PhysicalMyATekiB2Critical);
    } else if (moveClass4 === "特殊") {
      calc3P4_S2Critical = Math.floor(calc2P4 * SpecialMyCTekiD2Critical);
      calc3KS2Power4Critical = Math.floor(calc2KS2Power4 * SpecialMyCTekiD2Critical);
    } else {
      calc3P4_S2Critical = Math.floor(calc2P4 * 0);
      calc3KS2Power4Critical = Math.floor(calc2KS2Power4 * 0);
    }

    //敵型3へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S3Critical = Math.floor(calc2P1 * PhysicalMyATekiB3Critical);
      calc3KS3Power1Critical = Math.floor(calc2KS3Power1 * PhysicalMyATekiB3Critical);
    } else if (moveClass1 === "特殊") {
      calc3P1_S3Critical = Math.floor(calc2P1 * SpecialMyCTekiD3Critical);
      calc3KS3Power1Critical = Math.floor(calc2KS3Power1 * SpecialMyCTekiD3Critical);
    } else {
      calc3P1_S3Critical = Math.floor(calc2P1 * 0);
      calc3KS3Power1Critical = Math.floor(calc2KS3Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S3Critical = Math.floor(calc2P2 * PhysicalMyATekiB3Critical);
      calc3KS3Power2Critical = Math.floor(calc2KS3Power2 * PhysicalMyATekiB3Critical);
    } else if (moveClass2 === "特殊") {
      calc3P2_S3Critical = Math.floor(calc2P2 * SpecialMyCTekiD3Critical);
      calc3KS3Power2Critical = Math.floor(calc2KS3Power2 * SpecialMyCTekiD3Critical);
    } else {
      calc3P2_S3Critical = Math.floor(calc2P2 * 0);
      calc3KS3Power2Critical = Math.floor(calc2KS3Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S3Critical = Math.floor(calc2P3 * PhysicalMyATekiB3Critical);
      calc3KS3Power3Critical = Math.floor(calc2KS3Power3 * PhysicalMyATekiB3Critical);
    } else if (moveClass3 === "特殊") {
      calc3P3_S3Critical = Math.floor(calc2P3 * SpecialMyCTekiD3Critical);
      calc3KS3Power3Critical = Math.floor(calc2KS3Power3 * SpecialMyCTekiD3Critical);
    } else {
      calc3P3_S3Critical = Math.floor(calc2P3 * 0);
      calc3KS3Power3Critical = Math.floor(calc2KS3Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S3Critical = Math.floor(calc2P4 * PhysicalMyATekiB3Critical);
      calc3KS3Power4Critical = Math.floor(calc2KS3Power4 * PhysicalMyATekiB3Critical);
    } else if (moveClass4 === "特殊") {
      calc3P4_S3Critical = Math.floor(calc2P4 * SpecialMyCTekiD3Critical);
      calc3KS3Power4Critical = Math.floor(calc2KS3Power4 * SpecialMyCTekiD3Critical);
    } else {
      calc3P4_S3Critical = Math.floor(calc2P4 * 0);
      calc3KS3Power4Critical = Math.floor(calc2KS3Power4 * 0);
    }

    //敵型4へ攻撃
    if (moveClass1 === "物理") {
      calc3P1_S4Critical = Math.floor(calc2P1 * PhysicalMyATekiB4Critical);
      calc3KS4Power1Critical = Math.floor(calc2KS4Power1 * PhysicalMyATekiB4Critical);
    } else if (moveClass1 === "特殊") {
      calc3P1_S4Critical = Math.floor(calc2P1 * SpecialMyCTekiD4Critical);
      calc3KS4Power1Critical = Math.floor(calc2KS4Power1 * SpecialMyCTekiD4Critical);
    } else {
      calc3P1_S4Critical = Math.floor(calc2P1 * 0);
      calc3KS4Power1Critical = Math.floor(calc2KS4Power1 * 0);
    }

    if (moveClass2 === "物理") {
      calc3P2_S4Critical = Math.floor(calc2P2 * PhysicalMyATekiB4Critical);
      calc3KS4Power2Critical = Math.floor(calc2KS4Power2 * PhysicalMyATekiB4Critical);
    } else if (moveClass2 === "特殊") {
      calc3P2_S4Critical = Math.floor(calc2P2 * SpecialMyCTekiD4Critical);
      calc3KS4Power2Critical = Math.floor(calc2KS4Power2 * SpecialMyCTekiD4Critical);
    } else {
      calc3P2_S4Critical = Math.floor(calc2P2 * 0);
      calc3KS4Power2Critical = Math.floor(calc2KS4Power2 * 0);
    }

    if (moveClass3 === "物理") {
      calc3P3_S4Critical = Math.floor(calc2P3 * PhysicalMyATekiB4Critical);
      calc3KS4Power3Critical = Math.floor(calc2KS4Power3 * PhysicalMyATekiB4Critical);
    } else if (moveClass3 === "特殊") {
      calc3P3_S4Critical = Math.floor(calc2P3 * SpecialMyCTekiD4Critical);
      calc3KS4Power3Critical = Math.floor(calc2KS4Power3 * SpecialMyCTekiD4Critical);
    } else {
      calc3P3_S4Critical = Math.floor(calc2P3 * 0);
      calc3KS4Power3Critical = Math.floor(calc2KS4Power3 * 0);
    }

    if (moveClass4 === "物理") {
      calc3P4_S4Critical = Math.floor(calc2P4 * PhysicalMyATekiB4Critical);
      calc3KS4Power4Critical = Math.floor(calc2KS4Power4 * PhysicalMyATekiB4Critical);
    } else if (moveClass4 === "特殊") {
      calc3P4_S4Critical = Math.floor(calc2P4 * SpecialMyCTekiD4Critical);
      calc3KS4Power4Critical = Math.floor(calc2KS4Power4 * SpecialMyCTekiD4Critical);
    } else {
      calc3P4_S4Critical = Math.floor(calc2P4 * 0);
      calc3KS4Power4Critical = Math.floor(calc2KS4Power4 * 0);
    }

    //急所 tekiA4つ myB1つ
    let PhysicalTekiA1MyBCritical = tekipokeStatusAS1RankedCritical / mypokeStatusBRankedCritical;
    let PhysicalTekiA2MyBCritical = tekipokeStatusAS2RankedCritical / mypokeStatusBRankedCritical;
    let PhysicalTekiA3MyBCritical = tekipokeStatusAS3RankedCritical / mypokeStatusBRankedCritical;
    let PhysicalTekiA4MyBCritical = tekipokeStatusAS4RankedCritical / mypokeStatusBRankedCritical;

    //急所 tekiC4つ  mayD1つ
    let SpecialTekiC1MyDCritical = tekipokeStatusCS1RankedCritical / mypokeStatusDRankedCritical;
    let SpecialTekiC2MyDCritical = tekipokeStatusCS2RankedCritical / mypokeStatusDRankedCritical;
    let SpecialTekiC3MyDCritical = tekipokeStatusCS3RankedCritical / mypokeStatusDRankedCritical;
    let SpecialTekiC4MyDCritical = tekipokeStatusCS4RankedCritical / mypokeStatusDRankedCritical;

    //敵型1が攻撃
    // 技1
    if (moveClass1S1 === "物理") {
      calc3P1S1Critical = Math.floor(calc2P1S1 * PhysicalTekiA1MyBCritical);
      calc3KPower1S1Critical = Math.floor(calc2KPower1S1 * PhysicalTekiA1MyBCritical);
    } else if (moveClass1S1 === "特殊") {
      calc3P1S1Critical = Math.floor(calc2P1S1 * SpecialTekiC1MyDCritical);
      calc3KPower1S1Critical = Math.floor(calc2KPower1S1 * SpecialTekiC1MyDCritical);
    } else {
      calc3P1S1Critical = Math.floor(calc2P1S1 * 0);
      calc3KPower1S1Critical = Math.floor(calc2KPower1S1 * 0);
    }

    //技2
    if (moveClass2S1 === "物理") {
      calc3P2S1Critical = Math.floor(calc2P2S1 * PhysicalTekiA1MyBCritical);
      calc3KPower2S1Critical = Math.floor(calc2KPower2S1 * PhysicalTekiA1MyBCritical);
    } else if (moveClass2S1 === "特殊") {
      calc3P2S1Critical = Math.floor(calc2P2S1 * SpecialTekiC1MyDCritical);
      calc3KPower2S1Critical = Math.floor(calc2KPower2S1 * SpecialTekiC1MyDCritical);
    } else {
      calc3P2S1Critical = Math.floor(calc2P2S1 * 0);
      calc3KPower2S1Critical = Math.floor(calc2KPower2S1 * 0);
    }

    //技3
    if (moveClass3S1 === "物理") {
      calc3P3S1Critical = Math.floor(calc2P3S1 * PhysicalTekiA1MyBCritical);
      calc3KPower3S1Critical = Math.floor(calc2KPower3S1 * PhysicalTekiA1MyBCritical);
    } else if (moveClass3S1 === "特殊") {
      calc3P3S1Critical = Math.floor(calc2P3S1 * SpecialTekiC1MyDCritical);
      calc3KPower3S1Critical = Math.floor(calc2KPower3S1 * SpecialTekiC1MyDCritical);
    } else {
      calc3P3S1Critical = Math.floor(calc2P3S1 * 0);
      calc3KPower3S1Critical = Math.floor(calc2KPower3S1 * 0);
    }

    //技4
    if (moveClass4S1 === "物理") {
      calc3P4S1Critical = Math.floor(calc2P4S1 * PhysicalTekiA1MyBCritical);
      calc3KPower4S1Critical = Math.floor(calc2KPower4S1 * PhysicalTekiA1MyBCritical);
    } else if (moveClass4S1 === "特殊") {
      calc3P4S1Critical = Math.floor(calc2P4S1 * SpecialTekiC1MyDCritical);
      calc3KPower4S1Critical = Math.floor(calc2KPower4S1 * SpecialTekiC1MyDCritical);
    } else {
      calc3P4S1Critical = Math.floor(calc2P4S1 * 0);
      calc3KPower4S1Critical = Math.floor(calc2KPower4S1 * 0);
    }

    //敵型2が攻撃
    // 技1
    if (moveClass1S2 === "物理") {
      calc3P1S2Critical = Math.floor(calc2P1S2 * PhysicalTekiA2MyBCritical);
      calc3KPower1S2Critical = Math.floor(calc2KPower1S2 * PhysicalTekiA2MyBCritical);
    } else if (moveClass1S2 === "特殊") {
      calc3P1S2Critical = Math.floor(calc2P1S2 * SpecialTekiC2MyDCritical);
      calc3KPower1S2Critical = Math.floor(calc2KPower1S2 * SpecialTekiC2MyDCritical);
    } else {
      calc3P1S2Critical = Math.floor(calc2P1S2 * 0);
      calc3KPower1S2Critical = Math.floor(calc2KPower1S2 * 0);
    }

    //技2
    if (moveClass2S2 === "物理") {
      calc3P2S2Critical = Math.floor(calc2P2S2 * PhysicalTekiA2MyBCritical);
      calc3KPower2S2Critical = Math.floor(calc2KPower2S2 * PhysicalTekiA2MyBCritical);
    } else if (moveClass2S2 === "特殊") {
      calc3P2S2Critical = Math.floor(calc2P2S2 * SpecialTekiC2MyDCritical);
      calc3KPower2S2Critical = Math.floor(calc2KPower2S2 * SpecialTekiC2MyDCritical);
    } else {
      calc3P2S2Critical = Math.floor(calc2P2S2 * 0);
      calc3KPower2S2Critical = Math.floor(calc2KPower2S2 * 0);
    }

    //技3
    if (moveClass3S2 === "物理") {
      calc3P3S2Critical = Math.floor(calc2P3S2 * PhysicalTekiA2MyBCritical);
      calc3KPower3S2Critical = Math.floor(calc2KPower3S2 * PhysicalTekiA2MyBCritical);
    } else if (moveClass3S2 === "特殊") {
      calc3P3S2Critical = Math.floor(calc2P3S2 * SpecialTekiC2MyDCritical);
      calc3KPower3S2Critical = Math.floor(calc2KPower3S2 * SpecialTekiC2MyDCritical);
    } else {
      calc3P3S2Critical = Math.floor(calc2P3S2 * 0);
      calc3KPower3S2Critical = Math.floor(calc2KPower3S2 * 0);
    }

    //技4
    if (moveClass4S2 === "物理") {
      calc3P4S2Critical = Math.floor(calc2P4S2 * PhysicalTekiA2MyBCritical);
      calc3KPower4S2Critical = Math.floor(calc2KPower4S2 * PhysicalTekiA2MyBCritical);
    } else if (moveClass4S2 === "特殊") {
      calc3P4S2Critical = Math.floor(calc2P4S2 * SpecialTekiC2MyDCritical);
      calc3KPower4S2Critical = Math.floor(calc2KPower4S2 * SpecialTekiC2MyDCritical);
    } else {
      calc3P4S2Critical = Math.floor(calc2P4S2 * 0);
      calc3KPower4S2Critical = Math.floor(calc2KPower4S2 * 0);
    }

    //敵型3が攻撃
    // 技1
    if (moveClass1S3 === "物理") {
      calc3P1S3Critical = Math.floor(calc2P1S3 * PhysicalTekiA3MyBCritical);
      calc3KPower1S3Critical = Math.floor(calc2KPower1S3 * PhysicalTekiA3MyBCritical);
    } else if (moveClass1S3 === "特殊") {
      calc3P1S3Critical = Math.floor(calc2P1S3 * SpecialTekiC3MyDCritical);
      calc3KPower1S3Critical = Math.floor(calc2KPower1S3 * SpecialTekiC3MyDCritical);
    } else {
      calc3P1S3Critical = Math.floor(calc2P1S3 * 0);
      calc3KPower1S3Critical = Math.floor(calc2KPower1S3 * 0);
    }

    //技2
    if (moveClass2S3 === "物理") {
      calc3P2S3Critical = Math.floor(calc2P2S3 * PhysicalTekiA3MyBCritical);
      calc3KPower2S3Critical = Math.floor(calc2KPower2S3 * PhysicalTekiA3MyBCritical);
    } else if (moveClass2S3 === "特殊") {
      calc3P2S3Critical = Math.floor(calc2P2S3 * SpecialTekiC3MyDCritical);
      calc3KPower2S3Critical = Math.floor(calc2KPower2S3 * SpecialTekiC3MyDCritical);
    } else {
      calc3P2S3Critical = Math.floor(calc2P2S3 * 0);
      calc3KPower2S3Critical = Math.floor(calc2KPower2S3 * 0);
    }

    //技3
    if (moveClass3S3 === "物理") {
      calc3P3S3Critical = Math.floor(calc2P3S3 * PhysicalTekiA3MyBCritical);
      calc3KPower3S3Critical = Math.floor(calc2KPower3S3 * PhysicalTekiA3MyBCritical);
    } else if (moveClass3S3 === "特殊") {
      calc3P3S3Critical = Math.floor(calc2P3S3 * SpecialTekiC3MyDCritical);
      calc3KPower3S3Critical = Math.floor(calc2KPower3S3 * SpecialTekiC3MyDCritical);
    } else {
      calc3P3S3Critical = Math.floor(calc2P3S3 * 0);
      calc3KPower3S3Critical = Math.floor(calc2KPower3S3 * 0);
    }

    //技4
    if (moveClass4S3 === "物理") {
      calc3P4S3Critical = Math.floor(calc2P4S3 * PhysicalTekiA3MyBCritical);
      calc3KPower4S3Critical = Math.floor(calc2KPower4S3 * PhysicalTekiA3MyBCritical);
    } else if (moveClass4S3 === "特殊") {
      calc3P4S3Critical = Math.floor(calc2P4S3 * SpecialTekiC3MyDCritical);
      calc3KPower4S3Critical = Math.floor(calc2KPower4S3 * SpecialTekiC3MyDCritical);
    } else {
      calc3P4S3Critical = Math.floor(calc2P4S3 * 0);
      calc3KPower4S3Critical = Math.floor(calc2KPower4S3 * 0);
    }

    //敵型4が攻撃
    // 技1
    if (moveClass1S4 === "物理") {
      calc3P1S4Critical = Math.floor(calc2P1S4 * PhysicalTekiA4MyBCritical);
      calc3KPower1S4Critical = Math.floor(calc2KPower1S4 * PhysicalTekiA4MyBCritical);
    } else if (moveClass1S4 === "特殊") {
      calc3P1S4Critical = Math.floor(calc2P1S4 * SpecialTekiC4MyDCritical);
      calc3KPower1S4Critical = Math.floor(calc2KPower1S4 * SpecialTekiC4MyDCritical);
    } else {
      calc3P1S4Critical = Math.floor(calc2P1S4 * 0);
      calc3KPower1S4Critical = Math.floor(calc2KPower1S4 * 0);
    }

    //技2
    if (moveClass2S4 === "物理") {
      calc3P2S4Critical = Math.floor(calc2P2S4 * PhysicalTekiA4MyBCritical);
      calc3KPower2S4Critical = Math.floor(calc2KPower2S4 * PhysicalTekiA4MyBCritical);
    } else if (moveClass2S4 === "特殊") {
      calc3P2S4Critical = Math.floor(calc2P2S4 * SpecialTekiC4MyDCritical);
      calc3KPower2S4Critical = Math.floor(calc2KPower2S4 * SpecialTekiC4MyDCritical);
    } else {
      calc3P2S4Critical = Math.floor(calc2P2S4 * 0);
      calc3KPower2S4Critical = Math.floor(calc2KPower2S4 * 0);
    }

    //技3
    if (moveClass3S4 === "物理") {
      calc3P3S4Critical = Math.floor(calc2P3S4 * PhysicalTekiA4MyBCritical);
      calc3KPower3S4Critical = Math.floor(calc2KPower3S4 * PhysicalTekiA4MyBCritical);
    } else if (moveClass3S4 === "特殊") {
      calc3P3S4Critical = Math.floor(calc2P3S4 * SpecialTekiC4MyDCritical);
      calc3KPower3S4Critical = Math.floor(calc2KPower3S4 * SpecialTekiC4MyDCritical);
    } else {
      calc3P3S4Critical = Math.floor(calc2P3S4 * 0);
      calc3KPower3S4Critical = Math.floor(calc2KPower3S4 * 0);
    }

    //技4
    if (moveClass4S4 === "物理") {
      calc3P4S4Critical = Math.floor(calc2P4S4 * PhysicalTekiA4MyBCritical);
      calc3KPower4S4Critical = Math.floor(calc2KPower4S4 * PhysicalTekiA4MyBCritical);
    } else if (moveClass4S4 === "特殊") {
      calc3P4S4Critical = Math.floor(calc2P4S4 * SpecialTekiC4MyDCritical);
      calc3KPower4S4Critical = Math.floor(calc2KPower4S4 * SpecialTekiC4MyDCritical);
    } else {
      calc3P4S4Critical = Math.floor(calc2P4S4 * 0);
      calc3KPower4S4Critical = Math.floor(calc2KPower4S4 * 0);
    }

    ///////////////////////calc3///////////////////////////////
    calc3P1_S1 = Math.floor(calc3P1_S1 / 50); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S2 = Math.floor(calc3P1_S2 / 50); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S3 = Math.floor(calc3P1_S3 / 50); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S4 = Math.floor(calc3P1_S4 / 50); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P2_S1 = Math.floor(calc3P2_S1 / 50); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S2 = Math.floor(calc3P2_S2 / 50); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S3 = Math.floor(calc3P2_S3 / 50); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S4 = Math.floor(calc3P2_S4 / 50); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P3_S1 = Math.floor(calc3P3_S1 / 50); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S2 = Math.floor(calc3P3_S2 / 50); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S3 = Math.floor(calc3P3_S3 / 50); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S4 = Math.floor(calc3P3_S4 / 50); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P4_S1 = Math.floor(calc3P4_S1 / 50); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S2 = Math.floor(calc3P4_S2 / 50); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S3 = Math.floor(calc3P4_S3 / 50); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S4 = Math.floor(calc3P4_S4 / 50); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS1Power1 = Math.floor(calc3KS1Power1 / 50); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power2 = Math.floor(calc3KS1Power2 / 50); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power3 = Math.floor(calc3KS1Power3 / 50); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power4 = Math.floor(calc3KS1Power4 / 50); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS2Power1 = Math.floor(calc3KS2Power1 / 50); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power2 = Math.floor(calc3KS2Power2 / 50); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power3 = Math.floor(calc3KS2Power3 / 50); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power4 = Math.floor(calc3KS2Power4 / 50); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS3Power1 = Math.floor(calc3KS3Power1 / 50); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power2 = Math.floor(calc3KS3Power2 / 50); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power3 = Math.floor(calc3KS3Power3 / 50); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power4 = Math.floor(calc3KS3Power4 / 50); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS4Power1 = Math.floor(calc3KS4Power1 / 50); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power2 = Math.floor(calc3KS4Power2 / 50); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power3 = Math.floor(calc3KS4Power3 / 50); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power4 = Math.floor(calc3KS4Power4 / 50); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    calc3P1S1 = Math.floor(calc3P1S1 / 50); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S1 = Math.floor(calc3P2S1 / 50); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S1 = Math.floor(calc3P3S1 / 50); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S1 = Math.floor(calc3P4S1 / 50); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ2の型が使う4つの技
    calc3P1S2 = Math.floor(calc3P1S2 / 50); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S2 = Math.floor(calc3P2S2 / 50); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S2 = Math.floor(calc3P3S2 / 50); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S2 = Math.floor(calc3P4S2 / 50); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ3の型が使う4つの技
    calc3P1S3 = Math.floor(calc3P1S3 / 50); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S3 = Math.floor(calc3P2S3 / 50); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S3 = Math.floor(calc3P3S3 / 50); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S3 = Math.floor(calc3P4S3 / 50); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ4の型が使う4つの技
    calc3P1S4 = Math.floor(calc3P1S4 / 50); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S4 = Math.floor(calc3P2S4 / 50); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S4 = Math.floor(calc3P3S4 / 50); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S4 = Math.floor(calc3P4S4 / 50); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S1 = Math.floor(calc3KPower1S1 / 50); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S1 = Math.floor(calc3KPower2S1 / 50); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S1 = Math.floor(calc3KPower3S1 / 50); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S1 = Math.floor(calc3KPower4S1 / 50); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S2 = Math.floor(calc3KPower1S2 / 50); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S2 = Math.floor(calc3KPower2S2 / 50); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S2 = Math.floor(calc3KPower3S2 / 50); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S2 = Math.floor(calc3KPower4S2 / 50); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S3 = Math.floor(calc3KPower1S3 / 50); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S3 = Math.floor(calc3KPower2S3 / 50); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S3 = Math.floor(calc3KPower3S3 / 50); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S3 = Math.floor(calc3KPower4S3 / 50); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S4 = Math.floor(calc3KPower1S4 / 50); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S4 = Math.floor(calc3KPower2S4 / 50); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S4 = Math.floor(calc3KPower3S4 / 50); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S4 = Math.floor(calc3KPower4S4 / 50); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    /////////急所//////////
    calc3P1_S1Critical = Math.floor(calc3P1_S1Critical / 50); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S2Critical = Math.floor(calc3P1_S2Critical / 50); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S3Critical = Math.floor(calc3P1_S3Critical / 50); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S4Critical = Math.floor(calc3P1_S4Critical / 50); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P2_S1Critical = Math.floor(calc3P2_S1Critical / 50); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S2Critical = Math.floor(calc3P2_S2Critical / 50); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S3Critical = Math.floor(calc3P2_S3Critical / 50); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S4Critical = Math.floor(calc3P2_S4Critical / 50); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P3_S1Critical = Math.floor(calc3P3_S1Critical / 50); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S2Critical = Math.floor(calc3P3_S2Critical / 50); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S3Critical = Math.floor(calc3P3_S3Critical / 50); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S4Critical = Math.floor(calc3P3_S4Critical / 50); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P4_S1Critical = Math.floor(calc3P4_S1Critical / 50); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S2Critical = Math.floor(calc3P4_S2Critical / 50); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S3Critical = Math.floor(calc3P4_S3Critical / 50); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S4Critical = Math.floor(calc3P4_S4Critical / 50); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS1Power1Critical = Math.floor(calc3KS1Power1Critical / 50); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power2Critical = Math.floor(calc3KS1Power2Critical / 50); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power3Critical = Math.floor(calc3KS1Power3Critical / 50); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power4Critical = Math.floor(calc3KS1Power4Critical / 50); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS2Power1Critical = Math.floor(calc3KS2Power1Critical / 50); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power2Critical = Math.floor(calc3KS2Power2Critical / 50); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power3Critical = Math.floor(calc3KS2Power3Critical / 50); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power4Critical = Math.floor(calc3KS2Power4Critical / 50); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS3Power1Critical = Math.floor(calc3KS3Power1Critical / 50); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power2Critical = Math.floor(calc3KS3Power2Critical / 50); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power3Critical = Math.floor(calc3KS3Power3Critical / 50); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power4Critical = Math.floor(calc3KS3Power4Critical / 50); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS4Power1Critical = Math.floor(calc3KS4Power1Critical / 50); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power2Critical = Math.floor(calc3KS4Power2Critical / 50); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power3Critical = Math.floor(calc3KS4Power3Critical / 50); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power4Critical = Math.floor(calc3KS4Power4Critical / 50); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    calc3P1S1Critical = Math.floor(calc3P1S1Critical / 50); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S1Critical = Math.floor(calc3P2S1Critical / 50); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S1Critical = Math.floor(calc3P3S1Critical / 50); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3P4S1Critical = Math.floor(calc3P4S1Critical / 50); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ2の型が使う4つの技
    calc3P1S2Critical = Math.floor(calc3P1S2Critical / 50); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S2Critical = Math.floor(calc3P2S2Critical / 50); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S2Critical = Math.floor(calc3P3S2Critical / 50); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S2Critical = Math.floor(calc3P4S2Critical / 50); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ3の型が使う4つの技
    calc3P1S3Critical = Math.floor(calc3P1S3Critical / 50); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S3Critical = Math.floor(calc3P2S3Critical / 50); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3P3S3Critical = Math.floor(calc3P3S3Critical / 50); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S3Critical = Math.floor(calc3P4S3Critical / 50); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ4の型が使う4つの技
    calc3P1S4Critical = Math.floor(calc3P1S4Critical / 50); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S4Critical = Math.floor(calc3P2S4Critical / 50); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S4Critical = Math.floor(calc3P3S4Critical / 50); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S4Critical = Math.floor(calc3P4S4Critical / 50); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S1Critical = Math.floor(calc3KPower1S1Critical / 50); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S1Critical = Math.floor(calc3KPower2S1Critical / 50); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S1Critical = Math.floor(calc3KPower3S1Critical / 50); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S1Critical = Math.floor(calc3KPower4S1Critical / 50); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S2Critical = Math.floor(calc3KPower1S2Critical / 50); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S2Critical = Math.floor(calc3KPower2S2Critical / 50); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S2Critical = Math.floor(calc3KPower3S2Critical / 50); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S2Critical = Math.floor(calc3KPower4S2Critical / 50); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S3Critical = Math.floor(calc3KPower1S3Critical / 50); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S3Critical = Math.floor(calc3KPower2S3Critical / 50); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S3Critical = Math.floor(calc3KPower3S3Critical / 50); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S3Critical = Math.floor(calc3KPower4S3Critical / 50); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S4Critical = Math.floor(calc3KPower1S4Critical / 50); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S4Critical = Math.floor(calc3KPower2S4Critical / 50); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S4Critical = Math.floor(calc3KPower3S4Critical / 50); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S4Critical = Math.floor(calc3KPower4S4Critical / 50); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    // // チェックボックスの状態を取得
    // const myCheckbox = document.getElementById("myBurned").checked;
    // const tekiCheckbox = document.getElementById("tekiBurned").checked;
    // const myReflectCheckbox = document.getElementById("myReflect").checked;
    // const myLightScreenCheckbox = document.getElementById("myLightScreen").checked;
    // const tekiReflectCheckbox = document.getElementById("tekiReflect").checked;
    // const tekiLightScreenCheckbox = document.getElementById("tekiLightScreen").checked;

    // ×Ma=やけど補正×壁補正

    //敵型1へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100);
          calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100);
          calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100);
          calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100);
          calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100);
      }
    }

    //敵型2へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100);
          calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100);
          calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100);
          calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100);
          calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100);
      }
    }

    //敵型3へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100);
          calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100);
          calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100);
          calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100);
          calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100);
      }
    }

    //敵型4へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100);
          calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100);
          calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100);
          calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100);
          calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100);
      }
    }

    //敵型1が攻撃
    // 技1
    if (moveClass1S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100);
          calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100);
      }
    } else if (moveClass1S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100);
      }
    }

    //技2
    if (moveClass2S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100);
          calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100);
      }
    } else if (moveClass2S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100);
      }
    }

    //技3
    if (moveClass3S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100);
          calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100);
      }
    } else if (moveClass3S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100);
      }
    }

    //技4
    if (moveClass4S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100);
          calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100);
      }
    } else if (moveClass4S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100);
      }
    }

    //敵型2が攻撃
    // 技1
    if (moveClass1S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100);
          calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100);
      }
    } else if (moveClass1S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100);
      }
    }

    //技2
    if (moveClass2S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100);
          calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100);
      }
    } else if (moveClass2S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100);
      }
    }

    //技3
    if (moveClass3S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100);
          calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100);
      }
    } else if (moveClass3S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100);
      }
    }

    //技4
    if (moveClass4S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100);
          calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100);
      }
    } else if (moveClass4S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100);
      }
    }

    //敵型3が攻撃
    // 技1
    if (moveClass1S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100);
          calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100);
      }
    } else if (moveClass1S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100);
      }
    }

    //技2
    if (moveClass2S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100);
          calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100);
      }
    } else if (moveClass2S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100);
      }
    }

    //技3
    if (moveClass3S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100);
          calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100);
      }
    } else if (moveClass3S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100);
      }
    }

    //技4
    if (moveClass4S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100);
          calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100);
      }
    } else if (moveClass4S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100);
      }
    }

    //敵型4が攻撃
    // 技1
    if (moveClass1S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100);
          calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100);
      }
    } else if (moveClass1S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100);
      }
    }

    //技2
    if (moveClass2S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100);
          calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100);
      }
    } else if (moveClass2S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100);
      }
    }

    //技3
    if (moveClass3S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100);
          calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100);
      }
    } else if (moveClass3S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100);
      }
    }

    //技4
    if (moveClass4S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100);
          calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100);
      }
    } else if (moveClass4S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100);
      }
    }

    ///////////////////////急所////////////////////////////////
    //敵型1へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100);
          calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100);
          calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100);
          calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100);
          calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100);
      }
    }

    //敵型2へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100);
          calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100);
          calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100);
          calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100);
          calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100);
      }
    }

    //敵型3へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100);
          calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100);
          calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100);
          calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100);
          calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100);
      }
    }

    //敵型4へ攻撃
    if (moveClass1 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100);
          calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100);
      }
    } else if (moveClass1 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100);
      }
    }

    if (moveClass2 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100);
          calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100);
      }
    } else if (moveClass2 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100);
      }
    }

    if (moveClass3 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100);
          calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100);
      }
    } else if (moveClass3 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100);
      }
    }

    if (moveClass4 === "物理") {
      if (myCheckbox) {
        if (selectedAbility != "こんじょう") {
          calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100);
          calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100);
        }
      }
      if (myReflectCheckbox) {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100);
      }
    } else if (moveClass4 === "特殊") {
      if (myLightScreenCheckbox) {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100);
      }
    }

    //敵型1が攻撃
    // 技1
    if (moveClass1S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100);
          calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100);
      }
    } else if (moveClass1S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100);
      }
    }

    //技2
    if (moveClass2S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100);
          calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100);
      }
    } else if (moveClass2S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100);
      }
    }

    //技3
    if (moveClass3S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100);
          calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100);
      }
    } else if (moveClass3S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100);
      }
    }

    //技4
    if (moveClass4S1 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100);
          calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100);
      }
    } else if (moveClass4S1 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100);
      }
    }

    //敵型2が攻撃
    // 技1
    if (moveClass1S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100);
          calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100);
      }
    } else if (moveClass1S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100);
      }
    }

    //技2
    if (moveClass2S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100);
          calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100);
      }
    } else if (moveClass2S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100);
      }
    }

    //技3
    if (moveClass3S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100);
          calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100);
      }
    } else if (moveClass3S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100);
      }
    }

    //技4
    if (moveClass4S2 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100);
          calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100);
      }
    } else if (moveClass4S2 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100);
      }
    }

    //敵型3が攻撃
    // 技1
    if (moveClass1S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100);
          calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100);
      }
    } else if (moveClass1S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100);
      }
    }

    //技2
    if (moveClass2S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100);
          calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100);
      }
    } else if (moveClass2S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100);
      }
    }

    //技3
    if (moveClass3S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100);
          calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100);
      }
    } else if (moveClass3S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100);
      }
    }

    //技4
    if (moveClass4S3 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100);
          calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100);
      }
    } else if (moveClass4S3 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100);
      }
    }

    //敵型4が攻撃
    // 技1
    if (moveClass1S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100);
          calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100);
      }
    } else if (moveClass1S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100);
      }
    }

    //技2
    if (moveClass2S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100);
          calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100);
      }
    } else if (moveClass2S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100);
      }
    }

    //技3
    if (moveClass3S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100);
          calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100);
      }
    } else if (moveClass3S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100);
      }
    }

    //技4
    if (moveClass4S4 === "物理") {
      if (tekiCheckbox) {
        if (selectedTekiAbility != "こんじょう") {
          calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100);
          calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100);
        }
      }
      if (tekiReflectCheckbox) {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100);
      }
    } else if (moveClass4S4 === "特殊") {
      if (tekiLightScreenCheckbox) {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100);
      }
    }

    ////////////////////////////////////////天気補正×もらいび補正/////////////////////////////////////////////////////////
    //敵型1へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 150) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 150) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 150) / 100);
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 150) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 150) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 150) / 100);
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 150) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 150) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 150) / 100);
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 150) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 150) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 150) / 100);
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 150) / 100);
      }
    }

    //敵型2へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 150) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 150) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S2 = Math.floor((calc3P1_S2 * 150) / 100);
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 150) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 150) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S2 = Math.floor((calc3P2_S2 * 150) / 100);
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 150) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 150) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S2 = Math.floor((calc3P3_S2 * 150) / 100);
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 150) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 150) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S2 = Math.floor((calc3P4_S2 * 150) / 100);
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 150) / 100);
      }
    }

    //敵型3へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 150) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 150) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S3 = Math.floor((calc3P1_S3 * 150) / 100);
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 150) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 150) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S3 = Math.floor((calc3P2_S3 * 150) / 100);
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 150) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 150) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S3 = Math.floor((calc3P3_S3 * 150) / 100);
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 150) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 150) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S3 = Math.floor((calc3P4_S3 * 150) / 100);
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 150) / 100);
      }
    }

    //敵型4へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 150) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 150) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S4 = Math.floor((calc3P1_S4 * 150) / 100);
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 150) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 150) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S4 = Math.floor((calc3P2_S4 * 150) / 100);
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 150) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 150) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S4 = Math.floor((calc3P3_S4 * 150) / 100);
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 150) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 150) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S4 = Math.floor((calc3P4_S4 * 150) / 100);
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 150) / 100);
      }
    }

    //////////////////////////////////////////////////////////////////
    //敵型1が攻撃
    // 技1
    if (wtype1S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S1 = Math.floor((calc3P1S1 * 150) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100);
      }
    } else if (wtype1S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S1 = Math.floor((calc3P1S1 * 150) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S1 = Math.floor((calc3P1S1 * 150) / 100);
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 150) / 100);
      }
    }

    //技2
    if (wtype2S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S1 = Math.floor((calc3P2S1 * 150) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100);
      }
    } else if (wtype2S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S1 = Math.floor((calc3P2S1 * 150) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S1 = Math.floor((calc3P2S1 * 150) / 100);
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 150) / 100);
      }
    }

    //技3
    if (wtype3S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S1 = Math.floor((calc3P3S1 * 150) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100);
      }
    } else if (wtype3S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S1 = Math.floor((calc3P3S1 * 150) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S1 = Math.floor((calc3P3S1 * 150) / 100);
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 150) / 100);
      }
    }

    //技4
    if (wtype4S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S1 = Math.floor((calc3P4S1 * 150) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100);
      }
    } else if (wtype4S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S1 = Math.floor((calc3P4S1 * 150) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S1 = Math.floor((calc3P4S1 * 150) / 100);
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 150) / 100);
      }
    }
    //敵型2が攻撃
    // 技1
    if (wtype1S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S2 = Math.floor((calc3P1S2 * 150) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100);
      }
    } else if (wtype1S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S2 = Math.floor((calc3P1S2 * 150) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S2 = Math.floor((calc3P1S2 * 150) / 100);
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 150) / 100);
      }
    }
    //技2
    if (wtype2S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S2 = Math.floor((calc3P2S2 * 150) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100);
      }
    } else if (wtype2S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S2 = Math.floor((calc3P2S2 * 150) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S2 = Math.floor((calc3P2S2 * 150) / 100);
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 150) / 100);
      }
    }

    //技3
    if (wtype3S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S2 = Math.floor((calc3P3S2 * 150) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100);
      }
    } else if (wtype3S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S2 = Math.floor((calc3P3S2 * 150) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S2 = Math.floor((calc3P3S2 * 150) / 100);
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 150) / 100);
      }
    }

    //技4
    if (wtype4S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S2 = Math.floor((calc3P4S2 * 150) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100);
      }
    } else if (wtype4S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S2 = Math.floor((calc3P4S2 * 150) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S2 = Math.floor((calc3P4S2 * 150) / 100);
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 150) / 100);
      }
    }
    //敵型3が攻撃
    // 技1
    if (wtype1S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S3 = Math.floor((calc3P1S3 * 150) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100);
      }
    } else if (wtype1S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S3 = Math.floor((calc3P1S3 * 150) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S3 = Math.floor((calc3P1S3 * 150) / 100);
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 150) / 100);
      }
    }

    //技2
    if (wtype2S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S3 = Math.floor((calc3P2S3 * 150) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100);
      }
    } else if (wtype2S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S3 = Math.floor((calc3P2S3 * 150) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S3 = Math.floor((calc3P2S3 * 150) / 100);
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 150) / 100);
      }
    }

    //技3
    if (wtype3S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S3 = Math.floor((calc3P3S3 * 150) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100);
      }
    } else if (wtype3S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S3 = Math.floor((calc3P3S3 * 150) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S3 = Math.floor((calc3P3S3 * 150) / 100);
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 150) / 100);
      }
    }

    //技4
    if (wtype4S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S3 = Math.floor((calc3P4S3 * 150) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100);
      }
    } else if (wtype4S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S3 = Math.floor((calc3P4S3 * 150) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S3 = Math.floor((calc3P4S3 * 150) / 100);
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 150) / 100);
      }
    }
    //敵型4が攻撃
    // 技1
    if (wtype1S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S4 = Math.floor((calc3P1S4 * 150) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100);
      }
    } else if (wtype1S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S4 = Math.floor((calc3P1S4 * 150) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S4 = Math.floor((calc3P1S4 * 150) / 100);
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 150) / 100);
      }
    }

    //技2
    if (wtype2S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S4 = Math.floor((calc3P2S4 * 150) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100);
      }
    } else if (wtype2S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S4 = Math.floor((calc3P2S4 * 150) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S4 = Math.floor((calc3P2S4 * 150) / 100);
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 150) / 100);
      }
    }

    //技3
    if (wtype3S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S4 = Math.floor((calc3P3S4 * 150) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100);
      }
    } else if (wtype3S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S4 = Math.floor((calc3P3S4 * 150) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S4 = Math.floor((calc3P3S4 * 150) / 100);
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 150) / 100);
      }
    }

    //技4
    if (wtype4S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S4 = Math.floor((calc3P4S4 * 150) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100);
      }
    } else if (wtype4S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S4 = Math.floor((calc3P4S4 * 150) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S4 = Math.floor((calc3P4S4 * 150) / 100);
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 150) / 100);
      }
    }

    // Critical
    ////////////////////////急所/////////////////////////////////////////急所/////////////////
    ////////////////////////急所/////////////////////////////////////////急所/////////////////
    //敵型1へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 150) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 150) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 150) / 100);
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 150) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 150) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 150) / 100);
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 150) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 150) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 150) / 100);
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 150) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 150) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 150) / 100);
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 150) / 100);
      }
    }

    //敵型2へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 150) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 150) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 150) / 100);
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 150) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 150) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 150) / 100);
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 150) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 150) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 150) / 100);
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 150) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 150) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 150) / 100);
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 150) / 100);
      }
    }

    //敵型3へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 150) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 150) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 150) / 100);
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 150) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 150) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 150) / 100);
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 150) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 150) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 150) / 100);
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 150) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 150) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 150) / 100);
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 150) / 100);
      }
    }

    //敵型4へ攻撃
    if (wtype1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 150) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100);
      }
    } else if (wtype1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 150) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 150) / 100);
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 150) / 100);
      }
    }

    if (wtype2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 150) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100);
      }
    } else if (wtype2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 150) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 150) / 100);
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 150) / 100);
      }
    }

    if (wtype3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 150) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100);
      }
    } else if (wtype3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 150) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 150) / 100);
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 150) / 100);
      }
    }

    if (wtype4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 150) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100);
      }
    } else if (wtype4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 150) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100);
      }
      if (selectedAbility === "もらいび") {
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 150) / 100);
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 150) / 100);
      }
    }

    //////////////////////////////////////////////////////////////////
    //敵型1が攻撃
    // 技1
    if (wtype1S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 150) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100);
      }
    } else if (wtype1S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 150) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 150) / 100);
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 150) / 100);
      }
    }

    //技2
    if (wtype2S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 150) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100);
      }
    } else if (wtype2S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 150) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 150) / 100);
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 150) / 100);
      }
    }

    //技3
    if (wtype3S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 150) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100);
      }
    } else if (wtype3S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 150) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 150) / 100);
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 150) / 100);
      }
    }

    //技4
    if (wtype4S1 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 150) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100);
      }
    } else if (wtype4S1 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 150) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 150) / 100);
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 150) / 100);
      }
    }
    //敵型2が攻撃
    // 技1
    if (wtype1S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 150) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100);
      }
    } else if (wtype1S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 150) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 150) / 100);
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 150) / 100);
      }
    }
    //技2
    if (wtype2S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 150) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100);
      }
    } else if (wtype2S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 150) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 150) / 100);
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 150) / 100);
      }
    }

    //技3
    if (wtype3S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 150) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100);
      }
    } else if (wtype3S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 150) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 150) / 100);
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 150) / 100);
      }
    }

    //技4
    if (wtype4S2 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 150) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100);
      }
    } else if (wtype4S2 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 150) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 150) / 100);
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 150) / 100);
      }
    }
    //敵型3が攻撃
    // 技1
    if (wtype1S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 150) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100);
      }
    } else if (wtype1S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 150) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 150) / 100);
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 150) / 100);
      }
    }

    //技2
    if (wtype2S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 150) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100);
      }
    } else if (wtype2S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 150) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 150) / 100);
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 150) / 100);
      }
    }

    //技3
    if (wtype3S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 150) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100);
      }
    } else if (wtype3S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 150) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 150) / 100);
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 150) / 100);
      }
    }

    //技4
    if (wtype4S3 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 150) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100);
      }
    } else if (wtype4S3 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 150) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 150) / 100);
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 150) / 100);
      }
    }
    //敵型4が攻撃
    // 技1
    if (wtype1S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 150) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100);
      }
    } else if (wtype1S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 150) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 150) / 100);
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 150) / 100);
      }
    }

    //技2
    if (wtype2S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 150) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100);
      }
    } else if (wtype2S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 150) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 150) / 100);
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 150) / 100);
      }
    }

    //技3
    if (wtype3S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 150) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100);
      }
    } else if (wtype3S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 150) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 150) / 100);
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 150) / 100);
      }
    }

    //技4
    if (wtype4S4 === "みず") {
      if (selectedWhether === "おおあめ") {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 150) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 150) / 100);
      }
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100);
      }
    } else if (wtype4S4 === "ほのお") {
      if (selectedWhether === "ひざしがつよい") {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 150) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 150) / 100);
      }
      if (selectedWhether === "おおあめ") {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100);
      }
      if (selectedTekiAbility === "もらいび") {
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 150) / 100);
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 150) / 100);
      }
    }

    //////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2////////
    //////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2////////
    calc3P1_S1 = Math.floor(calc3P1_S1 + 2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S2 = Math.floor(calc3P1_S2 + 2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S3 = Math.floor(calc3P1_S3 + 2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S4 = Math.floor(calc3P1_S4 + 2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P2_S1 = Math.floor(calc3P2_S1 + 2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S2 = Math.floor(calc3P2_S2 + 2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S3 = Math.floor(calc3P2_S3 + 2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S4 = Math.floor(calc3P2_S4 + 2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P3_S1 = Math.floor(calc3P3_S1 + 2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S2 = Math.floor(calc3P3_S2 + 2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S3 = Math.floor(calc3P3_S3 + 2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S4 = Math.floor(calc3P3_S4 + 2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P4_S1 = Math.floor(calc3P4_S1 + 2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S2 = Math.floor(calc3P4_S2 + 2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S3 = Math.floor(calc3P4_S3 + 2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S4 = Math.floor(calc3P4_S4 + 2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS1Power1 = Math.floor(calc3KS1Power1 + 2); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power2 = Math.floor(calc3KS1Power2 + 2); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power3 = Math.floor(calc3KS1Power3 + 2); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power4 = Math.floor(calc3KS1Power4 + 2); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS2Power1 = Math.floor(calc3KS2Power1 + 2); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power2 = Math.floor(calc3KS2Power2 + 2); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power3 = Math.floor(calc3KS2Power3 + 2); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power4 = Math.floor(calc3KS2Power4 + 2); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS3Power1 = Math.floor(calc3KS3Power1 + 2); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power2 = Math.floor(calc3KS3Power2 + 2); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power3 = Math.floor(calc3KS3Power3 + 2); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power4 = Math.floor(calc3KS3Power4 + 2); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS4Power1 = Math.floor(calc3KS4Power1 + 2); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power2 = Math.floor(calc3KS4Power2 + 2); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power3 = Math.floor(calc3KS4Power3 + 2); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power4 = Math.floor(calc3KS4Power4 + 2); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    calc3P1S1 = Math.floor(calc3P1S1 + 2); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S1 = Math.floor(calc3P2S1 + 2); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S1 = Math.floor(calc3P3S1 + 2); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S1 = Math.floor(calc3P4S1 + 2); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ2の型が使う4つの技
    calc3P1S2 = Math.floor(calc3P1S2 + 2); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S2 = Math.floor(calc3P2S2 + 2); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S2 = Math.floor(calc3P3S2 + 2); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S2 = Math.floor(calc3P4S2 + 2); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ3の型が使う4つの技
    calc3P1S3 = Math.floor(calc3P1S3 + 2); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S3 = Math.floor(calc3P2S3 + 2); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S3 = Math.floor(calc3P3S3 + 2); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S3 = Math.floor(calc3P4S3 + 2); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ4の型が使う4つの技
    calc3P1S4 = Math.floor(calc3P1S4 + 2); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S4 = Math.floor(calc3P2S4 + 2); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S4 = Math.floor(calc3P3S4 + 2); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S4 = Math.floor(calc3P4S4 + 2); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S1 = Math.floor(calc3KPower1S1 + 2); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S1 = Math.floor(calc3KPower2S1 + 2); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S1 = Math.floor(calc3KPower3S1 + 2); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S1 = Math.floor(calc3KPower4S1 + 2); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S2 = Math.floor(calc3KPower1S2 + 2); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S2 = Math.floor(calc3KPower2S2 + 2); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S2 = Math.floor(calc3KPower3S2 + 2); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S2 = Math.floor(calc3KPower4S2 + 2); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S3 = Math.floor(calc3KPower1S3 + 2); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S3 = Math.floor(calc3KPower2S3 + 2); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S3 = Math.floor(calc3KPower3S3 + 2); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S3 = Math.floor(calc3KPower4S3 + 2); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S4 = Math.floor(calc3KPower1S4 + 2); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S4 = Math.floor(calc3KPower2S4 + 2); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S4 = Math.floor(calc3KPower3S4 + 2); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S4 = Math.floor(calc3KPower4S4 + 2); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    /////////急所//////////
    calc3P1_S1Critical = Math.floor(calc3P1_S1Critical + 2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S2Critical = Math.floor(calc3P1_S2Critical + 2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S3Critical = Math.floor(calc3P1_S3Critical + 2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S4Critical = Math.floor(calc3P1_S4Critical + 2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P2_S1Critical = Math.floor(calc3P2_S1Critical + 2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S2Critical = Math.floor(calc3P2_S2Critical + 2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S3Critical = Math.floor(calc3P2_S3Critical + 2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S4Critical = Math.floor(calc3P2_S4Critical + 2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P3_S1Critical = Math.floor(calc3P3_S1Critical + 2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S2Critical = Math.floor(calc3P3_S2Critical + 2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S3Critical = Math.floor(calc3P3_S3Critical + 2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S4Critical = Math.floor(calc3P3_S4Critical + 2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P4_S1Critical = Math.floor(calc3P4_S1Critical + 2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S2Critical = Math.floor(calc3P4_S2Critical + 2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S3Critical = Math.floor(calc3P4_S3Critical + 2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S4Critical = Math.floor(calc3P4_S4Critical + 2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS1Power1Critical = Math.floor(calc3KS1Power1Critical + 2); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power2Critical = Math.floor(calc3KS1Power2Critical + 2); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power3Critical = Math.floor(calc3KS1Power3Critical + 2); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power4Critical = Math.floor(calc3KS1Power4Critical + 2); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS2Power1Critical = Math.floor(calc3KS2Power1Critical + 2); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power2Critical = Math.floor(calc3KS2Power2Critical + 2); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power3Critical = Math.floor(calc3KS2Power3Critical + 2); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power4Critical = Math.floor(calc3KS2Power4Critical + 2); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS3Power1Critical = Math.floor(calc3KS3Power1Critical + 2); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power2Critical = Math.floor(calc3KS3Power2Critical + 2); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power3Critical = Math.floor(calc3KS3Power3Critical + 2); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power4Critical = Math.floor(calc3KS3Power4Critical + 2); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS4Power1Critical = Math.floor(calc3KS4Power1Critical + 2); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power2Critical = Math.floor(calc3KS4Power2Critical + 2); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power3Critical = Math.floor(calc3KS4Power3Critical + 2); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power4Critical = Math.floor(calc3KS4Power4Critical + 2); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    calc3P1S1Critical = Math.floor(calc3P1S1Critical + 2); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S1Critical = Math.floor(calc3P2S1Critical + 2); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S1Critical = Math.floor(calc3P3S1Critical + 2); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3P4S1Critical = Math.floor(calc3P4S1Critical + 2); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ2の型が使う4つの技
    calc3P1S2Critical = Math.floor(calc3P1S2Critical + 2); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S2Critical = Math.floor(calc3P2S2Critical + 2); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S2Critical = Math.floor(calc3P3S2Critical + 2); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S2Critical = Math.floor(calc3P4S2Critical + 2); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ3の型が使う4つの技
    calc3P1S3Critical = Math.floor(calc3P1S3Critical + 2); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S3Critical = Math.floor(calc3P2S3Critical + 2); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3P3S3Critical = Math.floor(calc3P3S3Critical + 2); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S3Critical = Math.floor(calc3P4S3Critical + 2); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ4の型が使う4つの技
    calc3P1S4Critical = Math.floor(calc3P1S4Critical + 2); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S4Critical = Math.floor(calc3P2S4Critical + 2); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S4Critical = Math.floor(calc3P3S4Critical + 2); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S4Critical = Math.floor(calc3P4S4Critical + 2); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S1Critical = Math.floor(calc3KPower1S1Critical + 2); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S1Critical = Math.floor(calc3KPower2S1Critical + 2); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S1Critical = Math.floor(calc3KPower3S1Critical + 2); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S1Critical = Math.floor(calc3KPower4S1Critical + 2); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S2Critical = Math.floor(calc3KPower1S2Critical + 2); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S2Critical = Math.floor(calc3KPower2S2Critical + 2); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S2Critical = Math.floor(calc3KPower3S2Critical + 2); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S2Critical = Math.floor(calc3KPower4S2Critical + 2); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S3Critical = Math.floor(calc3KPower1S3Critical + 2); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S3Critical = Math.floor(calc3KPower2S3Critical + 2); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S3Critical = Math.floor(calc3KPower3S3Critical + 2); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S3Critical = Math.floor(calc3KPower4S3Critical + 2); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S4Critical = Math.floor(calc3KPower1S4Critical + 2); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S4Critical = Math.floor(calc3KPower2S4Critical + 2); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S4Critical = Math.floor(calc3KPower3S4Critical + 2); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S4Critical = Math.floor(calc3KPower4S4Critical + 2); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    ////急所補正////////急所補正////////急所補正////////急所補正////////急所補正////
    ////急所補正////////急所補正////////急所補正////////急所補正////////急所補正////
    calc3P1_S1Critical = Math.floor(calc3P1_S1Critical * 2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S2Critical = Math.floor(calc3P1_S2Critical * 2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S3Critical = Math.floor(calc3P1_S3Critical * 2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1_S4Critical = Math.floor(calc3P1_S4Critical * 2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P2_S1Critical = Math.floor(calc3P2_S1Critical * 2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S2Critical = Math.floor(calc3P2_S2Critical * 2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S3Critical = Math.floor(calc3P2_S3Critical * 2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2_S4Critical = Math.floor(calc3P2_S4Critical * 2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P3_S1Critical = Math.floor(calc3P3_S1Critical * 2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S2Critical = Math.floor(calc3P3_S2Critical * 2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S3Critical = Math.floor(calc3P3_S3Critical * 2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3_S4Critical = Math.floor(calc3P3_S4Critical * 2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3P4_S1Critical = Math.floor(calc3P4_S1Critical * 2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S2Critical = Math.floor(calc3P4_S2Critical * 2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S3Critical = Math.floor(calc3P4_S3Critical * 2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4_S4Critical = Math.floor(calc3P4_S4Critical * 2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS1Power1Critical = Math.floor(calc3KS1Power1Critical * 2); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power2Critical = Math.floor(calc3KS1Power2Critical * 2); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power3Critical = Math.floor(calc3KS1Power3Critical * 2); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS1Power4Critical = Math.floor(calc3KS1Power4Critical * 2); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS2Power1Critical = Math.floor(calc3KS2Power1Critical * 2); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power2Critical = Math.floor(calc3KS2Power2Critical * 2); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power3Critical = Math.floor(calc3KS2Power3Critical * 2); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS2Power4Critical = Math.floor(calc3KS2Power4Critical * 2); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS3Power1Critical = Math.floor(calc3KS3Power1Critical * 2); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power2Critical = Math.floor(calc3KS3Power2Critical * 2); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power3Critical = Math.floor(calc3KS3Power3Critical * 2); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS3Power4Critical = Math.floor(calc3KS3Power4Critical * 2); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    calc3KS4Power1Critical = Math.floor(calc3KS4Power1Critical * 2); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power2Critical = Math.floor(calc3KS4Power2Critical * 2); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power3Critical = Math.floor(calc3KS4Power3Critical * 2); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3KS4Power4Critical = Math.floor(calc3KS4Power4Critical * 2); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

    //敵ポケ１の型が使う4つの技
    calc3P1S1Critical = Math.floor(calc3P1S1Critical * 2); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S1Critical = Math.floor(calc3P2S1Critical * 2); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S1Critical = Math.floor(calc3P3S1Critical * 2); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3P4S1Critical = Math.floor(calc3P4S1Critical * 2); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ2の型が使う4つの技
    calc3P1S2Critical = Math.floor(calc3P1S2Critical * 2); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S2Critical = Math.floor(calc3P2S2Critical * 2); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S2Critical = Math.floor(calc3P3S2Critical * 2); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S2Critical = Math.floor(calc3P4S2Critical * 2); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ3の型が使う4つの技
    calc3P1S3Critical = Math.floor(calc3P1S3Critical * 2); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S3Critical = Math.floor(calc3P2S3Critical * 2); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3P3S3Critical = Math.floor(calc3P3S3Critical * 2); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S3Critical = Math.floor(calc3P4S3Critical * 2); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

    //敵ポケ4の型が使う4つの技
    calc3P1S4Critical = Math.floor(calc3P1S4Critical * 2); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P2S4Critical = Math.floor(calc3P2S4Critical * 2); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P3S4Critical = Math.floor(calc3P3S4Critical * 2); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3P4S4Critical = Math.floor(calc3P4S4Critical * 2); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

    calc3KPower1S1Critical = Math.floor(calc3KPower1S1Critical * 2); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S1Critical = Math.floor(calc3KPower2S1Critical * 2); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S1Critical = Math.floor(calc3KPower3S1Critical * 2); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S1Critical = Math.floor(calc3KPower4S1Critical * 2); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S2Critical = Math.floor(calc3KPower1S2Critical * 2); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S2Critical = Math.floor(calc3KPower2S2Critical * 2); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S2Critical = Math.floor(calc3KPower3S2Critical * 2); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S2Critical = Math.floor(calc3KPower4S2Critical * 2); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S3Critical = Math.floor(calc3KPower1S3Critical * 2); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S3Critical = Math.floor(calc3KPower2S3Critical * 2); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S3Critical = Math.floor(calc3KPower3S3Critical * 2); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S3Critical = Math.floor(calc3KPower4S3Critical * 2); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc3KPower1S4Critical = Math.floor(calc3KPower1S4Critical * 2); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S4Critical = Math.floor(calc3KPower2S4Critical * 2); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S4Critical = Math.floor(calc3KPower3S4Critical * 2); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S4Critical = Math.floor(calc3KPower4S4Critical * 2); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    ///////いのちのたまた////////////////いのちのたまた////////////////いのちのたまた/////////
    ///////いのちのたまた////////////////いのちのたまた////////////////いのちのたまた/////////
    if (myItem === "いのちのたま") {
      calc3P1_S1 = Math.floor((calc3P1_S1 * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P1_S2 = Math.floor((calc3P1_S2 * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P1_S3 = Math.floor((calc3P1_S3 * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P1_S4 = Math.floor((calc3P1_S4 * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3P2_S1 = Math.floor((calc3P2_S1 * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2_S2 = Math.floor((calc3P2_S2 * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2_S3 = Math.floor((calc3P2_S3 * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2_S4 = Math.floor((calc3P2_S4 * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3P3_S1 = Math.floor((calc3P3_S1 * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3_S2 = Math.floor((calc3P3_S2 * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3_S3 = Math.floor((calc3P3_S3 * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3_S4 = Math.floor((calc3P3_S4 * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3P4_S1 = Math.floor((calc3P4_S1 * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4_S2 = Math.floor((calc3P4_S2 * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4_S3 = Math.floor((calc3P4_S3 * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4_S4 = Math.floor((calc3P4_S4 * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS1Power1 = Math.floor((calc3KS1Power1 * 130) / 100); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS1Power2 = Math.floor((calc3KS1Power2 * 130) / 100); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS1Power3 = Math.floor((calc3KS1Power3 * 130) / 100); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS1Power4 = Math.floor((calc3KS1Power4 * 130) / 100); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS2Power1 = Math.floor((calc3KS2Power1 * 130) / 100); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS2Power2 = Math.floor((calc3KS2Power2 * 130) / 100); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS2Power3 = Math.floor((calc3KS2Power3 * 130) / 100); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS2Power4 = Math.floor((calc3KS2Power4 * 130) / 100); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS3Power1 = Math.floor((calc3KS3Power1 * 130) / 100); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS3Power2 = Math.floor((calc3KS3Power2 * 130) / 100); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS3Power3 = Math.floor((calc3KS3Power3 * 130) / 100); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS3Power4 = Math.floor((calc3KS3Power4 * 130) / 100); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS4Power1 = Math.floor((calc3KS4Power1 * 130) / 100); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS4Power2 = Math.floor((calc3KS4Power2 * 130) / 100); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS4Power3 = Math.floor((calc3KS4Power3 * 130) / 100); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS4Power4 = Math.floor((calc3KS4Power4 * 130) / 100); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      /////////急所//////////
      calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 130) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 130) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 130) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 130) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 130) / 100); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 130) / 100); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 130) / 100); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 130) / 100); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 130) / 100); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 130) / 100); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 130) / 100); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 130) / 100); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 130) / 100); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 130) / 100); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 130) / 100); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 130) / 100); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 130) / 100); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 130) / 100); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 130) / 100); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 130) / 100); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    }

    if (tekiItem1 === "いのちのたま") {
      //敵ポケ１の型が使う4つの技
      calc3P1S1 = Math.floor((calc3P1S1 * 130) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2S1 = Math.floor((calc3P2S1 * 130) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3S1 = Math.floor((calc3P3S1 * 130) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4S1 = Math.floor((calc3P4S1 * 130) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

      calc3KPower1S1 = Math.floor((calc3KPower1S1 * 130) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower2S1 = Math.floor((calc3KPower2S1 * 130) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower3S1 = Math.floor((calc3KPower3S1 * 130) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower4S1 = Math.floor((calc3KPower4S1 * 130) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      //敵ポケ１の型が使う4つの技
      calc3P1S1Critical = Math.floor((calc3P1S1Critical * 130) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P2S1Critical = Math.floor((calc3P2S1Critical * 130) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P3S1Critical = Math.floor((calc3P3S1Critical * 130) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
      calc3P4S1Critical = Math.floor((calc3P4S1Critical * 130) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

      calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 130) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 130) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 130) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 130) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    }

    if (tekiItem2 === "いのちのたま") {
      //敵ポケ2の型が使う4つの技
      calc3P1S2 = Math.floor((calc3P1S2 * 130) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2S2 = Math.floor((calc3P2S2 * 130) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3S2 = Math.floor((calc3P3S2 * 130) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4S2 = Math.floor((calc3P4S2 * 130) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

      calc3KPower1S2 = Math.floor((calc3KPower1S2 * 130) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower2S2 = Math.floor((calc3KPower2S2 * 130) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower3S2 = Math.floor((calc3KPower3S2 * 130) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower4S2 = Math.floor((calc3KPower4S2 * 130) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      //敵ポケ2の型が使う4つの技
      calc3P1S2Critical = Math.floor((calc3P1S2Critical * 130) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P2S2Critical = Math.floor((calc3P2S2Critical * 130) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P3S2Critical = Math.floor((calc3P3S2Critical * 130) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P4S2Critical = Math.floor((calc3P4S2Critical * 130) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

      calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 130) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 130) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 130) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 130) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    }

    if (tekiItem3 === "いのちのたま") {
      //敵ポケ3の型が使う4つの技
      calc3P1S3 = Math.floor((calc3P1S3 * 130) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2S3 = Math.floor((calc3P2S3 * 130) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3S3 = Math.floor((calc3P3S3 * 130) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4S3 = Math.floor((calc3P4S3 * 130) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

      calc3KPower1S3 = Math.floor((calc3KPower1S3 * 130) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower2S3 = Math.floor((calc3KPower2S3 * 130) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower3S3 = Math.floor((calc3KPower3S3 * 130) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower4S3 = Math.floor((calc3KPower4S3 * 130) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      //敵ポケ3の型が使う4つの技
      calc3P1S3Critical = Math.floor((calc3P1S3Critical * 130) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P2S3Critical = Math.floor((calc3P2S3Critical * 130) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
      calc3P3S3Critical = Math.floor((calc3P3S3Critical * 130) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P4S3Critical = Math.floor((calc3P4S3Critical * 130) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)

      calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 130) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 130) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 130) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 130) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    }
    if (tekiItem4 === "いのちのたま") {
      //敵ポケ4の型が使う4つの技
      calc3P1S4 = Math.floor((calc3P1S4 * 130) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P2S4 = Math.floor((calc3P2S4 * 130) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P3S4 = Math.floor((calc3P3S4 * 130) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
      calc3P4S4 = Math.floor((calc3P4S4 * 130) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

      calc3KPower1S4 = Math.floor((calc3KPower1S4 * 130) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower2S4 = Math.floor((calc3KPower2S4 * 130) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower3S4 = Math.floor((calc3KPower3S4 * 130) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
      calc3KPower4S4 = Math.floor((calc3KPower4S4 * 130) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○

      //敵ポケ4の型が使う4つの技
      calc3P1S4Critical = Math.floor((calc3P1S4Critical * 130) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P2S4Critical = Math.floor((calc3P2S4Critical * 130) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P3S4Critical = Math.floor((calc3P3S4Critical * 130) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
      calc3P4S4Critical = Math.floor((calc3P4S4Critical * 130) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○

      calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 130) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 130) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 130) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 130) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    }

    //!calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)
    //!calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)calc4(乱数補正)

    //////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2////////
    //////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2//////////////+2////////
    let calc4P1_S1 = Math.floor((calc3P1_S1 * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    let calc4P1_S2 = Math.floor((calc3P1_S2 * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    let calc4P1_S3 = Math.floor((calc3P1_S3 * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    let calc4P1_S4 = Math.floor((calc3P1_S4 * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

    let calc4P2_S1 = Math.floor((calc3P2_S1 * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    let calc4P2_S2 = Math.floor((calc3P2_S2 * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    let calc4P2_S3 = Math.floor((calc3P2_S3 * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    let calc4P2_S4 = Math.floor((calc3P2_S4 * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

    let calc4P3_S1 = Math.floor((calc3P3_S1 * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    let calc4P3_S2 = Math.floor((calc3P3_S2 * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    let calc4P3_S3 = Math.floor((calc3P3_S3 * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    let calc4P3_S4 = Math.floor((calc3P3_S4 * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

    let calc4P4_S1 = Math.floor((calc3P4_S1 * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    let calc4P4_S2 = Math.floor((calc3P4_S2 * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    let calc4P4_S3 = Math.floor((calc3P4_S3 * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    let calc4P4_S4 = Math.floor((calc3P4_S4 * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    let calc4KS1Power1 = Math.floor((calc3KS1Power1 * 85) / 100); //自分ポケ技1が敵型1への（補正あり）威力
    let calc4KS1Power2 = Math.floor((calc3KS1Power2 * 85) / 100); //自分ポケ技2が敵型1への（補正あり）威力
    let calc4KS1Power3 = Math.floor((calc3KS1Power3 * 85) / 100); //自分ポケ技3が敵型1への（補正あり）威力
    let calc4KS1Power4 = Math.floor((calc3KS1Power4 * 85) / 100); //自分ポケ技4が敵型1への（補正あり）威力

    let calc4KS2Power1 = Math.floor((calc3KS2Power1 * 85) / 100); //自分ポケ技1が敵型2への（補正あり）威力
    let calc4KS2Power2 = Math.floor((calc3KS2Power2 * 85) / 100); //自分ポケ技2が敵型2への（補正あり）威力
    let calc4KS2Power3 = Math.floor((calc3KS2Power3 * 85) / 100); //自分ポケ技3が敵型2への（補正あり）威力
    let calc4KS2Power4 = Math.floor((calc3KS2Power4 * 85) / 100); //自分ポケ技4が敵型2への（補正あり）威力

    let calc4KS3Power1 = Math.floor((calc3KS3Power1 * 85) / 100); //自分ポケ技1が敵型3への（補正あり）威力
    let calc4KS3Power2 = Math.floor((calc3KS3Power2 * 85) / 100); //自分ポケ技2が敵型3への（補正あり）威力
    let calc4KS3Power3 = Math.floor((calc3KS3Power3 * 85) / 100); //自分ポケ技3が敵型3への（補正あり）威力
    let calc4KS3Power4 = Math.floor((calc3KS3Power4 * 85) / 100); //自分ポケ技4が敵型3への（補正あり）威力

    let calc4KS4Power1 = Math.floor((calc3KS4Power1 * 85) / 100); //自分ポケ技1が敵型4への（補正あり）威力
    let calc4KS4Power2 = Math.floor((calc3KS4Power2 * 85) / 100); //自分ポケ技2が敵型4への（補正あり）威力
    let calc4KS4Power3 = Math.floor((calc3KS4Power3 * 85) / 100); //自分ポケ技3が敵型4への（補正あり）威力
    let calc4KS4Power4 = Math.floor((calc3KS4Power4 * 85) / 100); //自分ポケ技4が敵型4への（補正あり）威力

    //敵ポケ１の型が使う4つの技
    let calc4P1S1 = Math.floor((calc3P1S1 * 85) / 100); //敵ポケ１技1例外補正なし威力
    let calc4P2S1 = Math.floor((calc3P2S1 * 85) / 100); //敵ポケ１技2例外補正なし威力
    let calc4P3S1 = Math.floor((calc3P3S1 * 85) / 100); //敵ポケ１技3例外補正なし威力
    let calc4P4S1 = Math.floor((calc3P4S1 * 85) / 100); //敵ポケ１技4例外補正なし威力

    //敵ポケ2の型が使う4つの技
    let calc4P1S2 = Math.floor((calc3P1S2 * 85) / 100); //敵ポケ2技1例外補正なし威力
    let calc4P2S2 = Math.floor((calc3P2S2 * 85) / 100); //敵ポケ2技2例外補正なし威力
    let calc4P3S2 = Math.floor((calc3P3S2 * 85) / 100); //敵ポケ2技3例外補正なし威力
    let calc4P4S2 = Math.floor((calc3P4S2 * 85) / 100); //敵ポケ2技4例外補正なし威力

    //敵ポケ3の型が使う4つの技
    let calc4P1S3 = Math.floor((calc3P1S3 * 85) / 100); //敵ポケ3技1例外補正なし威力
    let calc4P2S3 = Math.floor((calc3P2S3 * 85) / 100); //敵ポケ3技2例外補正なし威力
    let calc4P3S3 = Math.floor((calc3P3S3 * 85) / 100); //敵ポケ3技3例外補正なし威力
    let calc4P4S3 = Math.floor((calc3P4S3 * 85) / 100); //敵ポケ3技4例外補正なし威力

    //敵ポケ4の型が使う4つの技
    let calc4P1S4 = Math.floor((calc3P1S4 * 85) / 100); //敵ポケ4技1例外補正なし威力
    let calc4P2S4 = Math.floor((calc3P2S4 * 85) / 100); //敵ポケ4技2例外補正なし威力
    let calc4P3S4 = Math.floor((calc3P3S4 * 85) / 100); //敵ポケ4技3例外補正なし威力
    let calc4P4S4 = Math.floor((calc3P4S4 * 85) / 100); //敵ポケ4技4例外補正なし威力

    let calc4KPower1S1 = Math.floor((calc3KPower1S1 * 85) / 100); //敵1ポケ技1（補正あり）威力
    let calc4KPower2S1 = Math.floor((calc3KPower2S1 * 85) / 100); //敵1ポケ技2（補正あり）威力
    let calc4KPower3S1 = Math.floor((calc3KPower3S1 * 85) / 100); //敵1ポケ技3（補正あり）威力
    let calc4KPower4S1 = Math.floor((calc3KPower4S1 * 85) / 100); //敵1ポケ技4（補正あり）威力

    let calc4KPower1S2 = Math.floor((calc3KPower1S2 * 85) / 100); //敵2ポケ技1（補正あり）威力
    let calc4KPower2S2 = Math.floor((calc3KPower2S2 * 85) / 100); //敵2ポケ技2（補正あり）威力
    let calc4KPower3S2 = Math.floor((calc3KPower3S2 * 85) / 100); //敵2ポケ技3（補正あり）威力
    let calc4KPower4S2 = Math.floor((calc3KPower4S2 * 85) / 100); //敵2ポケ技4（補正あり）威力

    let calc4KPower1S3 = Math.floor((calc3KPower1S3 * 85) / 100); //敵3ポケ技1（補正あり）威力
    let calc4KPower2S3 = Math.floor((calc3KPower2S3 * 85) / 100); //敵3ポケ技2（補正あり）威力
    let calc4KPower3S3 = Math.floor((calc3KPower3S3 * 85) / 100); //敵3ポケ技3（補正あり）威力
    let calc4KPower4S3 = Math.floor((calc3KPower4S3 * 85) / 100); //敵3ポケ技4（補正あり）威力

    let calc4KPower1S4 = Math.floor((calc3KPower1S4 * 85) / 100); //敵4ポケ技1（補正あり）威力
    let calc4KPower2S4 = Math.floor((calc3KPower2S4 * 85) / 100); //敵4ポケ技2（補正あり）威力
    let calc4KPower3S4 = Math.floor((calc3KPower3S4 * 85) / 100); //敵4ポケ技3（補正あり）威力
    let calc4KPower4S4 = Math.floor((calc3KPower4S4 * 85) / 100); //敵4ポケ技4（補正あり）威力

    /////////急所//////////
    let calc4P1_S1Critical = Math.floor((calc3P1_S1Critical * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    let calc4P1_S2Critical = Math.floor((calc3P1_S2Critical * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    let calc4P1_S3Critical = Math.floor((calc3P1_S3Critical * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    let calc4P1_S4Critical = Math.floor((calc3P1_S4Critical * 85) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

    let calc4P2_S1Critical = Math.floor((calc3P2_S1Critical * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    let calc4P2_S2Critical = Math.floor((calc3P2_S2Critical * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    let calc4P2_S3Critical = Math.floor((calc3P2_S3Critical * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    let calc4P2_S4Critical = Math.floor((calc3P2_S4Critical * 85) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

    let calc4P3_S1Critical = Math.floor((calc3P3_S1Critical * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    let calc4P3_S2Critical = Math.floor((calc3P3_S2Critical * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    let calc4P3_S3Critical = Math.floor((calc3P3_S3Critical * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    let calc4P3_S4Critical = Math.floor((calc3P3_S4Critical * 85) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

    let calc4P4_S1Critical = Math.floor((calc3P4_S1Critical * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    let calc4P4_S2Critical = Math.floor((calc3P4_S2Critical * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    let calc4P4_S3Critical = Math.floor((calc3P4_S3Critical * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    let calc4P4_S4Critical = Math.floor((calc3P4_S4Critical * 85) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    let calc4KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 85) / 100); //自分ポケ技1が敵型1への（補正あり）威力
    let calc4KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 85) / 100); //自分ポケ技2が敵型1への（補正あり）威力
    let calc4KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 85) / 100); //自分ポケ技3が敵型1への（補正あり）威力
    let calc4KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 85) / 100); //自分ポケ技4が敵型1への（補正あり）威力

    let calc4KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 85) / 100); //自分ポケ技1が敵型2への（補正あり）威力
    let calc4KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 85) / 100); //自分ポケ技2が敵型2への（補正あり）威力
    let calc4KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 85) / 100); //自分ポケ技3が敵型2への（補正あり）威力
    let calc4KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 85) / 100); //自分ポケ技4が敵型2への（補正あり）威力

    let calc4KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 85) / 100); //自分ポケ技1が敵型3への（補正あり）威力
    let calc4KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 85) / 100); //自分ポケ技2が敵型3への（補正あり）威力
    let calc4KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 85) / 100); //自分ポケ技3が敵型3への（補正あり）威力
    let calc4KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 85) / 100); //自分ポケ技4が敵型3への（補正あり）威力

    let calc4KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 85) / 100); //自分ポケ技1が敵型4への（補正あり）威力
    let calc4KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 85) / 100); //自分ポケ技2が敵型4への（補正あり）威力
    let calc4KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 85) / 100); //自分ポケ技3が敵型4への（補正あり）威力
    let calc4KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 85) / 100); //自分ポケ技4が敵型4への（補正あり）威力

    //敵ポケ１の型が使う4つの技
    let calc4P1S1Critical = Math.floor((calc3P1S1Critical * 85) / 100); //敵ポケ１技1例外補正なし威力
    let calc4P2S1Critical = Math.floor((calc3P2S1Critical * 85) / 100); //敵ポケ１技2例外補正なし威力
    let calc4P3S1Critical = Math.floor((calc3P3S1Critical * 85) / 100); //敵ポケ１技3例外補正なし威力
    let calc4P4S1Critical = Math.floor((calc3P4S1Critical * 85) / 100); //敵ポケ１技4例外補正なし威力

    //敵ポケ2の型が使う4つの技
    let calc4P1S2Critical = Math.floor((calc3P1S2Critical * 85) / 100); //敵ポケ2技1例外補正なし威力
    let calc4P2S2Critical = Math.floor((calc3P2S2Critical * 85) / 100); //敵ポケ2技2例外補正なし威力
    let calc4P3S2Critical = Math.floor((calc3P3S2Critical * 85) / 100); //敵ポケ2技3例外補正なし威力
    let calc4P4S2Critical = Math.floor((calc3P4S2Critical * 85) / 100); //敵ポケ2技4例外補正なし威力

    //敵ポケ3の型が使う4つの技
    let calc4P1S3Critical = Math.floor((calc3P1S3Critical * 85) / 100); //敵ポケ3技1例外補正なし威力
    let calc4P2S3Critical = Math.floor((calc3P2S3Critical * 85) / 100); //敵ポケ3技2例外補正なし威力
    let calc4P3S3Critical = Math.floor((calc3P3S3Critical * 85) / 100); //敵ポケ3技3例外補正なし威力
    let calc4P4S3Critical = Math.floor((calc3P4S3Critical * 85) / 100); //敵ポケ3技4例外補正なし威力

    //敵ポケ4の型が使う4つの技
    let calc4P1S4Critical = Math.floor((calc3P1S4Critical * 85) / 100); //敵ポケ4技1例外補正なし威力
    let calc4P2S4Critical = Math.floor((calc3P2S4Critical * 85) / 100); //敵ポケ4技2例外補正なし威力
    let calc4P3S4Critical = Math.floor((calc3P3S4Critical * 85) / 100); //敵ポケ4技3例外補正なし威力
    let calc4P4S4Critical = Math.floor((calc3P4S4Critical * 85) / 100); //敵ポケ4技4例外補正なし威力

    let calc4KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 85) / 100); //敵1ポケ技1（補正あり）威力
    let calc4KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 85) / 100); //敵1ポケ技2（補正あり）威力
    let calc4KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 85) / 100); //敵1ポケ技3（補正あり）威力
    let calc4KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 85) / 100); //敵1ポケ技4（補正あり）威力

    let calc4KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 85) / 100); //敵2ポケ技1（補正あり）威力
    let calc4KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 85) / 100); //敵2ポケ技2（補正あり）威力
    let calc4KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 85) / 100); //敵2ポケ技3（補正あり）威力
    let calc4KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 85) / 100); //敵2ポケ技4（補正あり）威力

    let calc4KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 85) / 100); //敵3ポケ技1（補正あり）威力
    let calc4KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 85) / 100); //敵3ポケ技2（補正あり）威力
    let calc4KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 85) / 100); //敵3ポケ技3（補正あり）威力
    let calc4KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 85) / 100); //敵3ポケ技4（補正あり）威力

    let calc4KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 85) / 100); //敵4ポケ技1（補正あり）威力
    let calc4KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 85) / 100); //敵4ポケ技2（補正あり）威力
    let calc4KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 85) / 100); //敵4ポケ技3（補正あり）威力
    let calc4KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 85) / 100); //敵4ポケ技4（補正あり）威力

    ///calc4=min0.85乱数  calc3=max1.0乱数

    ///////////////タイプ一致補正 タイプ一致補正/////////////////////////////タイプ一致補正 タイプ一致補正//////////////
    ///////////////タイプ一致補正 タイプ一致補正/////////////////////////////タイプ一致補正 タイプ一致補正//////////////
    //! タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正
    //! タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正タイプ一致補正

    if (mypokeType1 === wtype1 || mypokeType2 === wtype1) {
      if (selectedAbility === "てきおうりょく") {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1 = Math.floor((calc4P1_S1 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      } else {
        calc3P1_S1 = Math.floor((calc3P1_S1 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 150) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 150) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 150) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 150) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1 = Math.floor((calc4P1_S1 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 150) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 150) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 150) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 150) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 150) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 150) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 150) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 150) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 150) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 150) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 150) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 150) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 150) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
    }

    if (mypokeType1 === wtype2 || mypokeType2 === wtype2) {
      if (selectedAbility === "てきおうりょく") {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1 = Math.floor((calc4P2_S1 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      } else {
        calc3P2_S1 = Math.floor((calc3P2_S1 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 150) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 150) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 150) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 150) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1 = Math.floor((calc4P2_S1 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 150) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 150) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 150) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 150) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 150) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 150) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 150) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 150) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 150) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 150) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 150) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 150) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 150) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
    }

    if (mypokeType1 === wtype3 || mypokeType2 === wtype3) {
      if (selectedAbility === "てきおうりょく") {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1 = Math.floor((calc4P3_S1 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      } else {
        calc3P3_S1 = Math.floor((calc3P3_S1 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 150) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 150) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 150) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 150) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1 = Math.floor((calc4P3_S1 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 150) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 150) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 150) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 150) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 150) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 150) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 150) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 150) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 150) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 150) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 150) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 150) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 150) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
    }

    if (mypokeType1 === wtype4 || mypokeType2 === wtype4) {
      if (selectedAbility === "てきおうりょく") {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1 = Math.floor((calc4P4_S1 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      } else {
        calc3P4_S1 = Math.floor((calc3P4_S1 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 150) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 150) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 150) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 150) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1 = Math.floor((calc4P4_S1 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 150) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 150) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 150) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 150) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 150) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 150) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 150) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 150) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 150) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 150) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 150) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 150) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 150) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    //敵型1技1
    if (tekipokeType1 === wtype1S1 || tekipokeType2 === wtype1S1) {
      if (selectedTekiAbility === "てきおうりょく") {
        //敵ポケ１の型が使う4つの技
        calc4P1S1 = Math.floor((calc4P1S1 * 200) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 200) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 200) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 200) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 200) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 200) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 200) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 200) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        //敵ポケ１の型が使う4つの技
        calc4P1S1 = Math.floor((calc4P1S1 * 150) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 150) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 150) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 150) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 150) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 150) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 150) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 150) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型1技2
    if (tekipokeType1 === wtype2S1 || tekipokeType2 === wtype2S1) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P2S1 = Math.floor((calc4P2S1 * 200) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 200) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 200) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 200) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 200) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 200) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 200) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 200) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P2S1 = Math.floor((calc4P2S1 * 150) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 150) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 150) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 150) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 150) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 150) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 150) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 150) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型1技3
    if (tekipokeType1 === wtype3S1 || tekipokeType2 === wtype3S1) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P3S1 = Math.floor((calc4P3S1 * 200) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 200) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 200) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 200) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 200) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 200) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 200) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 200) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P3S1 = Math.floor((calc4P3S1 * 150) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 150) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 150) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 150) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 150) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 150) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 150) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 150) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型1技4
    if (tekipokeType1 === wtype4S1 || tekipokeType2 === wtype4S1) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P4S1 = Math.floor((calc4P4S1 * 200) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 200) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 200) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 200) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 200) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 200) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 200) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 200) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P4S1 = Math.floor((calc4P4S1 * 150) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 150) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 150) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 150) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 150) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 150) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 150) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 150) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型2技1
    if (tekipokeType1 === wtype1S2 || tekipokeType2 === wtype1S2) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P1S2 = Math.floor((calc4P1S2 * 200) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 200) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 200) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 200) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 200) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 200) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 200) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 200) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P1S2 = Math.floor((calc4P1S2 * 150) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 150) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 150) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 150) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 150) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 150) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 150) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 150) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型2技2
    if (tekipokeType1 === wtype2S2 || tekipokeType2 === wtype2S2) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P2S2 = Math.floor((calc4P2S2 * 200) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 200) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 200) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 200) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 200) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 200) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 200) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 200) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P2S2 = Math.floor((calc4P2S2 * 150) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 150) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 150) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 150) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 150) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 150) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 150) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 150) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型2技3
    if (tekipokeType1 === wtype3S2 || tekipokeType2 === wtype3S2) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P3S2 = Math.floor((calc4P3S2 * 200) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 200) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 200) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 200) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 200) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 200) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 200) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 200) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P3S2 = Math.floor((calc4P3S2 * 150) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 150) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 150) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 150) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 150) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 150) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 150) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 150) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型2技4
    if (tekipokeType1 === wtype4S2 || tekipokeType2 === wtype4S2) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P4S2 = Math.floor((calc4P4S2 * 200) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 200) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 200) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 200) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 200) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 200) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 200) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 200) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P4S2 = Math.floor((calc4P4S2 * 150) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 150) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 150) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 150) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 150) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 150) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 150) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 150) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型3技1
    if (tekipokeType1 === wtype1S3 || tekipokeType2 === wtype1S3) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P1S3 = Math.floor((calc4P1S3 * 200) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 200) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 200) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 200) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 200) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 200) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 200) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 200) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P1S3 = Math.floor((calc4P1S3 * 150) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 150) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 150) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 150) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 150) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 150) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 150) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 150) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型3技2
    if (tekipokeType1 === wtype2S3 || tekipokeType2 === wtype2S3) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P2S3 = Math.floor((calc4P2S3 * 200) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 200) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 200) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 200) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 200) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 200) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 200) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 200) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P2S3 = Math.floor((calc4P2S3 * 150) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 150) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 150) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 150) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 150) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 150) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 150) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 150) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型3技3
    if (tekipokeType1 === wtype3S3 || tekipokeType2 === wtype3S3) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P3S3 = Math.floor((calc4P3S3 * 200) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 200) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 200) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 200) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 200) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 200) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 200) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 200) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P3S3 = Math.floor((calc4P3S3 * 150) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 150) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 150) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 150) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 150) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 150) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 150) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 150) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型3技4
    if (tekipokeType1 === wtype4S3 || tekipokeType2 === wtype4S3) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P4S3 = Math.floor((calc4P4S3 * 200) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 200) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 200) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 200) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 200) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 200) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 200) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 200) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P4S3 = Math.floor((calc4P4S3 * 150) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 150) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 150) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 150) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 150) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 150) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 150) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 150) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型4技1
    if (tekipokeType1 === wtype1S4 || tekipokeType2 === wtype1S4) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P1S4 = Math.floor((calc4P1S4 * 200) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 200) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 200) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 200) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 200) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 200) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 200) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 200) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P1S4 = Math.floor((calc4P1S4 * 150) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 150) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 150) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 150) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 150) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 150) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 150) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 150) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型4技2
    if (tekipokeType1 === wtype2S4 || tekipokeType2 === wtype2S4) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P2S4 = Math.floor((calc4P2S4 * 200) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 200) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 200) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 200) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 200) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 200) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 200) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 200) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P2S4 = Math.floor((calc4P2S4 * 150) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 150) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 150) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 150) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 150) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 150) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 150) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 150) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型4技3
    if (tekipokeType1 === wtype3S4 || tekipokeType2 === wtype3S4) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P3S4 = Math.floor((calc4P3S4 * 200) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 200) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 200) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 200) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 200) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 200) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 200) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 200) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P3S4 = Math.floor((calc4P3S4 * 150) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 150) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 150) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 150) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 150) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 150) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 150) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 150) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //敵型4技4
    if (tekipokeType1 === wtype4S4 || tekipokeType2 === wtype4S4) {
      if (selectedTekiAbility === "てきおうりょく") {
        calc4P4S4 = Math.floor((calc4P4S4 * 200) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 200) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 200) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 200) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 200) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 200) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 200) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 200) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      } else {
        calc4P4S4 = Math.floor((calc4P4S4 * 150) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 150) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 150) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 150) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 150) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 150) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 150) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 150) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    /////////////// ×相性補正/////////////// ×相性補正/////////////// ×相性補正/////////////// ×相性補正
    /////////////// ×相性補正/////////////// ×相性補正/////////////// ×相性補正/////////////// ×相性補正

    // wtype1が攻撃側のタイプ、tekipokeType1とtekipokeType2が防御側のタイプ

    // typeChartからwtype1と同じタイプのオブジェクトを取得する
    const wtype1Chart = typeChart.find((typeObject) => typeObject.type === wtype1) || {};
    const wtype2Chart = typeChart.find((typeObject) => typeObject.type === wtype2) || {};
    const wtype3Chart = typeChart.find((typeObject) => typeObject.type === wtype3) || {};
    const wtype4Chart = typeChart.find((typeObject) => typeObject.type === wtype4) || {};
    // 相手のタイプ1とタイプ2に対するタイプ相性の数値を取得する
    //自分技1と敵タイプ1と2
    const wtype1ChartT1 = wtype1Chart[tekipokeType1] === 0 ? 0 : wtype1Chart[tekipokeType1] || 1;
    const wtype1ChartT2 = wtype1Chart[tekipokeType2] === 0 ? 0 : wtype1Chart[tekipokeType2] || 1;

    //自分技2と敵タイプ1と2
    const wtype2ChartT1 = wtype2Chart[tekipokeType1] === 0 ? 0 : wtype2Chart[tekipokeType1] || 1;
    const wtype2ChartT2 = wtype2Chart[tekipokeType2] === 0 ? 0 : wtype2Chart[tekipokeType2] || 1;

    //自分技3と敵タイプ1と2
    const wtype3ChartT1 = wtype3Chart[tekipokeType1] === 0 ? 0 : wtype3Chart[tekipokeType1] || 1;
    const wtype3ChartT2 = wtype3Chart[tekipokeType2] === 0 ? 0 : wtype3Chart[tekipokeType2] || 1;

    //自分技4と敵タイプ1と2
    const wtype4ChartT1 = wtype4Chart[tekipokeType1] === 0 ? 0 : wtype4Chart[tekipokeType1] || 1;
    const wtype4ChartT2 = wtype4Chart[tekipokeType2] === 0 ? 0 : wtype4Chart[tekipokeType2] || 1;

    //敵型1の相性配列
    const wtype1S1Chart = typeChart.find((typeObject) => typeObject.type === wtype1S1) || {};
    const wtype2S1Chart = typeChart.find((typeObject) => typeObject.type === wtype2S1) || {};
    const wtype3S1Chart = typeChart.find((typeObject) => typeObject.type === wtype3S1) || {};
    const wtype4S1Chart = typeChart.find((typeObject) => typeObject.type === wtype4S1) || {};

    //敵型1技1が自分タイプ1と2
    const wtype1S1ChartT1 = wtype1S1Chart[mypokeType1] === 0 ? 0 : wtype1S1Chart[mypokeType1] || 1;
    const wtype1S1ChartT2 = wtype1S1Chart[mypokeType2] === 0 ? 0 : wtype1S1Chart[mypokeType2] || 1;

    //敵型1技2が自分タイプ1と2
    const wtype2S1ChartT1 = wtype2S1Chart[mypokeType1] === 0 ? 0 : wtype2S1Chart[mypokeType1] || 1;
    const wtype2S1ChartT2 = wtype2S1Chart[mypokeType2] === 0 ? 0 : wtype2S1Chart[mypokeType2] || 1;

    //敵型1技3が自分タイプ1と2
    const wtype3S1ChartT1 = wtype3S1Chart[mypokeType1] === 0 ? 0 : wtype3S1Chart[mypokeType1] || 1;
    const wtype3S1ChartT2 = wtype3S1Chart[mypokeType2] === 0 ? 0 : wtype3S1Chart[mypokeType2] || 1;

    //敵型1技4が自分タイプ1と2
    const wtype4S1ChartT1 = wtype4S1Chart[mypokeType1] === 0 ? 0 : wtype4S1Chart[mypokeType1] || 1;
    const wtype4S1ChartT2 = wtype4S1Chart[mypokeType2] === 0 ? 0 : wtype4S1Chart[mypokeType2] || 1;

    //敵型2の相性配列
    const wtype1S2Chart = typeChart.find((typeObject) => typeObject.type === wtype1S2) || {};
    const wtype2S2Chart = typeChart.find((typeObject) => typeObject.type === wtype2S2) || {};
    const wtype3S2Chart = typeChart.find((typeObject) => typeObject.type === wtype3S2) || {};
    const wtype4S2Chart = typeChart.find((typeObject) => typeObject.type === wtype4S2) || {};

    //敵型2技1が自分タイプ1と2
    const wtype1S2ChartT1 = wtype1S2Chart[mypokeType1] === 0 ? 0 : wtype1S2Chart[mypokeType1] || 1;
    const wtype1S2ChartT2 = wtype1S2Chart[mypokeType2] === 0 ? 0 : wtype1S2Chart[mypokeType2] || 1;

    //敵型2技2が自分タイプ1と2
    const wtype2S2ChartT1 = wtype2S2Chart[mypokeType1] === 0 ? 0 : wtype2S2Chart[mypokeType1] || 1;
    const wtype2S2ChartT2 = wtype2S2Chart[mypokeType2] === 0 ? 0 : wtype2S2Chart[mypokeType2] || 1;

    //敵型2技3が自分タイプ1と2
    const wtype3S2ChartT1 = wtype3S2Chart[mypokeType1] === 0 ? 0 : wtype3S2Chart[mypokeType1] || 1;
    const wtype3S2ChartT2 = wtype3S2Chart[mypokeType2] === 0 ? 0 : wtype3S2Chart[mypokeType2] || 1;

    //敵型2技4が自分タイプ1と2
    const wtype4S2ChartT1 = wtype4S2Chart[mypokeType1] === 0 ? 0 : wtype4S2Chart[mypokeType1] || 1;
    const wtype4S2ChartT2 = wtype4S2Chart[mypokeType2] === 0 ? 0 : wtype4S2Chart[mypokeType2] || 1;

    //敵型3の相性配列
    const wtype1S3Chart = typeChart.find((typeObject) => typeObject.type === wtype1S3) || {};
    const wtype2S3Chart = typeChart.find((typeObject) => typeObject.type === wtype2S3) || {};
    const wtype3S3Chart = typeChart.find((typeObject) => typeObject.type === wtype3S3) || {};
    const wtype4S3Chart = typeChart.find((typeObject) => typeObject.type === wtype4S3) || {};

    //敵型3技1が自分タイプ1と2
    const wtype1S3ChartT1 = wtype1S3Chart[mypokeType1] === 0 ? 0 : wtype1S3Chart[mypokeType1] || 1;
    const wtype1S3ChartT2 = wtype1S3Chart[mypokeType2] === 0 ? 0 : wtype1S3Chart[mypokeType2] || 1;

    //敵型3技2が自分タイプ1と2
    const wtype2S3ChartT1 = wtype2S3Chart[mypokeType1] === 0 ? 0 : wtype2S3Chart[mypokeType1] || 1;
    const wtype2S3ChartT2 = wtype2S3Chart[mypokeType2] === 0 ? 0 : wtype2S3Chart[mypokeType2] || 1;

    //敵型3技3が自分タイプ1と2
    const wtype3S3ChartT1 = wtype3S3Chart[mypokeType1] === 0 ? 0 : wtype3S3Chart[mypokeType1] || 1;
    const wtype3S3ChartT2 = wtype3S3Chart[mypokeType2] === 0 ? 0 : wtype3S3Chart[mypokeType2] || 1;

    //敵型3技4が自分タイプ1と2
    const wtype4S3ChartT1 = wtype4S3Chart[mypokeType1] === 0 ? 0 : wtype4S3Chart[mypokeType1] || 1;
    const wtype4S3ChartT2 = wtype4S3Chart[mypokeType2] === 0 ? 0 : wtype4S3Chart[mypokeType2] || 1;

    //敵型4の相性配列
    const wtype1S4Chart = typeChart.find((typeObject) => typeObject.type === wtype1S4) || {};
    const wtype2S4Chart = typeChart.find((typeObject) => typeObject.type === wtype2S4) || {};
    const wtype3S4Chart = typeChart.find((typeObject) => typeObject.type === wtype3S4) || {};
    const wtype4S4Chart = typeChart.find((typeObject) => typeObject.type === wtype4S4) || {};

    //敵型4技1が自分タイプ1と2
    const wtype1S4ChartT1 = wtype1S4Chart[mypokeType1] === 0 ? 0 : wtype1S4Chart[mypokeType1] || 1;
    const wtype1S4ChartT2 = wtype1S4Chart[mypokeType2] === 0 ? 0 : wtype1S4Chart[mypokeType2] || 1;

    //敵型4技2が自分タイプ1と2
    const wtype2S4ChartT1 = wtype2S4Chart[mypokeType1] === 0 ? 0 : wtype2S4Chart[mypokeType1] || 1;
    const wtype2S4ChartT2 = wtype2S4Chart[mypokeType2] === 0 ? 0 : wtype2S4Chart[mypokeType2] || 1;

    //敵型4技3が自分タイプ1と2
    const wtype3S4ChartT1 = wtype3S4Chart[mypokeType1] === 0 ? 0 : wtype3S4Chart[mypokeType1] || 1;
    const wtype3S4ChartT2 = wtype3S4Chart[mypokeType2] === 0 ? 0 : wtype3S4Chart[mypokeType2] || 1;

    //敵型4技4が自分タイプ1と2
    const wtype4S4ChartT1 = wtype4S4Chart[mypokeType1] === 0 ? 0 : wtype4S4Chart[mypokeType1] || 1;
    const wtype4S4ChartT2 = wtype4S4Chart[mypokeType2] === 0 ? 0 : wtype4S4Chart[mypokeType2] || 1;

    //自分技1
    calc3P1_S1 = Math.floor(Math.floor(calc3P1_S1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    calc3P1_S2 = Math.floor(Math.floor(calc3P1_S2 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    calc3P1_S3 = Math.floor(Math.floor(calc3P1_S3 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    calc3P1_S4 = Math.floor(Math.floor(calc3P1_S4 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power1 = Math.floor(Math.floor(calc3KS1Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型1への（補正あり）威力
    calc3KS2Power1 = Math.floor(Math.floor(calc3KS2Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型2への（補正あり）威力
    calc3KS3Power1 = Math.floor(Math.floor(calc3KS3Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型3への（補正あり）威力
    calc3KS4Power1 = Math.floor(Math.floor(calc3KS4Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型4への（補正あり）威力

    calc4P1_S1 = Math.floor(Math.floor(calc4P1_S1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    calc4P1_S2 = Math.floor(Math.floor(calc4P1_S2 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    calc4P1_S3 = Math.floor(Math.floor(calc4P1_S3 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    calc4P1_S4 = Math.floor(Math.floor(calc4P1_S4 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power1 = Math.floor(Math.floor(calc4KS1Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型1への（補正あり）威力
    calc4KS2Power1 = Math.floor(Math.floor(calc4KS2Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型2への（補正あり）威力
    calc4KS3Power1 = Math.floor(Math.floor(calc4KS3Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型3への（補正あり）威力
    calc4KS4Power1 = Math.floor(Math.floor(calc4KS4Power1 * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型4への（補正あり）威力

    /////////急所//////////
    calc3P1_S1Critical = Math.floor(Math.floor(calc3P1_S1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    calc3P1_S2Critical = Math.floor(Math.floor(calc3P1_S2Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    calc3P1_S3Critical = Math.floor(Math.floor(calc3P1_S3Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    calc3P1_S4Critical = Math.floor(Math.floor(calc3P1_S4Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power1Critical = Math.floor(Math.floor(calc3KS1Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型1への（補正あり）威力
    calc3KS2Power1Critical = Math.floor(Math.floor(calc3KS2Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型2への（補正あり）威力
    calc3KS3Power1Critical = Math.floor(Math.floor(calc3KS3Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型3への（補正あり）威力
    calc3KS4Power1Critical = Math.floor(Math.floor(calc3KS4Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型4への（補正あり）威力

    calc4P1_S1Critical = Math.floor(Math.floor(calc4P1_S1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    calc4P1_S2Critical = Math.floor(Math.floor(calc4P1_S2Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    calc4P1_S3Critical = Math.floor(Math.floor(calc4P1_S3Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    calc4P1_S4Critical = Math.floor(Math.floor(calc4P1_S4Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power1Critical = Math.floor(Math.floor(calc4KS1Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型1への（補正あり）威力
    calc4KS2Power1Critical = Math.floor(Math.floor(calc4KS2Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型2への（補正あり）威力
    calc4KS3Power1Critical = Math.floor(Math.floor(calc4KS3Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型3への（補正あり）威力
    calc4KS4Power1Critical = Math.floor(Math.floor(calc4KS4Power1Critical * wtype1ChartT1) * wtype1ChartT2); //自分ポケ技1が敵型4への（補正あり）威力

    //自分技2
    calc3P2_S1 = Math.floor(Math.floor(calc3P2_S1 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    calc3P2_S2 = Math.floor(Math.floor(calc3P2_S2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    calc3P2_S3 = Math.floor(Math.floor(calc3P2_S3 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    calc3P2_S4 = Math.floor(Math.floor(calc3P2_S4 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power2 = Math.floor(Math.floor(calc3KS1Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型1への（補正あり）威力
    calc3KS2Power2 = Math.floor(Math.floor(calc3KS2Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型2への（補正あり）威力
    calc3KS3Power2 = Math.floor(Math.floor(calc3KS3Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型3への（補正あり）威力
    calc3KS4Power2 = Math.floor(Math.floor(calc3KS4Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型4への（補正あり）威力

    calc4P2_S1 = Math.floor(Math.floor(calc4P2_S1 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    calc4P2_S2 = Math.floor(Math.floor(calc4P2_S2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    calc4P2_S3 = Math.floor(Math.floor(calc4P2_S3 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    calc4P2_S4 = Math.floor(Math.floor(calc4P2_S4 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power2 = Math.floor(Math.floor(calc4KS1Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型1への（補正あり）威力
    calc4KS2Power2 = Math.floor(Math.floor(calc4KS2Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型2への（補正あり）威力
    calc4KS3Power2 = Math.floor(Math.floor(calc4KS3Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型3への（補正あり）威力
    calc4KS4Power2 = Math.floor(Math.floor(calc4KS4Power2 * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型4への（補正あり）威力

    /////////急所//////////
    calc3P2_S1Critical = Math.floor(Math.floor(calc3P2_S1Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    calc3P2_S2Critical = Math.floor(Math.floor(calc3P2_S2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    calc3P2_S3Critical = Math.floor(Math.floor(calc3P2_S3Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    calc3P2_S4Critical = Math.floor(Math.floor(calc3P2_S4Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power2Critical = Math.floor(Math.floor(calc3KS1Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型1への（補正あり）威力
    calc3KS2Power2Critical = Math.floor(Math.floor(calc3KS2Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型2への（補正あり）威力
    calc3KS3Power2Critical = Math.floor(Math.floor(calc3KS3Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型3への（補正あり）威力
    calc3KS4Power2Critical = Math.floor(Math.floor(calc3KS4Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型4への（補正あり）威力

    calc4P2_S1Critical = Math.floor(Math.floor(calc4P2_S1Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    calc4P2_S2Critical = Math.floor(Math.floor(calc4P2_S2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    calc4P2_S3Critical = Math.floor(Math.floor(calc4P2_S3Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    calc4P2_S4Critical = Math.floor(Math.floor(calc4P2_S4Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power2Critical = Math.floor(Math.floor(calc4KS1Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型1への（補正あり）威力
    calc4KS2Power2Critical = Math.floor(Math.floor(calc4KS2Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型2への（補正あり）威力
    calc4KS3Power2Critical = Math.floor(Math.floor(calc4KS3Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型3への（補正あり）威力
    calc4KS4Power2Critical = Math.floor(Math.floor(calc4KS4Power2Critical * wtype2ChartT1) * wtype2ChartT2); //自分ポケ技2が敵型4への（補正あり）威力

    //自分技3
    calc3P3_S1 = Math.floor(Math.floor(calc3P3_S1 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    calc3P3_S2 = Math.floor(Math.floor(calc3P3_S2 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    calc3P3_S3 = Math.floor(Math.floor(calc3P3_S3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    calc3P3_S4 = Math.floor(Math.floor(calc3P3_S4 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power3 = Math.floor(Math.floor(calc3KS1Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型1への（補正あり）威力
    calc3KS2Power3 = Math.floor(Math.floor(calc3KS2Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型2への（補正あり）威力
    calc3KS3Power3 = Math.floor(Math.floor(calc3KS3Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型3への（補正あり）威力
    calc3KS4Power3 = Math.floor(Math.floor(calc3KS4Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型4への（補正あり）威力

    calc4P3_S1 = Math.floor(Math.floor(calc4P3_S1 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    calc4P3_S2 = Math.floor(Math.floor(calc4P3_S2 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    calc4P3_S3 = Math.floor(Math.floor(calc4P3_S3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    calc4P3_S4 = Math.floor(Math.floor(calc4P3_S4 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power3 = Math.floor(Math.floor(calc4KS1Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型1への（補正あり）威力
    calc4KS2Power3 = Math.floor(Math.floor(calc4KS2Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型2への（補正あり）威力
    calc4KS3Power3 = Math.floor(Math.floor(calc4KS3Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型3への（補正あり）威力
    calc4KS4Power3 = Math.floor(Math.floor(calc4KS4Power3 * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型4への（補正あり）威力

    /////////急所//////////
    calc3P3_S1Critical = Math.floor(Math.floor(calc3P3_S1Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    calc3P3_S2Critical = Math.floor(Math.floor(calc3P3_S2Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    calc3P3_S3Critical = Math.floor(Math.floor(calc3P3_S3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    calc3P3_S4Critical = Math.floor(Math.floor(calc3P3_S4Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power3Critical = Math.floor(Math.floor(calc3KS1Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型1への（補正あり）威力
    calc3KS2Power3Critical = Math.floor(Math.floor(calc3KS2Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型2への（補正あり）威力
    calc3KS3Power3Critical = Math.floor(Math.floor(calc3KS3Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型3への（補正あり）威力
    calc3KS4Power3Critical = Math.floor(Math.floor(calc3KS4Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型4への（補正あり）威力

    calc4P3_S1Critical = Math.floor(Math.floor(calc4P3_S1Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    calc4P3_S2Critical = Math.floor(Math.floor(calc4P3_S2Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    calc4P3_S3Critical = Math.floor(Math.floor(calc4P3_S3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    calc4P3_S4Critical = Math.floor(Math.floor(calc4P3_S4Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power3Critical = Math.floor(Math.floor(calc4KS1Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型1への（補正あり）威力
    calc4KS2Power3Critical = Math.floor(Math.floor(calc4KS2Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型2への（補正あり）威力
    calc4KS3Power3Critical = Math.floor(Math.floor(calc4KS3Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型3への（補正あり）威力
    calc4KS4Power3Critical = Math.floor(Math.floor(calc4KS4Power3Critical * wtype3ChartT1) * wtype3ChartT2); //自分ポケ技3が敵型4への（補正あり）威力

    //自分技4
    calc3P4_S1 = Math.floor(Math.floor(calc3P4_S1 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    calc3P4_S2 = Math.floor(Math.floor(calc3P4_S2 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    calc3P4_S3 = Math.floor(Math.floor(calc3P4_S3 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    calc3P4_S4 = Math.floor(Math.floor(calc3P4_S4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power4 = Math.floor(Math.floor(calc3KS1Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型1への（補正あり）威力
    calc3KS2Power4 = Math.floor(Math.floor(calc3KS2Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型2への（補正あり）威力
    calc3KS3Power4 = Math.floor(Math.floor(calc3KS3Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型3への（補正あり）威力
    calc3KS4Power4 = Math.floor(Math.floor(calc3KS4Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型4への（補正あり）威力

    calc4P4_S1 = Math.floor(Math.floor(calc4P4_S1 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    calc4P4_S2 = Math.floor(Math.floor(calc4P4_S2 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    calc4P4_S3 = Math.floor(Math.floor(calc4P4_S3 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    calc4P4_S4 = Math.floor(Math.floor(calc4P4_S4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power4 = Math.floor(Math.floor(calc4KS1Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型1への（補正あり）威力
    calc4KS2Power4 = Math.floor(Math.floor(calc4KS2Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型2への（補正あり）威力
    calc4KS3Power4 = Math.floor(Math.floor(calc4KS3Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型3への（補正あり）威力
    calc4KS4Power4 = Math.floor(Math.floor(calc4KS4Power4 * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型4への（補正あり）威力

    /////////急所//////////
    calc3P4_S1Critical = Math.floor(Math.floor(calc3P4_S1Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    calc3P4_S2Critical = Math.floor(Math.floor(calc3P4_S2Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    calc3P4_S3Critical = Math.floor(Math.floor(calc3P4_S3Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    calc3P4_S4Critical = Math.floor(Math.floor(calc3P4_S4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    calc3KS1Power4Critical = Math.floor(Math.floor(calc3KS1Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型1への（補正あり）威力
    calc3KS2Power4Critical = Math.floor(Math.floor(calc3KS2Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型2への（補正あり）威力
    calc3KS3Power4Critical = Math.floor(Math.floor(calc3KS3Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型3への（補正あり）威力
    calc3KS4Power4Critical = Math.floor(Math.floor(calc3KS4Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型4への（補正あり）威力

    calc4P4_S1Critical = Math.floor(Math.floor(calc4P4_S1Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    calc4P4_S2Critical = Math.floor(Math.floor(calc4P4_S2Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    calc4P4_S3Critical = Math.floor(Math.floor(calc4P4_S3Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    calc4P4_S4Critical = Math.floor(Math.floor(calc4P4_S4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    calc4KS1Power4Critical = Math.floor(Math.floor(calc4KS1Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型1への（補正あり）威力
    calc4KS2Power4Critical = Math.floor(Math.floor(calc4KS2Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型2への（補正あり）威力
    calc4KS3Power4Critical = Math.floor(Math.floor(calc4KS3Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型3への（補正あり）威力
    calc4KS4Power4Critical = Math.floor(Math.floor(calc4KS4Power4Critical * wtype4ChartT1) * wtype4ChartT2); //自分ポケ技4が敵型4への（補正あり）威力

    //敵型1技1

    calc4P1S1 = Math.floor(Math.floor(calc4P1S1 * wtype1S1ChartT1) * wtype1S1ChartT2); //敵ポケ１技1例外補正なし威力
    calc4KPower1S1 = Math.floor(Math.floor(calc4KPower1S1 * wtype1S1ChartT1) * wtype1S1ChartT2); //敵1ポケ技1（補正あり）威力
    calc4P1S1Critical = Math.floor(Math.floor(calc4P1S1Critical * wtype1S1ChartT1) * wtype1S1ChartT2); //敵ポケ１技1例外補正なし威力
    calc4KPower1S1Critical = Math.floor(Math.floor(calc4KPower1S1Critical * wtype1S1ChartT1) * wtype1S1ChartT2); //敵1ポケ技1（補正あり）威力
    calc3P1S1 = Math.floor(Math.floor(calc3P1S1 * wtype1S1ChartT1) * wtype1S1ChartT2); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower1S1 = Math.floor(Math.floor(calc3KPower1S1 * wtype1S1ChartT1) * wtype1S1ChartT2); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1S1Critical = Math.floor(Math.floor(calc3P1S1Critical * wtype1S1ChartT1) * wtype1S1ChartT2); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower1S1Critical = Math.floor(Math.floor(calc3KPower1S1Critical * wtype1S1ChartT1) * wtype1S1ChartT2); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型1技2

    calc4P2S1 = Math.floor(Math.floor(calc4P2S1 * wtype2S1ChartT1) * wtype2S1ChartT2); //敵ポケ１技2例外補正なし威力
    calc4KPower2S1 = Math.floor(Math.floor(calc4KPower2S1 * wtype2S1ChartT1) * wtype2S1ChartT2); //敵1ポケ技2（補正あり）威力
    calc4P2S1Critical = Math.floor(Math.floor(calc4P2S1Critical * wtype2S1ChartT1) * wtype2S1ChartT2); //敵ポケ１技2例外補正なし威力
    calc4KPower2S1Critical = Math.floor(Math.floor(calc4KPower2S1Critical * wtype2S1ChartT1) * wtype2S1ChartT2); //敵1ポケ技2（補正あり）威力
    calc3P2S1 = Math.floor(Math.floor(calc3P2S1 * wtype2S1ChartT1) * wtype2S1ChartT2); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S1 = Math.floor(Math.floor(calc3KPower2S1 * wtype2S1ChartT1) * wtype2S1ChartT2); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S1Critical = Math.floor(Math.floor(calc3P2S1Critical * wtype2S1ChartT1) * wtype2S1ChartT2); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S1Critical = Math.floor(Math.floor(calc3KPower2S1Critical * wtype2S1ChartT1) * wtype2S1ChartT2); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型1技3

    calc4P3S1 = Math.floor(Math.floor(calc4P3S1 * wtype3S1ChartT1) * wtype3S1ChartT2); //敵ポケ１技3例外補正なし威力
    calc4KPower3S1 = Math.floor(Math.floor(calc4KPower3S1 * wtype3S1ChartT1) * wtype3S1ChartT2); //敵1ポケ技3（補正あり）威力
    calc4P3S1Critical = Math.floor(Math.floor(calc4P3S1Critical * wtype3S1ChartT1) * wtype3S1ChartT2); //敵ポケ１技3例外補正なし威力
    calc4KPower3S1Critical = Math.floor(Math.floor(calc4KPower3S1Critical * wtype3S1ChartT1) * wtype3S1ChartT2); //敵1ポケ技3（補正あり）威力
    calc3P3S1 = Math.floor(Math.floor(calc3P3S1 * wtype3S1ChartT1) * wtype3S1ChartT2); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S1 = Math.floor(Math.floor(calc3KPower3S1 * wtype3S1ChartT1) * wtype3S1ChartT2); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S1Critical = Math.floor(Math.floor(calc3P3S1Critical * wtype3S1ChartT1) * wtype3S1ChartT2); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3KPower3S1Critical = Math.floor(Math.floor(calc3KPower3S1Critical * wtype3S1ChartT1) * wtype3S1ChartT2); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型1技4

    calc4P4S1 = Math.floor(Math.floor(calc4P4S1 * wtype4S1ChartT1) * wtype4S1ChartT2); //敵ポケ１技4例外補正なし威力
    calc4KPower4S1 = Math.floor(Math.floor(calc4KPower4S1 * wtype4S1ChartT1) * wtype4S1ChartT2); //敵1ポケ技4（補正あり）威力
    calc4P4S1Critical = Math.floor(Math.floor(calc4P4S1Critical * wtype4S1ChartT1) * wtype4S1ChartT2); //敵ポケ１技4例外補正なし威力
    calc4KPower4S1Critical = Math.floor(Math.floor(calc4KPower4S1Critical * wtype4S1ChartT1) * wtype4S1ChartT2); //敵1ポケ技4（補正あり）威力
    calc3P4S1 = Math.floor(Math.floor(calc3P4S1 * wtype4S1ChartT1) * wtype4S1ChartT2); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S1 = Math.floor(Math.floor(calc3KPower4S1 * wtype4S1ChartT1) * wtype4S1ChartT2); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S1Critical = Math.floor(Math.floor(calc3P4S1Critical * wtype4S1ChartT1) * wtype4S1ChartT2); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S1Critical = Math.floor(Math.floor(calc3KPower4S1Critical * wtype4S1ChartT1) * wtype4S1ChartT2); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型2技1

    calc4P1S2 = Math.floor(Math.floor(calc4P1S2 * wtype1S2ChartT1) * wtype1S2ChartT2); //敵ポケ2技1例外補正なし威力
    calc4KPower1S2 = Math.floor(Math.floor(calc4KPower1S2 * wtype1S2ChartT1) * wtype1S2ChartT2); //敵2ポケ技1（補正あり）威力
    calc4P1S2Critical = Math.floor(Math.floor(calc4P1S2Critical * wtype1S2ChartT1) * wtype1S2ChartT2); //敵ポケ2技1例外補正なし威力
    calc4KPower1S2Critical = Math.floor(Math.floor(calc4KPower1S2Critical * wtype1S2ChartT1) * wtype1S2ChartT2); //敵2ポケ技1（補正あり）威力
    calc3P1S2 = Math.floor(Math.floor(calc3P1S2 * wtype1S2ChartT1) * wtype1S2ChartT2); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower1S2 = Math.floor(Math.floor(calc3KPower1S2 * wtype1S2ChartT1) * wtype1S2ChartT2); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1S2Critical = Math.floor(Math.floor(calc3P1S2Critical * wtype1S2ChartT1) * wtype1S2ChartT2); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower1S2Critical = Math.floor(Math.floor(calc3KPower1S2Critical * wtype1S2ChartT1) * wtype1S2ChartT2); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型2技2

    calc4P2S2 = Math.floor(Math.floor(calc4P2S2 * wtype2S2ChartT1) * wtype2S2ChartT2); //敵ポケ2技2例外補正なし威力
    calc4KPower2S2 = Math.floor(Math.floor(calc4KPower2S2 * wtype2S2ChartT1) * wtype2S2ChartT2); //敵2ポケ技2（補正あり）威力
    calc4P2S2Critical = Math.floor(Math.floor(calc4P2S2Critical * wtype2S2ChartT1) * wtype2S2ChartT2); //敵ポケ2技2例外補正なし威力
    calc4KPower2S2Critical = Math.floor(Math.floor(calc4KPower2S2Critical * wtype2S2ChartT1) * wtype2S2ChartT2); //敵2ポケ技2（補正あり）威力
    calc3P2S2 = Math.floor(Math.floor(calc3P2S2 * wtype2S2ChartT1) * wtype2S2ChartT2); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S2 = Math.floor(Math.floor(calc3KPower2S2 * wtype2S2ChartT1) * wtype2S2ChartT2); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S2Critical = Math.floor(Math.floor(calc3P2S2Critical * wtype2S2ChartT1) * wtype2S2ChartT2); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S2Critical = Math.floor(Math.floor(calc3KPower2S2Critical * wtype2S2ChartT1) * wtype2S2ChartT2); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型2技3

    calc4P3S2 = Math.floor(Math.floor(calc4P3S2 * wtype3S2ChartT1) * wtype3S2ChartT2); //敵ポケ2技3例外補正なし威力
    calc4KPower3S2 = Math.floor(Math.floor(calc4KPower3S2 * wtype3S2ChartT1) * wtype3S2ChartT2); //敵2ポケ技3（補正あり）威力
    calc4P3S2Critical = Math.floor(Math.floor(calc4P3S2Critical * wtype3S2ChartT1) * wtype3S2ChartT2); //敵ポケ2技3例外補正なし威力
    calc4KPower3S2Critical = Math.floor(Math.floor(calc4KPower3S2Critical * wtype3S2ChartT1) * wtype3S2ChartT2); //敵2ポケ技3（補正あり）威力
    calc3P3S2 = Math.floor(Math.floor(calc3P3S2 * wtype3S2ChartT1) * wtype3S2ChartT2); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S2 = Math.floor(Math.floor(calc3KPower3S2 * wtype3S2ChartT1) * wtype3S2ChartT2); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S2Critical = Math.floor(Math.floor(calc3P3S2Critical * wtype3S2ChartT1) * wtype3S2ChartT2); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S2Critical = Math.floor(Math.floor(calc3KPower3S2Critical * wtype3S2ChartT1) * wtype3S2ChartT2); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型2技4

    calc4P4S2 = Math.floor(Math.floor(calc4P4S2 * wtype4S2ChartT1) * wtype4S2ChartT2); //敵ポケ2技4例外補正なし威力
    calc4KPower4S2 = Math.floor(Math.floor(calc4KPower4S2 * wtype4S2ChartT1) * wtype4S2ChartT2); //敵2ポケ技4（補正あり）威力
    calc4P4S2Critical = Math.floor(Math.floor(calc4P4S2Critical * wtype4S2ChartT1) * wtype4S2ChartT2); //敵ポケ2技4例外補正なし威力
    calc4KPower4S2Critical = Math.floor(Math.floor(calc4KPower4S2Critical * wtype4S2ChartT1) * wtype4S2ChartT2); //敵2ポケ技4（補正あり）威力
    calc3P4S2 = Math.floor(Math.floor(calc3P4S2 * wtype4S2ChartT1) * wtype4S2ChartT2); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S2 = Math.floor(Math.floor(calc3KPower4S2 * wtype4S2ChartT1) * wtype4S2ChartT2); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S2Critical = Math.floor(Math.floor(calc3P4S2Critical * wtype4S2ChartT1) * wtype4S2ChartT2); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S2Critical = Math.floor(Math.floor(calc3KPower4S2Critical * wtype4S2ChartT1) * wtype4S2ChartT2); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型3技1

    calc4P1S3 = Math.floor(Math.floor(calc4P1S3 * wtype1S3ChartT1) * wtype1S3ChartT2); //敵ポケ3技1例外補正なし威力
    calc4KPower1S3 = Math.floor(Math.floor(calc4KPower1S3 * wtype1S3ChartT1) * wtype1S3ChartT2); //敵3ポケ技1（補正あり）威力
    calc4P1S3Critical = Math.floor(Math.floor(calc4P1S3Critical * wtype1S3ChartT1) * wtype1S3ChartT2); //敵ポケ3技1例外補正なし威力
    calc4KPower1S3Critical = Math.floor(Math.floor(calc4KPower1S3Critical * wtype1S3ChartT1) * wtype1S3ChartT2); //敵3ポケ技1（補正あり）威力
    calc3P1S3 = Math.floor(Math.floor(calc3P1S3 * wtype1S3ChartT1) * wtype1S3ChartT2); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower1S3 = Math.floor(Math.floor(calc3KPower1S3 * wtype1S3ChartT1) * wtype1S3ChartT2); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1S3Critical = Math.floor(Math.floor(calc3P1S3Critical * wtype1S3ChartT1) * wtype1S3ChartT2); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower1S3Critical = Math.floor(Math.floor(calc3KPower1S3Critical * wtype1S3ChartT1) * wtype1S3ChartT2); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型3技2

    calc4P2S3 = Math.floor(Math.floor(calc4P2S3 * wtype2S3ChartT1) * wtype2S3ChartT2); //敵ポケ3技2例外補正なし威力
    calc4KPower2S3 = Math.floor(Math.floor(calc4KPower2S3 * wtype2S3ChartT1) * wtype2S3ChartT2); //敵3ポケ技2（補正あり）威力
    calc4P2S3Critical = Math.floor(Math.floor(calc4P2S3Critical * wtype2S3ChartT1) * wtype2S3ChartT2); //敵ポケ3技2例外補正なし威力
    calc4KPower2S3Critical = Math.floor(Math.floor(calc4KPower2S3Critical * wtype2S3ChartT1) * wtype2S3ChartT2); //敵3ポケ技2（補正あり）威力
    calc3P2S3 = Math.floor(Math.floor(calc3P2S3 * wtype2S3ChartT1) * wtype2S3ChartT2); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S3 = Math.floor(Math.floor(calc3KPower2S3 * wtype2S3ChartT1) * wtype2S3ChartT2); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S3Critical = Math.floor(Math.floor(calc3P2S3Critical * wtype2S3ChartT1) * wtype2S3ChartT2); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    calc3KPower2S3Critical = Math.floor(Math.floor(calc3KPower2S3Critical * wtype2S3ChartT1) * wtype2S3ChartT2); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型3技3

    calc4P3S3 = Math.floor(Math.floor(calc4P3S3 * wtype3S3ChartT1) * wtype3S3ChartT2); //敵ポケ3技3例外補正なし威力
    calc4KPower3S3 = Math.floor(Math.floor(calc4KPower3S3 * wtype3S3ChartT1) * wtype3S3ChartT2); //敵3ポケ技3（補正あり）威力
    calc4P3S3Critical = Math.floor(Math.floor(calc4P3S3Critical * wtype3S3ChartT1) * wtype3S3ChartT2); //敵ポケ3技3例外補正なし威力
    calc4KPower3S3Critical = Math.floor(Math.floor(calc4KPower3S3Critical * wtype3S3ChartT1) * wtype3S3ChartT2); //敵3ポケ技3（補正あり）威力
    calc3P3S3 = Math.floor(Math.floor(calc3P3S3 * wtype3S3ChartT1) * wtype3S3ChartT2); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S3 = Math.floor(Math.floor(calc3KPower3S3 * wtype3S3ChartT1) * wtype3S3ChartT2); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S3Critical = Math.floor(Math.floor(calc3P3S3Critical * wtype3S3ChartT1) * wtype3S3ChartT2); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S3Critical = Math.floor(Math.floor(calc3KPower3S3Critical * wtype3S3ChartT1) * wtype3S3ChartT2); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型3技4

    calc4P4S3 = Math.floor(Math.floor(calc4P4S3 * wtype4S3ChartT1) * wtype4S3ChartT2); //敵ポケ3技4例外補正なし威力
    calc4KPower4S3 = Math.floor(Math.floor(calc4KPower4S3 * wtype4S3ChartT1) * wtype4S3ChartT2); //敵3ポケ技4（補正あり）威力
    calc4P4S3Critical = Math.floor(Math.floor(calc4P4S3Critical * wtype4S3ChartT1) * wtype4S3ChartT2); //敵ポケ3技4例外補正なし威力
    calc4KPower4S3Critical = Math.floor(Math.floor(calc4KPower4S3Critical * wtype4S3ChartT1) * wtype4S3ChartT2); //敵3ポケ技4（補正あり）威力
    calc3P4S3 = Math.floor(Math.floor(calc3P4S3 * wtype4S3ChartT1) * wtype4S3ChartT2); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S3 = Math.floor(Math.floor(calc3KPower4S3 * wtype4S3ChartT1) * wtype4S3ChartT2); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S3Critical = Math.floor(Math.floor(calc3P4S3Critical * wtype4S3ChartT1) * wtype4S3ChartT2); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower4S3Critical = Math.floor(Math.floor(calc3KPower4S3Critical * wtype4S3ChartT1) * wtype4S3ChartT2); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    calc4P1S4 = Math.floor(Math.floor(calc4P1S4 * wtype1S4ChartT1) * wtype1S4ChartT2); //敵ポケ4技1例外補正なし威力
    calc4KPower1S4 = Math.floor(Math.floor(calc4KPower1S4 * wtype1S4ChartT1) * wtype1S4ChartT2); //敵4ポケ技1（補正あり）威力
    calc4P1S4Critical = Math.floor(Math.floor(calc4P1S4Critical * wtype1S4ChartT1) * wtype1S4ChartT2); //敵ポケ4技1例外補正なし威力
    calc4KPower1S4Critical = Math.floor(Math.floor(calc4KPower1S4Critical * wtype1S4ChartT1) * wtype1S4ChartT2); //敵4ポケ技1（補正あり）威力
    calc3P1S4 = Math.floor(Math.floor(calc3P1S4 * wtype1S4ChartT1) * wtype1S4ChartT2); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower1S4 = Math.floor(Math.floor(calc3KPower1S4 * wtype1S4ChartT1) * wtype1S4ChartT2); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P1S4Critical = Math.floor(Math.floor(calc3P1S4Critical * wtype1S4ChartT1) * wtype1S4ChartT2); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower1S4Critical = Math.floor(Math.floor(calc3KPower1S4Critical * wtype1S4ChartT1) * wtype1S4ChartT2); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型4技2

    calc4P2S4 = Math.floor(Math.floor(calc4P2S4 * wtype2S4ChartT1) * wtype2S4ChartT2); //敵ポケ4技2例外補正なし威力
    calc4KPower2S4 = Math.floor(Math.floor(calc4KPower2S4 * wtype2S4ChartT1) * wtype2S4ChartT2); //敵4ポケ技2（補正あり）威力
    calc4P2S4Critical = Math.floor(Math.floor(calc4P2S4Critical * wtype2S4ChartT1) * wtype2S4ChartT2); //敵ポケ4技2例外補正なし威力
    calc4KPower2S4Critical = Math.floor(Math.floor(calc4KPower2S4Critical * wtype2S4ChartT1) * wtype2S4ChartT2); //敵4ポケ技2（補正あり）威力
    calc3P2S4 = Math.floor(Math.floor(calc3P2S4 * wtype2S4ChartT1) * wtype2S4ChartT2); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower2S4 = Math.floor(Math.floor(calc3KPower2S4 * wtype2S4ChartT1) * wtype2S4ChartT2); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P2S4Critical = Math.floor(Math.floor(calc3P2S4Critical * wtype2S4ChartT1) * wtype2S4ChartT2); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower2S4Critical = Math.floor(Math.floor(calc3KPower2S4Critical * wtype2S4ChartT1) * wtype2S4ChartT2); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型4技3

    calc4P3S4 = Math.floor(Math.floor(calc4P3S4 * wtype3S4ChartT1) * wtype3S4ChartT2); //敵ポケ4技3例外補正なし威力
    calc4KPower3S4 = Math.floor(Math.floor(calc4KPower3S4 * wtype3S4ChartT1) * wtype3S4ChartT2); //敵4ポケ技3（補正あり）威力
    calc4P3S4Critical = Math.floor(Math.floor(calc4P3S4Critical * wtype3S4ChartT1) * wtype3S4ChartT2); //敵ポケ4技3例外補正なし威力
    calc4KPower3S4Critical = Math.floor(Math.floor(calc4KPower3S4Critical * wtype3S4ChartT1) * wtype3S4ChartT2); //敵4ポケ技3（補正あり）威力
    calc3P3S4 = Math.floor(Math.floor(calc3P3S4 * wtype3S4ChartT1) * wtype3S4ChartT2); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower3S4 = Math.floor(Math.floor(calc3KPower3S4 * wtype3S4ChartT1) * wtype3S4ChartT2); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P3S4Critical = Math.floor(Math.floor(calc3P3S4Critical * wtype3S4ChartT1) * wtype3S4ChartT2); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    calc3KPower3S4Critical = Math.floor(Math.floor(calc3KPower3S4Critical * wtype3S4ChartT1) * wtype3S4ChartT2); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //敵型4技4

    calc4P4S4 = Math.floor(Math.floor(calc4P4S4 * wtype4S4ChartT1) * wtype4S4ChartT2); //敵ポケ4技4例外補正なし威力
    calc4KPower4S4 = Math.floor(Math.floor(calc4KPower4S4 * wtype4S4ChartT1) * wtype4S4ChartT2); //敵4ポケ技4（補正あり）威力
    calc4P4S4Critical = Math.floor(Math.floor(calc4P4S4Critical * wtype4S4ChartT1) * wtype4S4ChartT2); //敵ポケ4技4例外補正なし威力
    calc4KPower4S4Critical = Math.floor(Math.floor(calc4KPower4S4Critical * wtype4S4ChartT1) * wtype4S4ChartT2); //敵4ポケ技4（補正あり）威力
    calc3P4S4 = Math.floor(Math.floor(calc3P4S4 * wtype4S4ChartT1) * wtype4S4ChartT2); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S4 = Math.floor(Math.floor(calc3KPower4S4 * wtype4S4ChartT1) * wtype4S4ChartT2); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    calc3P4S4Critical = Math.floor(Math.floor(calc3P4S4Critical * wtype4S4ChartT1) * wtype4S4ChartT2); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    calc3KPower4S4Critical = Math.floor(Math.floor(calc3KPower4S4Critical * wtype4S4ChartT1) * wtype4S4ChartT2); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //!ハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルター
    //!ハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルター
    //!ハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルターハドロ　フィルター

    if (selectedTekiAbility === "ハードロック" || selectedTekiAbility === "フィルター") {
      if (wtype1ChartT1 * wtype1ChartT2 >= 2) {
        //自分技1
        calc3P1_S1 = Math.floor((calc3P1_S1 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 75) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 75) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 75) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 75) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1 = Math.floor((calc4P1_S1 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 75) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 75) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 75) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 75) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 75) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 75) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 75) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 75) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 75) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 75) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 75) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 75) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 75) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }

      if (wtype2ChartT1 * wtype2ChartT2 >= 2) {
        //自分技2
        calc3P2_S1 = Math.floor((calc3P2_S1 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 75) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 75) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 75) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 75) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1 = Math.floor((calc4P2_S1 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 75) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 75) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 75) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 75) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 75) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 75) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 75) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 75) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 75) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 75) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 75) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 75) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 75) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }

      if (wtype3ChartT1 * wtype3ChartT2 >= 2) {
        //自分技3
        calc3P3_S1 = Math.floor((calc3P3_S1 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 75) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 75) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 75) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 75) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1 = Math.floor((calc4P3_S1 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 75) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 75) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 75) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 75) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 75) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 75) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 75) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 75) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 75) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 75) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 75) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 75) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 75) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }

      if (wtype4ChartT1 * wtype4ChartT2 >= 2) {
        //自分技4
        calc3P4_S1 = Math.floor((calc3P4_S1 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 75) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 75) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 75) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 75) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1 = Math.floor((calc4P4_S1 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 75) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 75) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 75) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 75) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 75) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 75) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 75) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 75) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 75) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 75) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 75) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 75) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 75) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    //!敵ハドロ・フィルター補正敵ハドロ・フィルター補正敵ハドロ・フィルター補正敵ハドロ・フィルター補正
    //!敵ハドロ・フィルター補正敵ハドロ・フィルター補正敵ハドロ・フィルター補正敵ハドロ・フィルター補正
    //!敵ハドロ・フィルター補正敵ハドロ・フィルター補正敵ハドロ・フィルター補正敵ハドロ・フィルター補正
    if (selectedAbility === "ハードロック" || selectedAbility === "フィルター") {
      if (wtype1S1ChartT1 * wtype1S1ChartT2 >= 2) {
        //敵型1技1
        calc4P1S1 = Math.floor((calc4P1S1 * 75) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 75) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 75) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 75) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 75) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 75) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 75) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 75) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S1ChartT1 * wtype2S1ChartT2 >= 2) {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 75) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 75) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 75) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 75) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 75) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 75) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 75) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 75) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S1ChartT1 * wtype3S1ChartT2 >= 2) {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 75) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 75) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 75) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 75) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 75) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 75) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 75) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 75) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S1ChartT1 * wtype4S1ChartT2 >= 2) {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 75) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 75) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 75) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 75) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 75) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 75) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 75) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 75) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2ChartT1 * wtype1S2ChartT2 >= 2) {
        //敵型2技1
        calc4P1S2 = Math.floor((calc4P1S2 * 75) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 75) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 75) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 75) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 75) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 75) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 75) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 75) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S2ChartT1 * wtype2S2ChartT2 >= 2) {
        //敵型2技2

        calc4P2S2 = Math.floor((calc4P2S2 * 75) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 75) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 75) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 75) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 75) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 75) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 75) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 75) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2ChartT1 * wtype3S2ChartT2 >= 2) {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 75) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 75) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 75) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 75) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 75) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 75) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 75) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 75) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S2ChartT1 * wtype4S2ChartT2 >= 2) {
        //敵型2技4
        calc4P4S2 = Math.floor((calc4P4S2 * 75) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 75) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 75) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 75) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 75) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 75) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 75) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 75) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3ChartT1 * wtype1S3ChartT2 >= 2) {
        //敵型3技1

        calc4P1S3 = Math.floor((calc4P1S3 * 75) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 75) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 75) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 75) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 75) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 75) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 75) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 75) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S3ChartT1 * wtype2S3ChartT2 >= 2) {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 75) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 75) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 75) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 75) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 75) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 75) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 75) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 75) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S3ChartT1 * wtype3S3ChartT2 >= 2) {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 75) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 75) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 75) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 75) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 75) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 75) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 75) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 75) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S3ChartT1 * wtype4S3ChartT2 >= 2) {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 75) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 75) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 75) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 75) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 75) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 75) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 75) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 75) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4ChartT1 * wtype1S4ChartT2 >= 2) {
        calc4P1S4 = Math.floor((calc4P1S4 * 75) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 75) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 75) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 75) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 75) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 75) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 75) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 75) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S4ChartT1 * wtype2S4ChartT2 >= 2) {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 75) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 75) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 75) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 75) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 75) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 75) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 75) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 75) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S4ChartT1 * wtype3S4ChartT2 >= 2) {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 75) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 75) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 75) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 75) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 75) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 75) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 75) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 75) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S4ChartT1 * wtype4S4ChartT2 >= 2) {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 75) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 75) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 75) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 75) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 75) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 75) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 75) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 75) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //!たつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおび
    //!たつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおび
    //!たつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおび
    //!たつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおびたつおび
    if (myItem === "たつじんのおび") {
      // if (wtype1ChartT1 === 2 || wtype1ChartT2 === 2) {
      if (wtype1ChartT1 * wtype1ChartT2 >= 2) {
        //自分技1
        calc3P1_S1 = Math.floor((calc3P1_S1 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 120) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 120) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 120) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 120) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1 = Math.floor((calc4P1_S1 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 120) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 120) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 120) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 120) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 120) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 120) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 120) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 120) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 120) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 120) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 120) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 120) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 120) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }

      if (wtype2ChartT1 * wtype2ChartT2 >= 2) {
        //自分技2
        calc3P2_S1 = Math.floor((calc3P2_S1 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 120) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 120) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 120) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 120) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1 = Math.floor((calc4P2_S1 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 120) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 120) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 120) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 120) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 120) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 120) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 120) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 120) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 120) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 120) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 120) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 120) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 120) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }

      if (wtype3ChartT1 * wtype3ChartT2 >= 2) {
        //自分技3
        calc3P3_S1 = Math.floor((calc3P3_S1 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 120) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 120) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 120) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 120) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1 = Math.floor((calc4P3_S1 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 120) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 120) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 120) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 120) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 120) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 120) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 120) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 120) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 120) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 120) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 120) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 120) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 120) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }

      if (wtype4ChartT1 * wtype4ChartT2 >= 2) {
        //自分技4
        calc3P4_S1 = Math.floor((calc3P4_S1 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 120) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 120) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 120) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 120) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1 = Math.floor((calc4P4_S1 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 120) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 120) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 120) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 120) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 120) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 120) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 120) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 120) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 120) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 120) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 120) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 120) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 120) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    //!敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正
    //!敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正
    //!敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正敵たつおび補正
    if (tekiItem1 === "たつじんのおび") {
      if (wtype1S1ChartT1 * wtype1S1ChartT2 >= 2) {
        //敵型1技1
        calc4P1S1 = Math.floor((calc4P1S1 * 120) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 120) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 120) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 120) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 120) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 120) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 120) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 120) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S1ChartT1 * wtype2S1ChartT2 >= 2) {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 120) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 120) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 120) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 120) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 120) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 120) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 120) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 120) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S1ChartT1 * wtype3S1ChartT2 >= 2) {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 120) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 120) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 120) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 120) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 120) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 120) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 120) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 120) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S1ChartT1 * wtype4S1ChartT2 >= 2) {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 120) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 120) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 120) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 120) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 120) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 120) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 120) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 120) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    if (tekiItem2 === "たつじんのおび") {
      if (wtype1S2ChartT1 * wtype1S2ChartT2 >= 2) {
        //敵型2技1
        calc4P1S2 = Math.floor((calc4P1S2 * 120) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 120) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 120) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 120) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 120) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 120) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 120) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 120) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S2ChartT1 * wtype2S2ChartT2 >= 2) {
        //敵型2技2

        calc4P2S2 = Math.floor((calc4P2S2 * 120) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 120) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 120) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 120) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 120) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 120) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 120) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 120) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2ChartT1 * wtype3S2ChartT2 >= 2) {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 120) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 120) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 120) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 120) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 120) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 120) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 120) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 120) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S2ChartT1 * wtype4S2ChartT2 >= 2) {
        //敵型2技4
        calc4P4S2 = Math.floor((calc4P4S2 * 120) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 120) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 120) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 120) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 120) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 120) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 120) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 120) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    if (tekiItem3 === "たつじんのおび") {
      if (wtype1S3ChartT1 * wtype1S3ChartT2 >= 2) {
        //敵型3技1

        calc4P1S3 = Math.floor((calc4P1S3 * 120) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 120) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 120) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 120) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 120) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 120) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 120) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 120) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S3ChartT1 * wtype2S3ChartT2 >= 2) {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 120) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 120) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 120) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 120) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 120) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 120) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 120) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 120) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S3ChartT1 * wtype3S3ChartT2 >= 2) {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 120) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 120) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 120) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 120) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 120) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 120) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 120) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 120) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S3ChartT1 * wtype4S3ChartT2 >= 2) {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 120) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 120) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 120) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 120) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 120) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 120) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 120) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 120) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    if (tekiItem4 === "たつじんのおび") {
      if (wtype1S4ChartT1 * wtype1S4ChartT2 >= 2) {
        calc4P1S4 = Math.floor((calc4P1S4 * 120) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 120) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 120) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 120) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 120) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 120) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 120) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 120) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S4ChartT1 * wtype2S4ChartT2 >= 2) {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 120) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 120) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 120) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 120) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 120) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 120) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 120) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 120) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S4ChartT1 * wtype3S4ChartT2 >= 2) {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 120) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 120) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 120) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 120) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 120) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 120) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 120) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 120) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S4ChartT1 * wtype4S4ChartT2 >= 2) {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 120) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 120) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 120) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 120) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 120) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 120) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 120) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 120) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //!いろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがね
    //!いろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがね
    //!いろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがね
    //!いろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがねいろめがね
    if (selectedAbility === "いろめがね") {
      if (wtype1ChartT1 * wtype1ChartT2 <= 0.5) {
        //自分技1
        calc3P1_S1 = Math.floor((calc3P1_S1 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1 = Math.floor((calc4P1_S1 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力

        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 200) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 200) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 200) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 200) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 200) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }

      if (wtype2ChartT1 * wtype2ChartT2 <= 0.5) {
        //自分技2
        calc3P2_S1 = Math.floor((calc3P2_S1 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1 = Math.floor((calc4P2_S1 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力

        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 200) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 200) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 200) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 200) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 200) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }

      if (wtype3ChartT1 * wtype3ChartT2 <= 0.5) {
        //自分技3
        calc3P3_S1 = Math.floor((calc3P3_S1 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1 = Math.floor((calc4P3_S1 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力

        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 200) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 200) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 200) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 200) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 200) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }

      if (wtype4ChartT1 * wtype4ChartT2 <= 0.5) {
        //自分技4
        calc3P4_S1 = Math.floor((calc3P4_S1 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1 = Math.floor((calc4P4_S1 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        /////////急所//////////
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力

        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 200) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 200) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 200) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 200) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 200) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    //!いろめがね補正いろめがね補正いろめがね補正いろめがね補正いろめがね補正
    //!いろめがね補正いろめがね補正いろめがね補正いろめがね補正いろめがね補正
    //!いろめがね補正いろめがね補正いろめがね補正いろめがね補正いろめがね補正
    if (selectedTekiAbility === "いろめがね") {
      if (wtype1S1ChartT1 * wtype1S1ChartT2 <= 0.5) {
        //敵型1技1
        calc4P1S1 = Math.floor((calc4P1S1 * 200) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 200) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 200) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 200) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 200) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 200) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 200) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 200) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S1ChartT1 * wtype2S1ChartT2 <= 0.5) {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 200) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 200) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 200) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 200) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 200) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 200) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 200) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 200) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S1ChartT1 * wtype3S1ChartT2 <= 0.5) {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 200) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 200) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 200) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 200) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 200) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 200) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 200) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 200) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S1ChartT1 * wtype4S1ChartT2 <= 0.5) {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 200) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 200) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 200) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 200) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 200) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 200) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 200) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 200) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2ChartT1 * wtype1S2ChartT2 <= 0.5) {
        //敵型2技1
        calc4P1S2 = Math.floor((calc4P1S2 * 200) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 200) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 200) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 200) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 200) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 200) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 200) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 200) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S2ChartT1 * wtype2S2ChartT2 <= 0.5) {
        //敵型2技2

        calc4P2S2 = Math.floor((calc4P2S2 * 200) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 200) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 200) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 200) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 200) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 200) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 200) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 200) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2ChartT1 * wtype3S2ChartT2 <= 0.5) {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 200) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 200) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 200) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 200) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 200) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 200) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 200) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 200) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S2ChartT1 * wtype4S2ChartT2 <= 0.5) {
        //敵型2技4
        calc4P4S2 = Math.floor((calc4P4S2 * 200) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 200) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 200) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 200) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 200) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 200) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 200) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 200) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3ChartT1 * wtype1S3ChartT2 <= 0.5) {
        //敵型3技1

        calc4P1S3 = Math.floor((calc4P1S3 * 200) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 200) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 200) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 200) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 200) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 200) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 200) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 200) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S3ChartT1 * wtype2S3ChartT2 <= 0.5) {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 200) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 200) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 200) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 200) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 200) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 200) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 200) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 200) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S3ChartT1 * wtype3S3ChartT2 <= 0.5) {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 200) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 200) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 200) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 200) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 200) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 200) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 200) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 200) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S3ChartT1 * wtype4S3ChartT2 <= 0.5) {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 200) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 200) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 200) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 200) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 200) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 200) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 200) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 200) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4ChartT1 * wtype1S4ChartT2 <= 0.5) {
        calc4P1S4 = Math.floor((calc4P1S4 * 200) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 200) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 200) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 200) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 200) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 200) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 200) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 200) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S4ChartT1 * wtype2S4ChartT2 <= 0.5) {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 200) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 200) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 200) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 200) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 200) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 200) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 200) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 200) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S4ChartT1 * wtype3S4ChartT2 <= 0.5) {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 200) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 200) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 200) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 200) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 200) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 200) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 200) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 200) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S4ChartT1 * wtype4S4ChartT2 <= 0.5) {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 200) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 200) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 200) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 200) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 200) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 200) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 200) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 200) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //! 半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正
    //! 半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正
    //! 半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正半減の実補正

    if (tekiItem1 === "イトケのみ") {
      if (wtype1 === "みず") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "みず") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "みず") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "みず") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }

    if (tekiItem2 === "イトケのみ") {
      if (wtype1 === "みず") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "みず") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "みず") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "みず") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }

    if (tekiItem3 === "イトケのみ") {
      if (wtype1 === "みず") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "みず") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "みず") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "みず") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }

    if (tekiItem4 === "イトケのみ") {
      if (wtype1 === "みず") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "みず") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "みず") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "みず") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ウタンのみ") {
      if (wtype1 === "エスパー") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "エスパー") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "エスパー") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "エスパー") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ウタンのみ") {
      if (wtype1 === "エスパー") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "エスパー") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "エスパー") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "エスパー") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ウタンのみ") {
      if (wtype1 === "エスパー") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "エスパー") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "エスパー") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "エスパー") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ウタンのみ") {
      if (wtype1 === "エスパー") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "エスパー") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "エスパー") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "エスパー") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "オッカのみ") {
      if (wtype1 === "ほのお") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "ほのお") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "ほのお") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "ほのお") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "オッカのみ") {
      if (wtype1 === "ほのお") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "ほのお") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "ほのお") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "ほのお") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "オッカのみ") {
      if (wtype1 === "ほのお") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "ほのお") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "ほのお") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "ほのお") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "オッカのみ") {
      if (wtype1 === "ほのお") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "ほのお") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "ほのお") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "ほのお") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "シュカのみ") {
      if (wtype1 === "じめん") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "じめん") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "じめん") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "じめん") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }

    if (tekiItem2 === "シュカのみ") {
      if (wtype1 === "じめん") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "じめん") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "じめん") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "じめん") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }

    if (tekiItem3 === "シュカのみ") {
      if (wtype1 === "じめん") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "じめん") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "じめん") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "じめん") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }

    if (tekiItem4 === "シュカのみ") {
      if (wtype1 === "じめん") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "じめん") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "じめん") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "じめん") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ソクノのみ") {
      if (wtype1 === "でんき") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "でんき") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "でんき") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "でんき") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ソクノのみ") {
      if (wtype1 === "でんき") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "でんき") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "でんき") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "でんき") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ソクノのみ") {
      if (wtype1 === "でんき") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "でんき") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "でんき") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "でんき") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ソクノのみ") {
      if (wtype1 === "でんき") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "でんき") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "でんき") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "でんき") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ナモのみ") {
      if (wtype1 === "あく") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "あく") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "あく") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "あく") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ナモのみ") {
      if (wtype1 === "あく") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "あく") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "あく") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "あく") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ナモのみ") {
      if (wtype1 === "あく") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "あく") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "あく") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "あく") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ナモのみ") {
      if (wtype1 === "あく") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "あく") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "あく") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "あく") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "バコウのみ") {
      if (wtype1 === "ひこう") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "ひこう") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "ひこう") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "ひこう") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "バコウのみ") {
      if (wtype1 === "ひこう") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "ひこう") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "ひこう") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "ひこう") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "バコウのみ") {
      if (wtype1 === "ひこう") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "ひこう") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "ひこう") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "ひこう") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "バコウのみ") {
      if (wtype1 === "ひこう") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "ひこう") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "ひこう") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "ひこう") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ハバンのみ") {
      if (wtype1 === "ドラゴン") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "ドラゴン") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "ドラゴン") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "ドラゴン") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ハバンのみ") {
      if (wtype1 === "ドラゴン") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "ドラゴン") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "ドラゴン") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "ドラゴン") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ハバンのみ") {
      if (wtype1 === "ドラゴン") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "ドラゴン") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "ドラゴン") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "ドラゴン") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ハバンのみ") {
      if (wtype1 === "ドラゴン") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "ドラゴン") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "ドラゴン") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "ドラゴン") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ヤチェのみ") {
      if (wtype1 === "こおり") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "こおり") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "こおり") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "こおり") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ヤチェのみ") {
      if (wtype1 === "こおり") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "こおり") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "こおり") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "こおり") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ヤチェのみ") {
      if (wtype1 === "こおり") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "こおり") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "こおり") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "こおり") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ヤチェのみ") {
      if (wtype1 === "こおり") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "こおり") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "こおり") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "こおり") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ヨプのみ") {
      if (wtype1 === "かくとう") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "かくとう") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "かくとう") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "かくとう") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ヨプのみ") {
      if (wtype1 === "かくとう") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "かくとう") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "かくとう") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "かくとう") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ヨプのみ") {
      if (wtype1 === "かくとう") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "かくとう") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "かくとう") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "かくとう") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ヨプのみ") {
      if (wtype1 === "かくとう") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "かくとう") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "かくとう") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "かくとう") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "ヨロギのみ") {
      if (wtype1 === "いわ") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "いわ") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "いわ") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "いわ") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "ヨロギのみ") {
      if (wtype1 === "いわ") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "いわ") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "いわ") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "いわ") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "ヨロギのみ") {
      if (wtype1 === "いわ") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "いわ") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "いわ") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "いわ") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "ヨロギのみ") {
      if (wtype1 === "いわ") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "いわ") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "いわ") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "いわ") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (tekiItem1 === "リンドのみ") {
      if (wtype1 === "くさ") {
        calc4P1_S1Critical = Math.floor((calc4P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4P1_S1 = Math.floor((calc4P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power1Critical = Math.floor((calc4KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc4KS1Power1 = Math.floor((calc4KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3P1_S1Critical = Math.floor((calc3P1_S1Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3P1_S1 = Math.floor((calc3P1_S1 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power1Critical = Math.floor((calc3KS1Power1Critical * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
        calc3KS1Power1 = Math.floor((calc3KS1Power1 * 50) / 100); //自分ポケ技1が敵型1への（補正あり）威力
      }
      if (wtype2 === "くさ") {
        calc4P2_S1Critical = Math.floor((calc4P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4P2_S1 = Math.floor((calc4P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power2Critical = Math.floor((calc4KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc4KS1Power2 = Math.floor((calc4KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3P2_S1Critical = Math.floor((calc3P2_S1Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3P2_S1 = Math.floor((calc3P2_S1 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power2Critical = Math.floor((calc3KS1Power2Critical * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
        calc3KS1Power2 = Math.floor((calc3KS1Power2 * 50) / 100); //自分ポケ技2が敵型1への（補正あり）威力
      }
      if (wtype3 === "くさ") {
        calc4P3_S1Critical = Math.floor((calc4P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4P3_S1 = Math.floor((calc4P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power3Critical = Math.floor((calc4KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc4KS1Power3 = Math.floor((calc4KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3P3_S1Critical = Math.floor((calc3P3_S1Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3P3_S1 = Math.floor((calc3P3_S1 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power3Critical = Math.floor((calc3KS1Power3Critical * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
        calc3KS1Power3 = Math.floor((calc3KS1Power3 * 50) / 100); //自分ポケ技3が敵型1への（補正あり）威力
      }
      if (wtype4 === "くさ") {
        calc4P4_S1Critical = Math.floor((calc4P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4P4_S1 = Math.floor((calc4P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc4KS1Power4Critical = Math.floor((calc4KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc4KS1Power4 = Math.floor((calc4KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3P4_S1Critical = Math.floor((calc3P4_S1Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3P4_S1 = Math.floor((calc3P4_S1 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
        calc3KS1Power4Critical = Math.floor((calc3KS1Power4Critical * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
        calc3KS1Power4 = Math.floor((calc3KS1Power4 * 50) / 100); //自分ポケ技4が敵型1への（補正あり）威力
      }
    }
    if (tekiItem2 === "リンドのみ") {
      if (wtype1 === "くさ") {
        calc4P1_S2Critical = Math.floor((calc4P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4P1_S2 = Math.floor((calc4P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power1Critical = Math.floor((calc4KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc4KS2Power1 = Math.floor((calc4KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3P1_S2Critical = Math.floor((calc3P1_S2Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3P1_S2 = Math.floor((calc3P1_S2 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power1Critical = Math.floor((calc3KS2Power1Critical * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
        calc3KS2Power1 = Math.floor((calc3KS2Power1 * 50) / 100); //自分ポケ技1が敵型2への（補正あり）威力
      }
      if (wtype2 === "くさ") {
        calc4P2_S2Critical = Math.floor((calc4P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4P2_S2 = Math.floor((calc4P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power2Critical = Math.floor((calc4KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc4KS2Power2 = Math.floor((calc4KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3P2_S2Critical = Math.floor((calc3P2_S2Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3P2_S2 = Math.floor((calc3P2_S2 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power2Critical = Math.floor((calc3KS2Power2Critical * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
        calc3KS2Power2 = Math.floor((calc3KS2Power2 * 50) / 100); //自分ポケ技2が敵型2への（補正あり）威力
      }
      if (wtype3 === "くさ") {
        calc4P3_S2Critical = Math.floor((calc4P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4P3_S2 = Math.floor((calc4P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power3Critical = Math.floor((calc4KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc4KS2Power3 = Math.floor((calc4KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3P3_S2Critical = Math.floor((calc3P3_S2Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3P3_S2 = Math.floor((calc3P3_S2 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power3Critical = Math.floor((calc3KS2Power3Critical * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
        calc3KS2Power3 = Math.floor((calc3KS2Power3 * 50) / 100); //自分ポケ技3が敵型2への（補正あり）威力
      }
      if (wtype4 === "くさ") {
        calc4P4_S2Critical = Math.floor((calc4P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4P4_S2 = Math.floor((calc4P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc4KS2Power4Critical = Math.floor((calc4KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc4KS2Power4 = Math.floor((calc4KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3P4_S2Critical = Math.floor((calc3P4_S2Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3P4_S2 = Math.floor((calc3P4_S2 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
        calc3KS2Power4Critical = Math.floor((calc3KS2Power4Critical * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
        calc3KS2Power4 = Math.floor((calc3KS2Power4 * 50) / 100); //自分ポケ技4が敵型2への（補正あり）威力
      }
    }
    if (tekiItem3 === "リンドのみ") {
      if (wtype1 === "くさ") {
        calc4P1_S3Critical = Math.floor((calc4P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4P1_S3 = Math.floor((calc4P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power1Critical = Math.floor((calc4KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc4KS3Power1 = Math.floor((calc4KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3P1_S3Critical = Math.floor((calc3P1_S3Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3P1_S3 = Math.floor((calc3P1_S3 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power1Critical = Math.floor((calc3KS3Power1Critical * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
        calc3KS3Power1 = Math.floor((calc3KS3Power1 * 50) / 100); //自分ポケ技1が敵型3への（補正あり）威力
      }
      if (wtype2 === "くさ") {
        calc4P2_S3Critical = Math.floor((calc4P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4P2_S3 = Math.floor((calc4P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power2Critical = Math.floor((calc4KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc4KS3Power2 = Math.floor((calc4KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3P2_S3Critical = Math.floor((calc3P2_S3Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3P2_S3 = Math.floor((calc3P2_S3 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power2Critical = Math.floor((calc3KS3Power2Critical * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
        calc3KS3Power2 = Math.floor((calc3KS3Power2 * 50) / 100); //自分ポケ技2が敵型3への（補正あり）威力
      }
      if (wtype3 === "くさ") {
        calc4P3_S3Critical = Math.floor((calc4P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4P3_S3 = Math.floor((calc4P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power3Critical = Math.floor((calc4KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc4KS3Power3 = Math.floor((calc4KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3P3_S3Critical = Math.floor((calc3P3_S3Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3P3_S3 = Math.floor((calc3P3_S3 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power3Critical = Math.floor((calc3KS3Power3Critical * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
        calc3KS3Power3 = Math.floor((calc3KS3Power3 * 50) / 100); //自分ポケ技3が敵型3への（補正あり）威力
      }
      if (wtype4 === "くさ") {
        calc4P4_S3Critical = Math.floor((calc4P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4P4_S3 = Math.floor((calc4P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc4KS3Power4Critical = Math.floor((calc4KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc4KS3Power4 = Math.floor((calc4KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3P4_S3Critical = Math.floor((calc3P4_S3Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3P4_S3 = Math.floor((calc3P4_S3 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
        calc3KS3Power4Critical = Math.floor((calc3KS3Power4Critical * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
        calc3KS3Power4 = Math.floor((calc3KS3Power4 * 50) / 100); //自分ポケ技4が敵型3への（補正あり）威力
      }
    }
    if (tekiItem4 === "リンドのみ") {
      if (wtype1 === "くさ") {
        calc4P1_S4Critical = Math.floor((calc4P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4P1_S4 = Math.floor((calc4P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power1Critical = Math.floor((calc4KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc4KS4Power1 = Math.floor((calc4KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3P1_S4Critical = Math.floor((calc3P1_S4Critical * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3P1_S4 = Math.floor((calc3P1_S4 * 50) / 100); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power1Critical = Math.floor((calc3KS4Power1Critical * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
        calc3KS4Power1 = Math.floor((calc3KS4Power1 * 50) / 100); //自分ポケ技1が敵型4への（補正あり）威力
      }
      if (wtype2 === "くさ") {
        calc4P2_S4Critical = Math.floor((calc4P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4P2_S4 = Math.floor((calc4P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power2Critical = Math.floor((calc4KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc4KS4Power2 = Math.floor((calc4KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3P2_S4Critical = Math.floor((calc3P2_S4Critical * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3P2_S4 = Math.floor((calc3P2_S4 * 50) / 100); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power2Critical = Math.floor((calc3KS4Power2Critical * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
        calc3KS4Power2 = Math.floor((calc3KS4Power2 * 50) / 100); //自分ポケ技2が敵型4への（補正あり）威力
      }
      if (wtype3 === "くさ") {
        calc4P3_S4Critical = Math.floor((calc4P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4P3_S4 = Math.floor((calc4P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power3Critical = Math.floor((calc4KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc4KS4Power3 = Math.floor((calc4KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3P3_S4Critical = Math.floor((calc3P3_S4Critical * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3P3_S4 = Math.floor((calc3P3_S4 * 50) / 100); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power3Critical = Math.floor((calc3KS4Power3Critical * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
        calc3KS4Power3 = Math.floor((calc3KS4Power3 * 50) / 100); //自分ポケ技3が敵型4への（補正あり）威力
      }
      if (wtype4 === "くさ") {
        calc4P4_S4Critical = Math.floor((calc4P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4P4_S4 = Math.floor((calc4P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc4KS4Power4Critical = Math.floor((calc4KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc4KS4Power4 = Math.floor((calc4KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3P4_S4Critical = Math.floor((calc3P4_S4Critical * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3P4_S4 = Math.floor((calc3P4_S4 * 50) / 100); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力
        calc3KS4Power4Critical = Math.floor((calc3KS4Power4Critical * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
        calc3KS4Power4 = Math.floor((calc3KS4Power4 * 50) / 100); //自分ポケ技4が敵型4への（補正あり）威力
      }
    }

    if (myItem === "イトケのみ") {
      if (wtype1S1 === "みず") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "みず") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "みず") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "みず") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "みず") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "みず") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "みず") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "みず") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "みず") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "みず") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "みず") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "みず") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "みず") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "みず") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "みず") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "みず") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ウタンのみ") {
      if (wtype1S1 === "エスパー") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "エスパー") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "エスパー") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "エスパー") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "エスパー") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "エスパー") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "エスパー") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "エスパー") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "エスパー") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "エスパー") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "エスパー") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "エスパー") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "エスパー") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "エスパー") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "エスパー") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "エスパー") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "オッカのみ") {
      if (wtype1S1 === "ほのお") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "ほのお") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "ほのお") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "ほのお") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "ほのお") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "ほのお") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "ほのお") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "ほのお") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "ほのお") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "ほのお") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "ほのお") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "ほのお") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "ほのお") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "ほのお") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "ほのお") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "ほのお") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "シュカのみ") {
      if (wtype1S1 === "じめん") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "じめん") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "じめん") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "じめん") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "じめん") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "じめん") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "じめん") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "じめん") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "じめん") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "じめん") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "じめん") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "じめん") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "じめん") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "じめん") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "じめん") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "じめん") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ソクノのみ") {
      if (wtype1S1 === "でんき") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "でんき") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "でんき") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "でんき") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "でんき") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "でんき") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "でんき") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "でんき") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "でんき") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "でんき") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "でんき") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "でんき") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "でんき") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "でんき") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "でんき") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "でんき") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ナモのみ") {
      if (wtype1S1 === "あく") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "あく") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "あく") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "あく") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "あく") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "あく") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "あく") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "あく") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "あく") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "あく") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "あく") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "あく") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "あく") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "あく") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "あく") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "あく") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "バコウのみ") {
      if (wtype1S1 === "ひこう") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "ひこう") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "ひこう") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "ひこう") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "ひこう") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "ひこう") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "ひこう") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "ひこう") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "ひこう") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "ひこう") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "ひこう") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "ひこう") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "ひこう") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "ひこう") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "ひこう") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "ひこう") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ハバンのみ") {
      if (wtype1S1 === "ドラゴン") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "ドラゴン") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "ドラゴン") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "ドラゴン") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "ドラゴン") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "ドラゴン") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "ドラゴン") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "ドラゴン") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "ドラゴン") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "ドラゴン") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "ドラゴン") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "ドラゴン") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "ドラゴン") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "ドラゴン") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "ドラゴン") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "ドラゴン") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ヤチェのみ") {
      if (wtype1S1 === "こおり") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "こおり") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "こおり") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "こおり") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "こおり") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "こおり") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "こおり") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "こおり") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "こおり") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "こおり") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "こおり") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "こおり") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "こおり") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "こおり") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "こおり") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "こおり") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ヨプのみ") {
      if (wtype1S1 === "かくとう") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "かくとう") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "かくとう") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "かくとう") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "かくとう") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "かくとう") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "かくとう") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "かくとう") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "かくとう") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "かくとう") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "かくとう") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "かくとう") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "かくとう") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "かくとう") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "かくとう") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "かくとう") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "ヨロギのみ") {
      if (wtype1S1 === "いわ") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "いわ") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "いわ") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "いわ") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "いわ") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "いわ") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "いわ") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "いわ") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "いわ") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "いわ") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "いわ") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "いわ") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "いわ") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "いわ") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "いわ") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "いわ") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }
    if (myItem === "リンドのみ") {
      if (wtype1S1 === "くさ") {
        calc4P1S1 = Math.floor((calc4P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor((calc4KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor((calc4P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor((calc4KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor((calc3P1S1 * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor((calc3KPower1S1 * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor((calc3P1S1Critical * 50) / 100); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor((calc3KPower1S1Critical * 50) / 100); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S1 === "くさ") {
        //敵型1技2
        calc4P2S1 = Math.floor((calc4P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor((calc4KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor((calc4P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor((calc4KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor((calc3P2S1 * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor((calc3KPower2S1 * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor((calc3P2S1Critical * 50) / 100); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor((calc3KPower2S1Critical * 50) / 100); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S1 === "くさ") {
        //敵型1技3
        calc4P3S1 = Math.floor((calc4P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor((calc4KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor((calc4P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor((calc4KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor((calc3P3S1 * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor((calc3KPower3S1 * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor((calc3P3S1Critical * 50) / 100); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor((calc3KPower3S1Critical * 50) / 100); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S1 === "くさ") {
        //敵型1技4
        calc4P4S1 = Math.floor((calc4P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor((calc4KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor((calc4P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor((calc4KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor((calc3P4S1 * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor((calc3KPower4S1 * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor((calc3P4S1Critical * 50) / 100); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor((calc3KPower4S1Critical * 50) / 100); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2 === "くさ") {
        calc4P1S2 = Math.floor((calc4P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor((calc4KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor((calc4P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor((calc4KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor((calc3P1S2 * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor((calc3KPower1S2 * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor((calc3P1S2Critical * 50) / 100); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor((calc3KPower1S2Critical * 50) / 100); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S2 === "くさ") {
        //敵型2技2
        calc4P2S2 = Math.floor((calc4P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor((calc4KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor((calc4P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor((calc4KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor((calc3P2S2 * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor((calc3KPower2S2 * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor((calc3P2S2Critical * 50) / 100); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor((calc3KPower2S2Critical * 50) / 100); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2 === "くさ") {
        //敵型2技3
        calc4P3S2 = Math.floor((calc4P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor((calc4KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor((calc4P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor((calc4KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor((calc3P3S2 * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor((calc3KPower3S2 * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor((calc3P3S2Critical * 50) / 100); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor((calc3KPower3S2Critical * 50) / 100); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S2 === "くさ") {
        calc4P4S2 = Math.floor((calc4P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor((calc4KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor((calc4P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor((calc4KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor((calc3P4S2 * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor((calc3KPower4S2 * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor((calc3P4S2Critical * 50) / 100); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor((calc3KPower4S2Critical * 50) / 100); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3 === "くさ") {
        calc4P1S3 = Math.floor((calc4P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor((calc4KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor((calc4P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor((calc4KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor((calc3P1S3 * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor((calc3KPower1S3 * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor((calc3P1S3Critical * 50) / 100); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor((calc3KPower1S3Critical * 50) / 100); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S3 === "くさ") {
        //敵型3技2
        calc4P2S3 = Math.floor((calc4P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor((calc4KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor((calc4P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor((calc4KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor((calc3P2S3 * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor((calc3KPower2S3 * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor((calc3P2S3Critical * 50) / 100); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor((calc3KPower2S3Critical * 50) / 100); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S3 === "くさ") {
        //敵型3技3
        calc4P3S3 = Math.floor((calc4P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor((calc4KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor((calc4P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor((calc4KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor((calc3P3S3 * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor((calc3KPower3S3 * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor((calc3P3S3Critical * 50) / 100); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor((calc3KPower3S3Critical * 50) / 100); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S3 === "くさ") {
        //敵型3技4
        calc4P4S3 = Math.floor((calc4P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor((calc4KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor((calc4P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor((calc4KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor((calc3P4S3 * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor((calc3KPower4S3 * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor((calc3P4S3Critical * 50) / 100); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor((calc3KPower4S3Critical * 50) / 100); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4 === "くさ") {
        calc4P1S4 = Math.floor((calc4P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor((calc4KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor((calc4P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor((calc4KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor((calc3P1S4 * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor((calc3KPower1S4 * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor((calc3P1S4Critical * 50) / 100); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor((calc3KPower1S4Critical * 50) / 100); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype2S4 === "くさ") {
        //敵型4技2
        calc4P2S4 = Math.floor((calc4P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor((calc4KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor((calc4P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor((calc4KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor((calc3P2S4 * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor((calc3KPower2S4 * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor((calc3P2S4Critical * 50) / 100); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor((calc3KPower2S4Critical * 50) / 100); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S4 === "くさ") {
        //敵型4技3
        calc4P3S4 = Math.floor((calc4P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor((calc4KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor((calc4P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor((calc4KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor((calc3P3S4 * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor((calc3KPower3S4 * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor((calc3P3S4Critical * 50) / 100); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor((calc3KPower3S4Critical * 50) / 100); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype4S4 === "くさ") {
        //敵型4技4
        calc4P4S4 = Math.floor((calc4P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor((calc4KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor((calc4P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor((calc4KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor((calc3P4S4 * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor((calc3KPower4S4 * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor((calc3P4S4Critical * 50) / 100); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor((calc3KPower4S4Critical * 50) / 100); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!
    //!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!
    //!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!
    //!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!!敵ヌケニン判定!
    if (mypokeBaseH == 1) {
      if (wtype1S1ChartT1 * wtype1S1ChartT2 < 2) {
        //敵型1技1
        calc4P1S1 = Math.floor(calc4P1S1 * 0); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1 = Math.floor(calc4KPower1S1 * 0); //敵1ポケ技1（補正あり）威力
        calc4P1S1Critical = Math.floor(calc4P1S1Critical * 0); //敵ポケ１技1例外補正なし威力
        calc4KPower1S1Critical = Math.floor(calc4KPower1S1Critical * 0); //敵1ポケ技1（補正あり）威力
        calc3P1S1 = Math.floor(calc3P1S1 * 0); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S1 = Math.floor(calc3KPower1S1 * 0); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S1Critical = Math.floor(calc3P1S1Critical * 0); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S1Critical = Math.floor(calc3KPower1S1Critical * 0); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S1ChartT1 * wtype2S1ChartT2 < 2) {
        //敵型1技2
        calc4P2S1 = Math.floor(calc4P2S1 * 0); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1 = Math.floor(calc4KPower2S1 * 0); //敵1ポケ技2（補正あり）威力
        calc4P2S1Critical = Math.floor(calc4P2S1Critical * 0); //敵ポケ１技2例外補正なし威力
        calc4KPower2S1Critical = Math.floor(calc4KPower2S1Critical * 0); //敵1ポケ技2（補正あり）威力
        calc3P2S1 = Math.floor(calc3P2S1 * 0); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S1 = Math.floor(calc3KPower2S1 * 0); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S1Critical = Math.floor(calc3P2S1Critical * 0); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S1Critical = Math.floor(calc3KPower2S1Critical * 0); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S1ChartT1 * wtype3S1ChartT2 < 2) {
        //敵型1技3
        calc4P3S1 = Math.floor(calc4P3S1 * 0); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1 = Math.floor(calc4KPower3S1 * 0); //敵1ポケ技3（補正あり）威力
        calc4P3S1Critical = Math.floor(calc4P3S1Critical * 0); //敵ポケ１技3例外補正なし威力
        calc4KPower3S1Critical = Math.floor(calc4KPower3S1Critical * 0); //敵1ポケ技3（補正あり）威力
        calc3P3S1 = Math.floor(calc3P3S1 * 0); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S1 = Math.floor(calc3KPower3S1 * 0); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S1Critical = Math.floor(calc3P3S1Critical * 0); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower3S1Critical = Math.floor(calc3KPower3S1Critical * 0); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S1ChartT1 * wtype4S1ChartT2 < 2) {
        //敵型1技4
        calc4P4S1 = Math.floor(calc4P4S1 * 0); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1 = Math.floor(calc4KPower4S1 * 0); //敵1ポケ技4（補正あり）威力
        calc4P4S1Critical = Math.floor(calc4P4S1Critical * 0); //敵ポケ１技4例外補正なし威力
        calc4KPower4S1Critical = Math.floor(calc4KPower4S1Critical * 0); //敵1ポケ技4（補正あり）威力
        calc3P4S1 = Math.floor(calc3P4S1 * 0); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S1 = Math.floor(calc3KPower4S1 * 0); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S1Critical = Math.floor(calc3P4S1Critical * 0); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S1Critical = Math.floor(calc3KPower4S1Critical * 0); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S2ChartT1 * wtype1S2ChartT2 < 2) {
        //敵型2技1
        calc4P1S2 = Math.floor(calc4P1S2 * 0); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2 = Math.floor(calc4KPower1S2 * 0); //敵2ポケ技1（補正あり）威力
        calc4P1S2Critical = Math.floor(calc4P1S2Critical * 0); //敵ポケ2技1例外補正なし威力
        calc4KPower1S2Critical = Math.floor(calc4KPower1S2Critical * 0); //敵2ポケ技1（補正あり）威力
        calc3P1S2 = Math.floor(calc3P1S2 * 0); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S2 = Math.floor(calc3KPower1S2 * 0); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S2Critical = Math.floor(calc3P1S2Critical * 0); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S2Critical = Math.floor(calc3KPower1S2Critical * 0); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S2ChartT1 * wtype2S2ChartT2 < 2) {
        //敵型2技2

        calc4P2S2 = Math.floor(calc4P2S2 * 0); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2 = Math.floor(calc4KPower2S2 * 0); //敵2ポケ技2（補正あり）威力
        calc4P2S2Critical = Math.floor(calc4P2S2Critical * 0); //敵ポケ2技2例外補正なし威力
        calc4KPower2S2Critical = Math.floor(calc4KPower2S2Critical * 0); //敵2ポケ技2（補正あり）威力
        calc3P2S2 = Math.floor(calc3P2S2 * 0); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S2 = Math.floor(calc3KPower2S2 * 0); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S2Critical = Math.floor(calc3P2S2Critical * 0); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S2Critical = Math.floor(calc3KPower2S2Critical * 0); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
      if (wtype3S2ChartT1 * wtype3S2ChartT2 < 2) {
        //敵型2技3
        calc4P3S2 = Math.floor(calc4P3S2 * 0); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2 = Math.floor(calc4KPower3S2 * 0); //敵2ポケ技3（補正あり）威力
        calc4P3S2Critical = Math.floor(calc4P3S2Critical * 0); //敵ポケ2技3例外補正なし威力
        calc4KPower3S2Critical = Math.floor(calc4KPower3S2Critical * 0); //敵2ポケ技3（補正あり）威力
        calc3P3S2 = Math.floor(calc3P3S2 * 0); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S2 = Math.floor(calc3KPower3S2 * 0); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S2Critical = Math.floor(calc3P3S2Critical * 0); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S2Critical = Math.floor(calc3KPower3S2Critical * 0); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S2ChartT1 * wtype4S2ChartT2 < 2) {
        //敵型2技4
        calc4P4S2 = Math.floor(calc4P4S2 * 0); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2 = Math.floor(calc4KPower4S2 * 0); //敵2ポケ技4（補正あり）威力
        calc4P4S2Critical = Math.floor(calc4P4S2Critical * 0); //敵ポケ2技4例外補正なし威力
        calc4KPower4S2Critical = Math.floor(calc4KPower4S2Critical * 0); //敵2ポケ技4（補正あり）威力
        calc3P4S2 = Math.floor(calc3P4S2 * 0); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S2 = Math.floor(calc3KPower4S2 * 0); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S2Critical = Math.floor(calc3P4S2Critical * 0); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S2Critical = Math.floor(calc3KPower4S2Critical * 0); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S3ChartT1 * wtype1S3ChartT2 < 2) {
        //敵型3技1

        calc4P1S3 = Math.floor(calc4P1S3 * 0); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3 = Math.floor(calc4KPower1S3 * 0); //敵3ポケ技1（補正あり）威力
        calc4P1S3Critical = Math.floor(calc4P1S3Critical * 0); //敵ポケ3技1例外補正なし威力
        calc4KPower1S3Critical = Math.floor(calc4KPower1S3Critical * 0); //敵3ポケ技1（補正あり）威力
        calc3P1S3 = Math.floor(calc3P1S3 * 0); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S3 = Math.floor(calc3KPower1S3 * 0); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S3Critical = Math.floor(calc3P1S3Critical * 0); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S3Critical = Math.floor(calc3KPower1S3Critical * 0); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S3ChartT1 * wtype2S3ChartT2 < 2) {
        //敵型3技2
        calc4P2S3 = Math.floor(calc4P2S3 * 0); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3 = Math.floor(calc4KPower2S3 * 0); //敵3ポケ技2（補正あり）威力
        calc4P2S3Critical = Math.floor(calc4P2S3Critical * 0); //敵ポケ3技2例外補正なし威力
        calc4KPower2S3Critical = Math.floor(calc4KPower2S3Critical * 0); //敵3ポケ技2（補正あり）威力
        calc3P2S3 = Math.floor(calc3P2S3 * 0); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S3 = Math.floor(calc3KPower2S3 * 0); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S3Critical = Math.floor(calc3P2S3Critical * 0); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
        calc3KPower2S3Critical = Math.floor(calc3KPower2S3Critical * 0); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S3ChartT1 * wtype3S3ChartT2 < 2) {
        //敵型3技3
        calc4P3S3 = Math.floor(calc4P3S3 * 0); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3 = Math.floor(calc4KPower3S3 * 0); //敵3ポケ技3（補正あり）威力
        calc4P3S3Critical = Math.floor(calc4P3S3Critical * 0); //敵ポケ3技3例外補正なし威力
        calc4KPower3S3Critical = Math.floor(calc4KPower3S3Critical * 0); //敵3ポケ技3（補正あり）威力
        calc3P3S3 = Math.floor(calc3P3S3 * 0); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S3 = Math.floor(calc3KPower3S3 * 0); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S3Critical = Math.floor(calc3P3S3Critical * 0); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S3Critical = Math.floor(calc3KPower3S3Critical * 0); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S3ChartT1 * wtype4S3ChartT2 < 2) {
        //敵型3技4
        calc4P4S3 = Math.floor(calc4P4S3 * 0); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3 = Math.floor(calc4KPower4S3 * 0); //敵3ポケ技4（補正あり）威力
        calc4P4S3Critical = Math.floor(calc4P4S3Critical * 0); //敵ポケ3技4例外補正なし威力
        calc4KPower4S3Critical = Math.floor(calc4KPower4S3Critical * 0); //敵3ポケ技4（補正あり）威力
        calc3P4S3 = Math.floor(calc3P4S3 * 0); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S3 = Math.floor(calc3KPower4S3 * 0); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S3Critical = Math.floor(calc3P4S3Critical * 0); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower4S3Critical = Math.floor(calc3KPower4S3Critical * 0); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype1S4ChartT1 * wtype1S4ChartT2 < 2) {
        calc4P1S4 = Math.floor(calc4P1S4 * 0); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4 = Math.floor(calc4KPower1S4 * 0); //敵4ポケ技1（補正あり）威力
        calc4P1S4Critical = Math.floor(calc4P1S4Critical * 0); //敵ポケ4技1例外補正なし威力
        calc4KPower1S4Critical = Math.floor(calc4KPower1S4Critical * 0); //敵4ポケ技1（補正あり）威力
        calc3P1S4 = Math.floor(calc3P1S4 * 0); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower1S4 = Math.floor(calc3KPower1S4 * 0); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P1S4Critical = Math.floor(calc3P1S4Critical * 0); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower1S4Critical = Math.floor(calc3KPower1S4Critical * 0); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype2S4ChartT1 * wtype2S4ChartT2 < 2) {
        //敵型4技2
        calc4P2S4 = Math.floor(calc4P2S4 * 0); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4 = Math.floor(calc4KPower2S4 * 0); //敵4ポケ技2（補正あり）威力
        calc4P2S4Critical = Math.floor(calc4P2S4Critical * 0); //敵ポケ4技2例外補正なし威力
        calc4KPower2S4Critical = Math.floor(calc4KPower2S4Critical * 0); //敵4ポケ技2（補正あり）威力
        calc3P2S4 = Math.floor(calc3P2S4 * 0); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower2S4 = Math.floor(calc3KPower2S4 * 0); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P2S4Critical = Math.floor(calc3P2S4Critical * 0); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower2S4Critical = Math.floor(calc3KPower2S4Critical * 0); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype3S4ChartT1 * wtype3S4ChartT2 < 2) {
        //敵型4技3
        calc4P3S4 = Math.floor(calc4P3S4 * 0); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4 = Math.floor(calc4KPower3S4 * 0); //敵4ポケ技3（補正あり）威力
        calc4P3S4Critical = Math.floor(calc4P3S4Critical * 0); //敵ポケ4技3例外補正なし威力
        calc4KPower3S4Critical = Math.floor(calc4KPower3S4Critical * 0); //敵4ポケ技3（補正あり）威力
        calc3P3S4 = Math.floor(calc3P3S4 * 0); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower3S4 = Math.floor(calc3KPower3S4 * 0); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P3S4Critical = Math.floor(calc3P3S4Critical * 0); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
        calc3KPower3S4Critical = Math.floor(calc3KPower3S4Critical * 0); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }

      if (wtype4S4ChartT1 * wtype4S4ChartT2 < 2) {
        //敵型4技4
        calc4P4S4 = Math.floor(calc4P4S4 * 0); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4 = Math.floor(calc4KPower4S4 * 0); //敵4ポケ技4（補正あり）威力
        calc4P4S4Critical = Math.floor(calc4P4S4Critical * 0); //敵ポケ4技4例外補正なし威力
        calc4KPower4S4Critical = Math.floor(calc4KPower4S4Critical * 0); //敵4ポケ技4（補正あり）威力
        calc3P4S4 = Math.floor(calc3P4S4 * 0); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4 = Math.floor(calc3KPower4S4 * 0); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
        calc3P4S4Critical = Math.floor(calc3P4S4Critical * 0); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
        calc3KPower4S4Critical = Math.floor(calc3KPower4S4Critical * 0); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
      }
    }

    //////////乱数最大//////////
    //////////乱数最大//////////
    //////////乱数最大//////////
    //////////乱数最大//////////
    let calc5P1_S1 = ((calc3P1_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S1 = ((calc3P2_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S1 = ((calc3P3_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S1 = ((calc3P4_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S2 = ((calc3P1_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S2 = ((calc3P2_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S2 = ((calc3P3_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S2 = ((calc3P4_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S3 = ((calc3P1_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S3 = ((calc3P2_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S3 = ((calc3P3_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S3 = ((calc3P4_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S4 = ((calc3P1_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S4 = ((calc3P2_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S4 = ((calc3P3_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S4 = ((calc3P4_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power1 = ((calc3KS1Power1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power2 = ((calc3KS1Power2 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power3 = ((calc3KS1Power3 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power4 = ((calc3KS1Power4 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power1 = ((calc3KS2Power1 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power2 = ((calc3KS2Power2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power3 = ((calc3KS2Power3 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power4 = ((calc3KS2Power4 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power1 = ((calc3KS3Power1 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power2 = ((calc3KS3Power2 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power3 = ((calc3KS3Power3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power4 = ((calc3KS3Power4 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power1 = ((calc3KS4Power1 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power2 = ((calc3KS4Power2 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power3 = ((calc3KS4Power3 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power4 = ((calc3KS4Power4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1S1 = ((calc3P1S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2S1 = ((calc3P2S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3S1 = ((calc3P3S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4S1 = ((calc3P4S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1S2 = ((calc3P1S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2S2 = ((calc3P2S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3S2 = ((calc3P3S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4S2 = ((calc3P4S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1S3 = ((calc3P1S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2S3 = ((calc3P2S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3S3 = ((calc3P3S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4S3 = ((calc3P4S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1S4 = ((calc3P1S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2S4 = ((calc3P2S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3S4 = ((calc3P3S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4S4 = ((calc3P4S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower1S1 = ((calc3KPower1S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower2S1 = ((calc3KPower2S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower3S1 = ((calc3KPower3S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower4S1 = ((calc3KPower4S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower1S2 = ((calc3KPower1S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower2S2 = ((calc3KPower2S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower3S2 = ((calc3KPower3S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower4S2 = ((calc3KPower4S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower1S3 = ((calc3KPower1S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower2S3 = ((calc3KPower2S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower3S3 = ((calc3KPower3S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower4S3 = ((calc3KPower4S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower1S4 = ((calc3KPower1S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower2S4 = ((calc3KPower2S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower3S4 = ((calc3KPower3S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower4S4 = ((calc3KPower4S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S1Critical = ((calc3P1_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S1Critical = ((calc3P2_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S1Critical = ((calc3P3_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S1Critical = ((calc3P4_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S2Critical = ((calc3P1_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S2Critical = ((calc3P2_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S2Critical = ((calc3P3_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S2Critical = ((calc3P4_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S3Critical = ((calc3P1_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S3Critical = ((calc3P2_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S3Critical = ((calc3P3_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S3Critical = ((calc3P4_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1_S4Critical = ((calc3P1_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P2_S4Critical = ((calc3P2_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P3_S4Critical = ((calc3P3_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P4_S4Critical = ((calc3P4_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power1Critical = ((calc3KS1Power1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power2Critical = ((calc3KS1Power2Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power3Critical = ((calc3KS1Power3Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS1Power4Critical = ((calc3KS1Power4Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4が敵型1への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power1Critical = ((calc3KS2Power1Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power2Critical = ((calc3KS2Power2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power3Critical = ((calc3KS2Power3Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS2Power4Critical = ((calc3KS2Power4Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4が敵型2への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power1Critical = ((calc3KS3Power1Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power2Critical = ((calc3KS3Power2Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power3Critical = ((calc3KS3Power3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS3Power4Critical = ((calc3KS3Power4Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4が敵型3への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power1Critical = ((calc3KS4Power1Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power2Critical = ((calc3KS4Power2Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power3Critical = ((calc3KS4Power3Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KS4Power4Critical = ((calc3KS4Power4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4が敵型4への（補正あり）威力 * A/B or C/D(物理か特殊判定) ○
    let calc5P1S1Critical = ((calc3P1S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P2S1Critical = ((calc3P2S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P3S1Critical = ((calc3P3S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技3例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    let calc5P4S1Critical = ((calc3P4S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P1S2Critical = ((calc3P1S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P2S2Critical = ((calc3P2S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P3S2Critical = ((calc3P3S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P4S2Critical = ((calc3P4S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P1S3Critical = ((calc3P1S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P2S3Critical = ((calc3P2S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技2例外補正なし威力 * A/B or C/D(物理か特殊判定)  ○
    let calc5P3S3Critical = ((calc3P3S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P4S3Critical = ((calc3P4S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技4例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P1S4Critical = ((calc3P1S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技1例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P2S4Critical = ((calc3P2S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技2例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P3S4Critical = ((calc3P3S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技3例外補正なし威力 * A/B or C/D(物理か特殊判定)
    let calc5P4S4Critical = ((calc3P4S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技4例外補正なし威力 * A/B or C/D(物理か特殊判定) ○
    let calc5KPower1S1Critical = ((calc3KPower1S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower2S1Critical = ((calc3KPower2S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower3S1Critical = ((calc3KPower3S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower4S1Critical = ((calc3KPower4S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower1S2Critical = ((calc3KPower1S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower2S2Critical = ((calc3KPower2S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower3S2Critical = ((calc3KPower3S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower4S2Critical = ((calc3KPower4S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower1S3Critical = ((calc3KPower1S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower2S3Critical = ((calc3KPower2S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower3S3Critical = ((calc3KPower3S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower4S3Critical = ((calc3KPower4S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower1S4Critical = ((calc3KPower1S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技1（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower2S4Critical = ((calc3KPower2S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技2（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower3S4Critical = ((calc3KPower3S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技3（補正あり）威力 * A/B or C/D(物理か特殊判定)
    let calc5KPower4S4Critical = ((calc3KPower4S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技4（補正あり）威力 * A/B or C/D(物理か特殊判定)

    //////////乱数0.85//////////
    //////////乱数0.85//////////
    //////////乱数0.85//////////
    //////////乱数0.85//////////

    let calc6P1_S1 = ((calc4P1_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力 ○
    let calc6P1_S2 = ((calc4P1_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    let calc6P1_S3 = ((calc4P1_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    let calc6P1_S4 = ((calc4P1_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
    let calc6P2_S1 = ((calc4P2_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    let calc6P2_S2 = ((calc4P2_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    let calc6P2_S3 = ((calc4P2_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    let calc6P2_S4 = ((calc4P2_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
    let calc6P3_S1 = ((calc4P3_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    let calc6P3_S2 = ((calc4P3_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    let calc6P3_S3 = ((calc4P3_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    let calc6P3_S4 = ((calc4P3_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
    let calc6P4_S1 = ((calc4P4_S1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    let calc6P4_S2 = ((calc4P4_S2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    let calc6P4_S3 = ((calc4P4_S3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    let calc6P4_S4 = ((calc4P4_S4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    let calc6KS1Power1 = ((calc4KS1Power1 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1が敵型1への（補正あり）威力 ○
    let calc6KS1Power2 = ((calc4KS1Power2 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2が敵型1への（補正あり）威力
    let calc6KS1Power3 = ((calc4KS1Power3 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3が敵型1への（補正あり）威力
    let calc6KS1Power4 = ((calc4KS1Power4 / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4が敵型1への（補正あり）威力
    let calc6KS2Power1 = ((calc4KS2Power1 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1が敵型2への（補正あり）威力
    let calc6KS2Power2 = ((calc4KS2Power2 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2が敵型2への（補正あり）威力
    let calc6KS2Power3 = ((calc4KS2Power3 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3が敵型2への（補正あり）威力
    let calc6KS2Power4 = ((calc4KS2Power4 / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4が敵型2への（補正あり）威力
    let calc6KS3Power1 = ((calc4KS3Power1 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1が敵型3への（補正あり）威力
    let calc6KS3Power2 = ((calc4KS3Power2 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2が敵型3への（補正あり）威力
    let calc6KS3Power3 = ((calc4KS3Power3 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3が敵型3への（補正あり）威力
    let calc6KS3Power4 = ((calc4KS3Power4 / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4が敵型3への（補正あり）威力
    let calc6KS4Power1 = ((calc4KS4Power1 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1が敵型4への（補正あり）威力
    let calc6KS4Power2 = ((calc4KS4Power2 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2が敵型4への（補正あり）威力
    let calc6KS4Power3 = ((calc4KS4Power3 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3が敵型4への（補正あり）威力
    let calc6KS4Power4 = ((calc4KS4Power4 / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4が敵型4への（補正あり）威力

    //敵ポケ１の型が使う4つの技
    let calc6P1S1 = ((calc4P1S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技1例外補正なし威力
    let calc6P2S1 = ((calc4P2S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技2例外補正なし威力
    let calc6P3S1 = ((calc4P3S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技3例外補正なし威力
    let calc6P4S1 = ((calc4P4S1 / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技4例外補正なし威力
    //敵ポケ2の型が使う4つの技
    let calc6P1S2 = ((calc4P1S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技1例外補正なし威力
    let calc6P2S2 = ((calc4P2S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技2例外補正なし威力
    let calc6P3S2 = ((calc4P3S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技3例外補正なし威力
    let calc6P4S2 = ((calc4P4S2 / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技4例外補正なし威力
    //敵ポケ3の型が使う4つの技
    let calc6P1S3 = ((calc4P1S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技1例外補正なし威力
    let calc6P2S3 = ((calc4P2S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技2例外補正なし威力
    let calc6P3S3 = ((calc4P3S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技3例外補正なし威力
    let calc6P4S3 = ((calc4P4S3 / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技4例外補正なし威力
    //敵ポケ4の型が使う4つの技
    let calc6P1S4 = ((calc4P1S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技1例外補正なし威力
    let calc6P2S4 = ((calc4P2S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技2例外補正なし威力
    let calc6P3S4 = ((calc4P3S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技3例外補正なし威力
    let calc6P4S4 = ((calc4P4S4 / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技4例外補正なし威力

    let calc6KPower1S1 = ((calc4KPower1S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技1（補正あり）威力
    let calc6KPower2S1 = ((calc4KPower2S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技2（補正あり）威力
    let calc6KPower3S1 = ((calc4KPower3S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技3（補正あり）威力
    let calc6KPower4S1 = ((calc4KPower4S1 / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技4（補正あり）威力

    let calc6KPower1S2 = ((calc4KPower1S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技1（補正あり）威力
    let calc6KPower2S2 = ((calc4KPower2S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技2（補正あり）威力
    let calc6KPower3S2 = ((calc4KPower3S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技3（補正あり）威力
    let calc6KPower4S2 = ((calc4KPower4S2 / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技4（補正あり）威力

    let calc6KPower1S3 = ((calc4KPower1S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技1（補正あり）威力
    let calc6KPower2S3 = ((calc4KPower2S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技2（補正あり）威力
    let calc6KPower3S3 = ((calc4KPower3S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技3（補正あり）威力
    let calc6KPower4S3 = ((calc4KPower4S3 / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技4（補正あり）威力

    let calc6KPower1S4 = ((calc4KPower1S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技1（補正あり）威力
    let calc6KPower2S4 = ((calc4KPower2S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技2（補正あり）威力
    let calc6KPower3S4 = ((calc4KPower3S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技3（補正あり）威力
    let calc6KPower4S4 = ((calc4KPower4S4 / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技4（補正あり）威力

    /////////急所//////////
    let calc6P1_S1Critical = ((calc4P1_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型1に当てた時の威力
    let calc6P2_S1Critical = ((calc4P2_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型1に当てた時の威力
    let calc6P3_S1Critical = ((calc4P3_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型1に当てた時の威力
    let calc6P4_S1Critical = ((calc4P4_S1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型1に当てた時の威力
    let calc6P1_S2Critical = ((calc4P1_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型2に当てた時の威力
    let calc6P2_S2Critical = ((calc4P2_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型2に当てた時の威力
    let calc6P3_S2Critical = ((calc4P3_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型2に当てた時の威力
    let calc6P4_S2Critical = ((calc4P4_S2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型2に当てた時の威力
    let calc6P1_S3Critical = ((calc4P1_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型3に当てた時の威力
    let calc6P2_S3Critical = ((calc4P2_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型3に当てた時の威力
    let calc6P3_S3Critical = ((calc4P3_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型3に当てた時の威力
    let calc6P4_S3Critical = ((calc4P4_S3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型3に当てた時の威力
    let calc6P1_S4Critical = ((calc4P1_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1例外補正なし威力 を敵型4に当てた時の威力
    let calc6P2_S4Critical = ((calc4P2_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2例外補正なし威力 を敵型4に当てた時の威力
    let calc6P3_S4Critical = ((calc4P3_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3例外補正なし威力 を敵型4に当てた時の威力
    let calc6P4_S4Critical = ((calc4P4_S4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4例外補正なし威力 を敵型4に当てた時の威力

    let calc6KS1Power1Critical = ((calc4KS1Power1Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技1が敵型1への（補正あり）威力
    let calc6KS1Power2Critical = ((calc4KS1Power2Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技2が敵型1への（補正あり）威力
    let calc6KS1Power3Critical = ((calc4KS1Power3Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技3が敵型1への（補正あり）威力
    let calc6KS1Power4Critical = ((calc4KS1Power4Critical / tekipokeStatusHS1) * 100).toFixed(1); //自分ポケ技4が敵型1への（補正あり）威力
    let calc6KS2Power1Critical = ((calc4KS2Power1Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技1が敵型2への（補正あり）威力
    let calc6KS2Power2Critical = ((calc4KS2Power2Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技2が敵型2への（補正あり）威力
    let calc6KS2Power3Critical = ((calc4KS2Power3Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技3が敵型2への（補正あり）威力
    let calc6KS2Power4Critical = ((calc4KS2Power4Critical / tekipokeStatusHS2) * 100).toFixed(1); //自分ポケ技4が敵型2への（補正あり）威力
    let calc6KS3Power1Critical = ((calc4KS3Power1Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技1が敵型3への（補正あり）威力
    let calc6KS3Power2Critical = ((calc4KS3Power2Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技2が敵型3への（補正あり）威力
    let calc6KS3Power3Critical = ((calc4KS3Power3Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技3が敵型3への（補正あり）威力
    let calc6KS3Power4Critical = ((calc4KS3Power4Critical / tekipokeStatusHS3) * 100).toFixed(1); //自分ポケ技4が敵型3への（補正あり）威力
    let calc6KS4Power1Critical = ((calc4KS4Power1Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技1が敵型4への（補正あり）威力
    let calc6KS4Power2Critical = ((calc4KS4Power2Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技2が敵型4への（補正あり）威力
    let calc6KS4Power3Critical = ((calc4KS4Power3Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技3が敵型4への（補正あり）威力
    let calc6KS4Power4Critical = ((calc4KS4Power4Critical / tekipokeStatusHS4) * 100).toFixed(1); //自分ポケ技4が敵型4への（補正あり）威力

    //敵ポケ１の型が使う4つの技
    let calc6P1S1Critical = ((calc4P1S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技1例外補正なし威力
    let calc6P2S1Critical = ((calc4P2S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技2例外補正なし威力
    let calc6P3S1Critical = ((calc4P3S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技3例外補正なし威力
    let calc6P4S1Critical = ((calc4P4S1Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ１技4例外補正なし威力
    let calc6P1S2Critical = ((calc4P1S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技1例外補正なし威力
    let calc6P2S2Critical = ((calc4P2S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技2例外補正なし威力
    let calc6P3S2Critical = ((calc4P3S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技3例外補正なし威力
    let calc6P4S2Critical = ((calc4P4S2Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ2技4例外補正なし威力
    let calc6P1S3Critical = ((calc4P1S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技1例外補正なし威力
    let calc6P2S3Critical = ((calc4P2S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技2例外補正なし威力
    let calc6P3S3Critical = ((calc4P3S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技3例外補正なし威力
    let calc6P4S3Critical = ((calc4P4S3Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ3技4例外補正なし威力
    let calc6P1S4Critical = ((calc4P1S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技1例外補正なし威力
    let calc6P2S4Critical = ((calc4P2S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技2例外補正なし威力
    let calc6P3S4Critical = ((calc4P3S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技3例外補正なし威力
    let calc6P4S4Critical = ((calc4P4S4Critical / mypokeStatusH) * 100).toFixed(1); //敵ポケ4技4例外補正なし威力

    let calc6KPower1S1Critical = ((calc4KPower1S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技1（補正あり）威力
    let calc6KPower2S1Critical = ((calc4KPower2S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技2（補正あり）威力
    let calc6KPower3S1Critical = ((calc4KPower3S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技3（補正あり）威力
    let calc6KPower4S1Critical = ((calc4KPower4S1Critical / mypokeStatusH) * 100).toFixed(1); //敵1ポケ技4（補正あり）威力
    let calc6KPower1S2Critical = ((calc4KPower1S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技1（補正あり）威力
    let calc6KPower2S2Critical = ((calc4KPower2S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技2（補正あり）威力
    let calc6KPower3S2Critical = ((calc4KPower3S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技3（補正あり）威力
    let calc6KPower4S2Critical = ((calc4KPower4S2Critical / mypokeStatusH) * 100).toFixed(1); //敵2ポケ技4（補正あり）威力
    let calc6KPower1S3Critical = ((calc4KPower1S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技1（補正あり）威力
    let calc6KPower2S3Critical = ((calc4KPower2S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技2（補正あり）威力
    let calc6KPower3S3Critical = ((calc4KPower3S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技3（補正あり）威力
    let calc6KPower4S3Critical = ((calc4KPower4S3Critical / mypokeStatusH) * 100).toFixed(1); //敵3ポケ技4（補正あり）威力
    let calc6KPower1S4Critical = ((calc4KPower1S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技1（補正あり）威力
    let calc6KPower2S4Critical = ((calc4KPower2S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技2（補正あり）威力
    let calc6KPower3S4Critical = ((calc4KPower3S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技3（補正あり）威力
    let calc6KPower4S4Critical = ((calc4KPower4S4Critical / mypokeStatusH) * 100).toFixed(1); //敵4ポケ技4（補正あり）威力

    function katakanaToHiragana(str) {
      return str.replace(/[\u30A1-\u30F6]/g, function (match) {
        var chr = match.charCodeAt(0) - 0x60;
        return String.fromCharCode(chr);
      });
    }
    let tekiNAMEhira = katakanaToHiragana(tekiNAME);

    results.push(
      [
        tekiNAME,
        tekiShape,
        name1,
        calc6P1_S1,
        calc5P1_S1,
        calc6KS1Power1,
        calc5KS1Power1,
        calc6P1_S2,
        calc5P1_S2,
        calc6KS2Power1,
        calc5KS2Power1,
        calc6P1_S3,
        calc5P1_S3,
        calc6KS3Power1,
        calc5KS3Power1,
        calc6P1_S4,
        calc5P1_S4,
        calc6KS4Power1,
        calc5KS4Power1,
        moveClass1,
        tekiNAMEhira,
        NAME,
        pokeShapeVal,
      ],
      [
        tekiNAME,
        tekiShape,
        name2,
        calc6P2_S1,
        calc5P2_S1,
        calc6KS1Power2,
        calc5KS1Power2,
        calc6P2_S2,
        calc5P2_S2,
        calc6KS2Power2,
        calc5KS2Power2,
        calc6P2_S3,
        calc5P2_S3,
        calc6KS3Power2,
        calc5KS3Power2,
        calc6P2_S4,
        calc5P2_S4,
        calc6KS4Power2,
        calc5KS4Power2,
        moveClass2,
        tekiNAMEhira,
        NAME,
        pokeShapeVal,
      ],
      [
        tekiNAME,
        tekiShape,
        name3,
        calc6P3_S1,
        calc5P3_S1,
        calc6KS1Power3,
        calc5KS1Power3,
        calc6P3_S2,
        calc5P3_S2,
        calc6KS2Power3,
        calc5KS2Power3,
        calc6P3_S3,
        calc5P3_S3,
        calc6KS3Power3,
        calc5KS3Power3,
        calc6P3_S4,
        calc5P3_S4,
        calc6KS4Power3,
        calc5KS4Power3,
        moveClass3,
        tekiNAMEhira,
        NAME,
        pokeShapeVal,
      ],
      [
        tekiNAME,
        tekiShape,
        name4,
        calc6P4_S1,
        calc5P4_S1,
        calc6KS1Power4,
        calc5KS1Power4,
        calc6P4_S2,
        calc5P4_S2,
        calc6KS2Power4,
        calc5KS2Power4,
        calc6P4_S3,
        calc5P4_S3,
        calc6KS3Power4,
        calc5KS3Power4,
        calc6P4_S4,
        calc5P4_S4,
        calc6KS4Power4,
        calc5KS4Power4,
        moveClass4,
        tekiNAMEhira,
        NAME,
        pokeShapeVal,
      ]
    );
  }

  function displayResults() {
    const container = $("#wanpanresult");
    container.empty(); // 既存の結果を削除する

    const tableHtml = `

    <table id="sampleTable">
      <thead>
        <tr>
        <th>自ポケ</th>
        <th>敵ポケ</th>
        <th>技</th>
        <th>[基]小%</th>
        <th>[基]大%</th>
        <th>[変]小%</th>
        <th>[変]大%</th>
        <th>かな</th>
        </tr>
      </thead>
      <tbody>
        ${results
          .map(
            (result) => `
        ${
          result[19] === "変化"
            ? ``
            : result[1] === 1
            ? `<tr class="${result[3] >= 100 ? "highlight" : result[3] <= 100 && result[4] >= 100 ? "highlightR" : ""}">
          <td>${result[21]}[${result[22]}]</td>
            <td>${result[0]}[${result[1]}]</td>
            <td>${result[2]}</td>
            <td>${result[3]}</td>
            <td>${result[4]}</td>
            <td>${result[5]}</td>
            <td>${result[6]}</td>
            <td>${result[20]}</td>
          </tr>`
            : result[1] === 2
            ? `<tr class="${result[7] >= 100 ? "highlight" : result[7] <= 100 && result[8] >= 100 ? "highlightR" : ""}">
          <td>${result[21]}[${result[22]}]</td>
            <td>${result[0]}[${result[1]}]</td>
          <td>${result[2]}</td>
          <td>${result[7]}</td>
          <td>${result[8]}</td>
          <td>${result[9]}</td>
          <td>${result[10]}</td>
          <td>${result[20]}</td>

        </tr>`
            : result[1] === 3
            ? `<tr class="${
                result[11] >= 100 ? "highlight" : result[11] <= 100 && result[12] >= 100 ? "highlightR" : ""
              }">
        <td>${result[21]}[${result[22]}]</td>
        <td>${result[0]}[${result[1]}]</td>
          <td>${result[2]}</td>
          <td>${result[11]}</td>
          <td>${result[12]}</td>
          <td>${result[13]}</td>
          <td>${result[14]}</td>
          <td>${result[20]}</td>
        </tr>`
            : `<tr class="${
                result[15] >= 100 ? "highlight" : result[15] <= 100 && result[16] >= 100 ? "highlightR" : ""
              }">
        <td>${result[21]}[${result[22]}]</td>
        <td>${result[0]}[${result[1]}]</td>
          <td>${result[2]}</td>
          <td>${result[15]}</td>
          <td>${result[16]}</td>
          <td>${result[17]}</td>
          <td>${result[18]}</td>
          <td>${result[20]}</td>
        </tr>`
        } 
        `
          )
          .join("")}
      </tbody>
    </table>
  `;
    container.append(tableHtml);

    // DataTablesを適用する
    const table = $("#sampleTable").DataTable({
      searching: true,
      searchDelay: 500,
      pageLength: 1000, // 1ページあたりの行数を100に設定する
      order: [[3, "desc"]],
      columnDefs: [{ targets: 7, visible: false }],
    });
  }

  // ページ読み込み後にdisplayResults()関数を実行
  $(document).ready(function () {
    displayResults();
  });
});
